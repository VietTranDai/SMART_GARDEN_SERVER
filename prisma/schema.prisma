// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int     @id @default(autoincrement()) // Unique identifier for the role
  name        String  @unique // Name of the role, e.g., 'GARDENER', 'ADMIN'
  description String? // Optional description of the role
  users       User[] // Users associated with this role
}

model User {
  id             Int       @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String
  username       String    @unique
  password       String
  phoneNumber    String?
  dateOfBirth    DateTime?
  roleId         Int
  role           Role      @relation(fields: [roleId], references: [id])
  refreshToken   String?
  lastLogin      DateTime?
  profilePicture String?
  address        String?
  bio            String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Extended relations: each user can be either an Admin or a Gardener (not both)
  admin              Admin?
  gardener           Gardener?
  activityEvaluation ActivityEvaluation[]
  alert              Alert[]

  @@index([lastLogin]) // Creates an index for queries by last login time
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  adminId   Int
  admin     Admin    @relation(fields: [adminId], references: [userId], onDelete: Cascade)
  action    String // Action performed, e.g., "CREATE_USER", "DELETE_RECORD", etc.
  details   String? // Additional details or notes
  timestamp DateTime // Timestamp of the action
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp]) // Index for queries based on timestamp (e.g., for audit logs, reporting)
}

model Admin {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  auditLogs AuditLog[]
}

model ExperienceLevel {
  id          Int        @id @default(autoincrement())
  level       Int        @unique // S·ªë c·∫•p ƒë·ªô (v√≠ d·ª•: 1, 2, 3)
  minXP       Int // Ng∆∞·ª°ng XP t·ªëi thi·ªÉu ƒë·ªÉ ƒë·∫°t c·∫•p ƒë·ªô
  maxXP       Int
  title       String // Danh hi·ªáu (v√≠ d·ª•: "Ng∆∞·ªùi l√†m v∆∞·ªùn m·ªõi")
  description String // M√¥ t·∫£ c·∫•p ƒë·ªô
  icon        String // Bi·ªÉu t∆∞·ª£ng ƒë·∫°i di·ªán (v√≠ d·ª•: üå±)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  gardeners   Gardener[] // Ng∆∞·ªùi l√†m v∆∞·ªùn ·ªü c·∫•p ƒë·ªô n√†y
}

model Gardener {
  userId Int  @id
  user   User @relation(fields: [userId], references: [id])

  experiencePoints  Int             @default(0) // ƒêi·ªÉm kinh nghi·ªám hi·ªán t·∫°i
  experienceLevelId Int // Kh√≥a ngo·∫°i li√™n k·∫øt v·ªõi Level.id
  experienceLevel   ExperienceLevel @relation(fields: [experienceLevelId], references: [id])

  gardens Garden[]

  votes              Vote[]
  posts              Post[]
  comments           Comment[]
  follow             Follow[]             @relation("Follower")
  following          Follow[]             @relation("Followed")
  task               Task[]
  gardenActivity     GardenActivity[]
  activityEvaluation ActivityEvaluation[]
  photoEvaluation    PhotoEvaluation[]

  @@index([experiencePoints])
  @@index([experienceLevelId])
}

enum GardenStatus {
  ACTIVE
  INACTIVE
}

enum GardenType {
  INDOOR
  OUTDOOR
  BALCONY
  ROOFTOP
  WINDOW_SILL
}

model Garden {
  id        Int    @id @default(autoincrement())
  gardenKey String @unique

  name           String
  profilePicture String?
  description    String?

  street   String?
  ward     String?
  district String?
  city     String?
  lat      Float?
  lng      Float?

  gardenerId Int
  gardener   Gardener @relation(fields: [gardenerId], references: [userId], onDelete: Cascade)

  type   GardenType   @default(OUTDOOR) // Indoor, Outdoor, Balcony, Rooftop, Window Sill
  status GardenStatus @default(ACTIVE)

  plantName      String?
  plantGrowStage String?

  plantStartDate DateTime?
  plantDuration  Int?

  sensors    Sensor[]
  sensorData SensorData[]

  alerts     Alert[]
  tasks      Task[]
  photos     PhotoEvaluation[]
  activities GardenActivity[]

  weatherData    WeatherObservation[]
  hourlyForecast HourlyForecast[]
  dailyForecast  DailyForecast[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  wateringSchedule WateringSchedule[]
  post             Post[]

  @@index([plantName]) // Th√™m ch·ªâ m·ª•c
  @@index([plantGrowStage]) // Th√™m ch·ªâ m·ª•c
}

enum SensorType {
  HUMIDITY // Sensor for measuring humidity
  TEMPERATURE // Sensor for measuring temperature
  LIGHT // Sensor for measuring light intensity
  WATER_LEVEL // Sensor for measuring water level
  RAINFALL // Sensor for measuring rainfall
  SOIL_MOISTURE // Sensor for measuring soil moisture
  SOIL_PH // Sensor for measuring soil pH
}

enum SensorUnit {
  PERCENT /// ph·∫ßn trƒÉm (v√≠ d·ª•: ƒë·ªô ·∫©m)
  CELSIUS /// ƒë·ªô C (nhi·ªát ƒë·ªô)
  LUX /// ƒë∆°n v·ªã chi·∫øu s√°ng
  METER /// m√©t (m·ª±c n∆∞·ªõc)
  MILLIMETER /// milim√©t (l∆∞·ª£ng m∆∞a)
  PH /// ƒë·ªô pH (ƒë·ªô chua, ƒë·ªô ki·ªÅm)
  LITER /// l√≠t (m·ª±c n∆∞·ªõc)
}

model Sensor {
  /// Identification Group
  id        Int    @id @default(autoincrement()) // Unique ID for the sensor
  sensorKey String @unique // Unique UUID for the sensor

  type SensorType
  unit SensorUnit
  name String

  gardenId   Int
  garden     Garden       @relation(fields: [gardenId], references: [id])
  sensorData SensorData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SensorData {
  // Identification Group
  id       Int    @id @default(autoincrement()) // Unique ID for the sensor data record
  sensorId Int // ID of the related Sensor
  sensor   Sensor @relation(fields: [sensorId], references: [id]) // Relation to Sensor

  // Data Details Group
  timestamp DateTime // Timestamp when the data was recorded
  value     Float // Measured value from the sensor (e.g., 65.5 for humidity)

  // Relation Group
  gardenId Int? // ID of the related Garden (optional)
  Garden   Garden? @relation(fields: [gardenId], references: [id]) // Relation to Garden (optional)

  // Timestamp Group
  createdAt DateTime @default(now()) // Timestamp when the record was created
  updatedAt DateTime @updatedAt // Timestamp when the record was last updated

  // Index for performance
  @@index([sensorId, timestamp]) // Index on sensorId and timestamp for efficient querying
}

enum TaskStatus {
  PENDING
  COMPLETED
  SKIPPED
}

model Task {
  id             Int        @id @default(autoincrement())
  gardenerId     Int
  gardener       Gardener   @relation(fields: [gardenerId], references: [userId])
  gardenId       Int
  garden         Garden     @relation(fields: [gardenId], references: [id])
  plantTypeName  String?
  plantStageName String?
  type           String
  description    String
  dueDate        DateTime
  status         TaskStatus @default(PENDING) // S·ª≠ d·ª•ng enum thay v√¨ String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  completedAt    DateTime? // Th·ªùi gian ho√†n th√†nh c√¥ng vi·ªác

  @@index([gardenerId, dueDate])
}

enum ActivityType {
  PLANTING // Planting
  WATERING // Watering
  FERTILIZING // Applying fertilizer
  PRUNING // Pruning branches
  HARVESTING // Harvesting
  PEST_CONTROL // Pest and disease control
  SOIL_TESTING // Testing soil conditions
  WEEDING // Removing weeds
  OTHER // Other unspecified activities
}

model GardenActivity {
  // Identification Group
  id         Int      @id @default(autoincrement()) // Unique ID for the activity
  gardenId   Int // ID of the related Garden
  garden     Garden   @relation(fields: [gardenId], references: [id]) // Relation to Garden
  gardenerId Int // ID of the user (gardener) who performed the activity
  gardener   Gardener @relation(fields: [gardenerId], references: [userId]) // Relation to User

  // Activity Details Group
  name         String // Name of the activity (e.g., "Watering", "Fertilizing")
  activityType ActivityType // Type of activity (using enum for standardization)
  timestamp    DateTime // Timestamp when the activity was performed

  plantName      String?
  plantGrowStage String?

  // Environmental Conditions Group
  weatherObservationId Int? // ID of the nearest WeatherObservation at the time of activity
  weatherObservation   WeatherObservation? @relation(fields: [weatherObservationId], references: [id]) // Relation to WeatherObservation

  // Sensor Data Group
  humidity       Float? // Humidity level at the time of activity in percentage (%)
  temperature    Float? // Temperature at the time of activity in Celsius (¬∞C)
  lightIntensity Float? // Light intensity at the time of activity (unit depends on sensor, e.g., lux)
  waterLevel     Float? // Water level at the time of activity (unit depends on sensor, e.g., cm)
  rainfall       Float? // Rainfall amount at the time of activity in millimeters (mm)
  soilMoisture   Float? // Soil moisture level at the time of activity in percentage (%)
  soilPH         Float? // Soil pH level at the time of activity (pH scale)

  // Activity Execution Group
  details String? // Detailed description of the activity (e.g., "Watered 10 liters")
  reason  String? // Reason for the activity (e.g., "Routine maintenance")

  // Notes and Observations Group
  notes String? // Additional notes from the gardener (e.g., "Plants look healthy")

  // Timestamp Group
  createdAt DateTime @default(now()) // Timestamp when the record was created
  updatedAt DateTime @updatedAt // Timestamp when the record was last updated

  // Relations
  wateringSchedule WateringSchedule[]
  photoEvaluations PhotoEvaluation[]
  evaluations      ActivityEvaluation[] // Relation to activity evaluations
}

enum EvaluatorType {
  USER // Evaluation performed by the gardener
  SYSTEM // Evaluation performed automatically by the system
}

model ActivityEvaluation {
  // Identification Group
  id               Int            @id @default(autoincrement()) // Unique ID for the evaluation
  gardenActivityId Int // ID of the activity being evaluated
  gardenActivity   GardenActivity @relation(fields: [gardenActivityId], references: [id]) // Relation to GardenActivity

  // Evaluator Information Group
  evaluatorType EvaluatorType // Type of evaluator (USER or SYSTEM)
  gardenerId    Int? // ID of the evaluator (if evaluatorType is USER)
  gardener      Gardener?     @relation(fields: [gardenerId], references: [userId]) // Relation to User (if applicable)

  // Sensor Data Group
  humidity       Float? // Humidity level at the time of activity in percentage (%)
  temperature    Float? // Temperature at the time of activity in Celsius (¬∞C)
  lightIntensity Float? // Light intensity at the time of activity (unit depends on sensor, e.g., lux)
  waterLevel     Float? // Water level at the time of activity (unit depends on sensor, e.g., cm)
  rainfall       Float? // Rainfall amount at the time of activity in millimeters (mm)
  soilMoisture   Float? // Soil moisture level at the time of activity in percentage (%)
  soilPH         Float? // Soil pH level at the time of activity (pH scale)

  // Evaluation Details Group
  evaluatedAt DateTime // Timestamp when the evaluation was performed
  outcome     String? // Qualitative result (e.g., "Good", "Ineffective")
  rating      Int? // Rating score (e.g., 1-5)
  metrics     Json? // Quantitative metrics (e.g., {"yield": "2 tons/ha", "growth": "10cm"})
  comments    String? // Additional comments (e.g., "Plants grew stronger after fertilizing")

  // Timestamp Group
  createdAt DateTime @default(now()) // Timestamp when the record was created
  updatedAt DateTime @updatedAt // Timestamp when the record was last updated
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model WateringSchedule {
  id Int @id @default(autoincrement())

  gardenId Int
  garden   Garden @relation(fields: [gardenId], references: [id])

  gardenActivityId Int?
  gardenActivity   GardenActivity? @relation(fields: [gardenActivityId], references: [id])

  scheduledAt DateTime // Th·ªùi gian l·ªãch t∆∞·ªõi
  amount      Float? // L∆∞·ª£ng n∆∞·ªõc ƒë·ªÅ xu·∫•t (v√≠ d·ª•: l√≠`t)

  status    String   @default("PENDING") // PENDING, COMPLETED, SKIPPED
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gardenId, scheduledAt])
}

model PhotoEvaluation {
  id     Int @id @default(autoincrement())
  taskId Int

  gardenId Int
  garden   Garden @relation(fields: [gardenId], references: [id])

  gardenerId Int
  gardener   Gardener @relation(fields: [gardenerId], references: [userId])

  gardenActivityId Int?
  gardenActivity   GardenActivity? @relation(fields: [gardenActivityId], references: [id])

  plantName      String?
  plantGrowStage String?

  photoUrl   String // URL c·ªßa ·∫£nh t·∫£i l√™n (v√≠ d·ª•: l∆∞u trong Firebase Storage)
  aiFeedback String? // Ph·∫£n h·ªìi AI (v√≠ d·ª•: "L√° b·ªã v√†ng, ki·ªÉm tra t∆∞·ªõi qu√° n∆∞·ªõc")
  confidence Float? // ƒê·ªô tin c·∫≠y c·ªßa AI (0 ƒë·∫øn 1)
  notes      String?

  evaluatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([plantName, evaluatedAt])
}

model PlantType {
  // Identification Group
  id   Int    @id
  name String @unique // PlantType name, e.g., "C√¢y c·∫£nh", "C√¢y gia v·ªã" (must be unique)]

  description String? // Short description

  // Timestamp Group
  createdAt DateTime @default(now()) // Timestamp when the record was created
  updatedAt DateTime @updatedAt // Timestamp when the record was last updated

  // Relations
  plants Plant[] // Quan h·ªá v·ªõi model Plant (c√°c c√¢y c·ª• th·ªÉ thu·ªôc ph√¢n lo·∫°i n√†y)
}

model Plant {
  // Identification Group
  id Int @id @default(autoincrement()) // Unique ID for the plant type

  PlantType   PlantType? @relation(fields: [plantTypeId], references: [id])
  plantTypeId Int?

  // Botanical Information Group
  name           String  @unique // PlantType name, e.g., "Tomato" (must be unique)
  scientificName String? // Scientific name, e.g., "Solanum lycopersicum" (optional)
  family         String? // PlantType family, e.g., "Solanaceae" (optional)

  // Description Group
  description    String? // Short description, e.g., "Likes sun, needs water" (optional)
  growthDuration Int? // Total growth time in days, e.g., 90 (optional)

  // Timestamp Group
  createdAt DateTime @default(now()) // Timestamp when the record was created
  updatedAt DateTime @updatedAt // Timestamp when the record was last updated

  // Relations
  growthStages GrowthStage[] // Relation to growth stages associated with this plant type
}

model GrowthStage {
  // Identification Group
  id Int @id @default(autoincrement()) // Unique ID for the growth stage

  plantId Int // ID of the related PlantType
  plant   Plant @relation(fields: [plantId], references: [id], onDelete: Cascade) // Relation to PlantType

  // Stage Details Group
  stageName   String // Stage name, e.g., "Seeding"
  order       Int // Stage order, e.g., 1 for "Seeding"
  duration    Int // Duration of the stage in days, e.g., 7
  description String? // Short description, e.g., "Likes sun, needs water" (optional)

  // Optimal Conditions Group
  optimalTemperatureMin  Float // Minimum ideal temperature in Celsius (¬∞C), e.g., 20
  optimalTemperatureMax  Float // Maximum ideal temperature in Celsius (¬∞C), e.g., 30
  optimalHumidityMin     Float // Minimum ideal humidity in percentage (%), e.g., 60
  optimalHumidityMax     Float // Maximum ideal humidity in percentage (%), e.g., 80
  optimalSoilMoistureMin Float // Minimum ideal soil humidity in percentage (%), e.g.
  optimalSoilMoistureMax Float // Minimum ideal soil humidity in percentage (%), e.g.
  optimalPHMin           Float // Minimum ideal soil pH, e.g., 5.5 (optional)
  optimalPHMax           Float // Maximum ideal soil pH, e.g., 6.5 (optional)
  optimalLightMin        Float // Ideal light intensity in lux
  optimalLightMax        Float // Ideal light intensity in lux

  // Care Requirements Group
  lightRequirement    String? // Light needs, e.g., "Full sun" (optional)
  waterRequirement    String? // Water needs, e.g., "Moderate" (optional)
  nutrientRequirement String? // Nutrient needs, e.g., "NPK 10-10-10" (optional)
  careInstructions    String? // Care tips, e.g., "Water twice daily" (optional)
  pestSusceptibility  String? // Pests or diseases susceptibility, e.g., "Aphids" (optional)

  // Timestamp Group
  createdAt DateTime @default(now()) // Timestamp when the record was created
  updatedAt DateTime @updatedAt // Timestamp when the record was last updated
}

enum WeatherMain {
  THUNDERSTORM // Thunderstorm weather condition
  DRIZZLE // Drizzle weather condition
  RAIN // Rain weather condition
  SNOW // Snow weather condition
  ATMOSPHERE // Atmospheric conditions (e.g., fog, mist)
  CLEAR // Clear weather condition
  CLOUDS // Cloudy weather condition
}

model WeatherObservation {
  // Identification Group
  id       Int    @id @default(autoincrement()) // Unique ID for the weather observation
  gardenId Int // ID of the related Garden
  garden   Garden @relation(fields: [gardenId], references: [id]) // Relation to Garden

  // Observation Timestamp Group
  observedAt DateTime // Time of observation in UTC

  // Temperature Group
  temp      Float // Temperature in Celsius (¬∞C)
  feelsLike Float // Feels-like temperature in Celsius (¬∞C)

  // Atmospheric Conditions Group
  pressure   Int // Atmospheric pressure at sea level in hPa
  humidity   Int // Humidity in percentage (%)
  clouds     Int // Cloudiness in percentage (%)
  visibility Int // Average visibility in meters (m)

  // Wind Group
  windSpeed Float // Wind speed in meters per second (m/s)
  windDeg   Int // Wind direction in degrees (¬∞)
  windGust  Float? // Wind gust speed in meters per second (m/s), if available

  // Precipitation Group
  rain1h Float? // Precipitation amount in the last hour in millimeters (mm), if available
  snow1h Float? // Snow amount in the last hour in millimeters (mm), if available

  // Weather Description Group
  weatherMain WeatherMain // Main weather condition (enum)
  weatherDesc String // Description of weather condition
  iconCode    String // Weather icon code

  // Relations
  GardenActivity GardenActivity[] // Relation to GardenActivity (activities linked to this weather observation)

  @@unique([gardenId, observedAt], name: "gardenId_observedAt")
  @@index([gardenId, observedAt])
}

model HourlyForecast {
  // Identification Group
  id       Int    @id @default(autoincrement()) // Unique ID for the hourly forecast
  gardenId Int // ID of the related Garden
  garden   Garden @relation(fields: [gardenId], references: [id]) // Relation to Garden

  // Forecast Timestamp Group
  forecastFor  DateTime // Date and time for which the forecast is made
  forecastedAt DateTime // Date and time when the forecast was generated

  // Temperature Group
  temp      Float // Forecasted temperature in Celsius (¬∞C)
  feelsLike Float // Forecasted feels-like temperature in Celsius (¬∞C)

  // Atmospheric Conditions Group
  pressure   Int // Forecasted atmospheric pressure at sea level in hPa
  humidity   Int // Forecasted humidity in percentage (%)
  clouds     Int // Forecasted cloudiness in percentage (%)
  visibility Int // Forecasted average visibility in meters (m)
  pop        Float // Probability of precipitation (0 to 1)

  // Wind Group
  windSpeed Float // Forecasted wind speed in meters per second (m/s)
  windDeg   Int // Forecasted wind direction in degrees (¬∞)
  windGust  Float? // Forecasted wind gust speed in meters per second (m/s), if available

  // Precipitation Group
  rain1h Float? // Forecasted precipitation amount in the next hour in millimeters (mm), if available
  snow1h Float? // Forecasted snow amount in the next hour in millimeters (mm), if available

  // Weather Description Group
  weatherMain WeatherMain // Main forecasted weather condition (enum)
  weatherDesc String // Description of the forecasted weather condition
  iconCode    String // Weather icon code for the forecast

  @@unique([gardenId, forecastFor], name: "gardenId_forecastFor")
  @@index([gardenId, forecastFor])
}

model DailyForecast {
  // Identification Group
  id       Int    @id @default(autoincrement()) // Unique ID for the daily forecast
  gardenId Int // ID of the related Garden
  garden   Garden @relation(fields: [gardenId], references: [id]) // Relation to Garden

  // Forecast Timestamp Group
  forecastFor  DateTime // Date for which the forecast is made
  forecastedAt DateTime // Date and time when the forecast was generated

  // Temperature Group
  tempDay      Float // Forecasted daytime temperature in Celsius (¬∞C)
  tempMin      Float // Forecasted minimum temperature in Celsius (¬∞C)
  tempMax      Float // Forecasted maximum temperature in Celsius (¬∞C)
  tempNight    Float // Forecasted nighttime temperature in Celsius (¬∞C)
  feelsLikeDay Float // Forecasted daytime feels-like temperature in Celsius (¬∞C)

  // Atmospheric Conditions Group
  pressure Int // Forecasted atmospheric pressure at sea level in hPa
  humidity Int // Forecasted humidity in percentage (%)
  clouds   Int // Forecasted cloudiness in percentage (%)
  pop      Float // Probability of precipitation (0 to 1)

  // Wind Group
  windSpeed Float // Forecasted wind speed in meters per second (m/s)
  windDeg   Int // Forecasted wind direction in degrees (¬∞)
  windGust  Float? // Forecasted wind gust speed in meters per second (m/s), if available

  // Precipitation Group
  rain Float? // Forecasted daily precipitation amount in millimeters (mm), if available
  snow Float? // Forecasted daily snow amount in millimeters (mm), if available

  // Weather Description Group
  weatherMain WeatherMain // Main forecasted weather condition (enum)
  weatherDesc String // Description of the forecasted weather condition
  iconCode    String // Weather icon code for the forecast

  @@unique([gardenId, forecastFor], name: "gardenId_forecastFor")
  @@index([gardenId, forecastFor])
}

// Store information about different administrative regions
model AdministrativeRegions {
  id           Int         @id // Unique ID for the region (1 to 8, from North to South)
  name         String // Region name in Vietnamese (e.g., "ƒê√¥ng B·∫Øc B·ªô")
  name_en      String // Region name in English (e.g., "Northeast")
  code_name    String // Code derived from Vietnamese name (e.g., "dong_bac_bo")
  code_name_en String // Code derived from English name (e.g., "northeast")
  provinces    Provinces[] // List of provinces in this region
}

// Store information about different Administrative Units
model AdministrativeUnits {
  id            Int         @id // Unique ID for the unit (1 to 10, from largest to smallest tier)
  full_name     String // Full name in Vietnamese (e.g., "Th√†nh ph·ªë tr·ª±c thu·ªôc trung ∆∞∆°ng")
  full_name_en  String // Full name in English (e.g., "Municipality")
  short_name    String // Short name in Vietnamese (e.g., "Th√†nh ph·ªë")
  short_name_en String // Short name in English (e.g., "City")
  code_name     String // Code derived from Vietnamese full name (e.g., "thanh_pho_truc_thuoc_trung_uong")
  code_name_en  String // Code derived from English full name (e.g., "municipality")
  provinces     Provinces[] // List of provinces with this unit type
  districts     Districts[] // List of districts with this unit type
  wards         Wards[] // List of wards with this unit type
}

// Store information about different provinces
// t·ªânh/th√†nh ph·ªë tr·ª±c thu·ªôc trung ∆∞∆°ng
model Provinces {
  code                     String                @id // Official code from government (e.g., "01" for Hanoi)
  name                     String // Name in Vietnamese (e.g., "H√† N·ªôi")
  name_en                  String // Name in English (e.g., "Ha Noi")
  full_name                String // Full name in Vietnamese (e.g., "Th√†nh ph·ªë H√† N·ªôi")
  full_name_en             String // Full name in English (e.g., "Ha Noi City")
  code_name                String // Code derived from name (e.g., "ha_noi")
  administrative_unit_id   Int // ID of the administrative unit type (e.g., 1 for Municipality)
  administrative_unit      AdministrativeUnits   @relation(fields: [administrative_unit_id], references: [id]) // Link to unit type
  administrative_region_id Int // ID of the geographical region (e.g., 3 for Red River Delta)
  administrative_region    AdministrativeRegions @relation(fields: [administrative_region_id], references: [id]) // Link to region
  districts                Districts[] // List of districts in this province
}

// Store information about different districts
// huy·ªán/qu·∫≠n/th·ªã x√£/th√†nh ph·ªë thu·ªôc t·ªânh
model Districts {
  code                   String              @id // Official code from government (e.g., "001" for Ba Dinh)
  name                   String // Name in Vietnamese (e.g., "Ba ƒê√¨nh")
  name_en                String // Name in English (e.g., "Ba Dinh")
  full_name              String // Full name in Vietnamese (e.g., "Qu·∫≠n Ba ƒê√¨nh")
  full_name_en           String // Full name in English (e.g., "Ba Dinh District")
  code_name              String // Code derived from name (e.g., "ba_dinh")
  province_code          String // Code of the province it belongs to (e.g., "01" for Hanoi)
  province               Provinces           @relation(fields: [province_code], references: [code]) // Link to province
  administrative_unit_id Int // ID of the administrative unit type (e.g., 5 for Urban District)
  administrative_unit    AdministrativeUnits @relation(fields: [administrative_unit_id], references: [id]) // Link to unit type
  wards                  Wards[] // List of wards in this district
}

// Store information about different wards
// x√£/ph∆∞·ªùng/th·ªã tr·∫•n
model Wards {
  code                   String              @id // Official code from government (e.g., "25942" for Di An)
  name                   String // Name in Vietnamese (e.g., "Dƒ© An")
  name_en                String // Name in English (e.g., "Di An")
  full_name              String // Full name in Vietnamese (e.g., "Ph∆∞·ªùng Dƒ© An")
  full_name_en           String // Full name in English (e.g., "Di An Ward")
  code_name              String // Code derived from name (e.g., "di_an")
  district_code          String // Code of the district it belongs to (e.g., "724" for Di An)
  district               Districts           @relation(fields: [district_code], references: [code]) // Link to district
  administrative_unit_id Int // ID of the administrative unit type (e.g., 8 for Ward)
  administrative_unit    AdministrativeUnits @relation(fields: [administrative_unit_id], references: [id]) // Link to unit type

  latitude  Float? // latitude
  longitude Float? // longitude

  isNoResult Boolean @default(false) // Whether the ward is no result
}

// Enum for the type of alert
enum AlertType {
  WEATHER // Weather-related alerts (e.g., storms, heavy rain)
  SENSOR_ERROR // Sensor malfunctions (e.g., failure, disconnection)
  SYSTEM // System issues (e.g., power outage, software errors)
  PLANT_CONDITION // Plant health issues (e.g., pests, water deficiency)
  ACTIVITY // Activity-related issues (e.g., overwatering, wrong fertilizing)
  MAINTENANCE // Maintenance reminders (e.g., sensor or equipment check)
  SECURITY // Security concerns (e.g., intrusion, anomalies)
  OTHER // Miscellaneous alerts not covered by other types
}

enum AlertStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  IGNORED
  ESCALATED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Alert {
  id Int @id @default(autoincrement())

  // gardenId c√≥ th·ªÉ null, quan h·ªá garden c≈©ng optional
  gardenId Int?
  garden   Garden? @relation(fields: [gardenId], references: [id], onDelete: Cascade)

  // Li√™n k·∫øt t·ªõi gardener (v·∫´n b·∫Øt bu·ªôc)
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Chi ti·∫øt alert
  type       AlertType
  message    String
  suggestion String?

  // Tr·∫°ng th√°i v√† m·ª©c ƒë·ªô ∆∞u ti√™n
  status   AlertStatus @default(PENDING)
  severity Severity    @default(LOW)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gardenId])
  @@index([status])
}

// Social network accounts linked to users
// M√¥ h√¨nh b√†i vi·∫øt
model Post {
  id Int @id @default(autoincrement())

  gardenerId Int
  gardener   Gardener @relation(fields: [gardenerId], references: [userId])

  gardenId Int?
  garden   Garden? @relation(fields: [gardenId], references: [id])

  plantName      String?
  plantGrowStage String?

  title   String
  content String

  total_vote Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags     PostTag[]
  comments Comment[]
  images   PostImage[]
  votes    Vote[]

  @@index([createdAt])
  @@index([total_vote])
  @@index([gardenerId])
  @@index([title])
}

// M√¥ h√¨nh b√¨nh lu·∫≠n
model Comment {
  id         Int       @id @default(autoincrement())
  postId     Int
  post       Post      @relation(fields: [postId], references: [id])
  parentId   Int?
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  gardenerId Int
  gardener   Gardener  @relation(fields: [gardenerId], references: [userId])
  content    String
  score      Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  replies    Comment[] @relation("CommentReplies")
  votes      Vote[]

  @@index([createdAt])
  @@index([score])
  @@index([postId])
  @@index([parentId])
}

// M√¥ h√¨nh th·∫ª ph√¢n lo·∫°i
model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[]
}

// M√¥ h√¨nh n·ªëi b√†i vi·∫øt v√† th·∫ª
model PostTag {
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

enum VoteTargetType {
  POST
  COMMENT
}

// M√¥ h√¨nh phi·∫øu b·∫ßu
model Vote {
  id         Int            @id @default(autoincrement())
  gardenerId Int
  gardener   Gardener       @relation(fields: [gardenerId], references: [userId])
  targetType VoteTargetType
  targetId   Int
  voteValue  Int // 1 cho phi·∫øu l√™n, -1 cho phi·∫øu xu·ªëng
  createdAt  DateTime       @default(now())
  post       Post?          @relation(fields: [targetId], references: [id], map: "Vote_Post_targetId_fkey")
  comment    Comment?       @relation(fields: [targetId], references: [id], map: "Vote_Comment_targetId_fkey")

  @@unique([gardenerId, targetType, targetId])
  @@index([targetType, targetId])
}

// M√¥ h√¨nh h√¨nh ·∫£nh b√†i vi·∫øt
model PostImage {
  id     Int    @id @default(autoincrement())
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
  url    String
}

// M√¥ h√¨nh theo d√µi
model Follow {
  followerId Int
  followedId Int
  follower   Gardener @relation("Follower", fields: [followerId], references: [userId])
  followed   Gardener @relation("Followed", fields: [followedId], references: [userId])
  createdAt  DateTime @default(now())

  @@id([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}

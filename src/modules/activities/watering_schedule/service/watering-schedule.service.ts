import { Injectable, ForbiddenException, NotFoundException, Logger, BadRequestException } from '@nestjs/common';
import { subDays, addDays, startOfDay, endOfDay, addHours, isBefore, isAfter } from 'date-fns';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateWateringScheduleDto } from '../dto/watering-schedule.dto';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';

interface AIWateringRecommendation {
  shouldSchedule: boolean;
  optimalTimes: Date[];
  recommendedAmount: number;
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  reasons: string[];
  confidence: number;
}

interface WeatherAnalysis {
  hasRainForecast: boolean;
  avgTemperature: number;
  avgHumidity: number;
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';
  recommendation: string;
}

@Injectable()
export class WateringScheduleService {
  private readonly logger = new Logger(WateringScheduleService.name);
  private readonly aiServiceUrl: string;

  constructor(
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService,
  ) {
    this.aiServiceUrl = this.configService.get<string>('SMART_WATERING_AI_URL', 'http://smart-watering-ai:5001');
    this.logger.log(`ü§ñ Smart Watering AI service configured at: ${this.aiServiceUrl}`);
  }

  async getAll(userId: number, query: any) {
    const gardener = await this.getGardener(userId);
    return this.prisma.wateringSchedule.findMany({
      where: {
        garden: { gardenerId: gardener.userId },
        status: query.status,
        scheduledAt: this.buildDateRange(query.startDate, query.endDate),
      },
      orderBy: { scheduledAt: 'asc' },
    });
  }

  async getById(userId: number, id: number) {
    const schedule = await this.findScheduleOrFail(id);
    await this.ensureOwnership(schedule.gardenId, userId);
    return schedule;
  }

  async complete(userId: number, id: number) {
    await this.ensureOwnershipBySchedule(id, userId);
    return this.prisma.wateringSchedule.update({
      where: { id },
      data: { status: 'COMPLETED' },
    });
  }

  async skip(userId: number, id: number) {
    await this.ensureOwnershipBySchedule(id, userId);
    return this.prisma.wateringSchedule.update({
      where: { id },
      data: { status: 'SKIPPED' },
    });
  }

  async delete(userId: number, id: number) {
    await this.ensureOwnershipBySchedule(id, userId);
    return this.prisma.wateringSchedule.delete({ where: { id } });
  }

  async getByGarden(userId: number, gardenId: number, query: any) {
    await this.ensureOwnership(gardenId, userId);
    return this.prisma.wateringSchedule.findMany({
      where: {
        gardenId,
        status: query.status,
        scheduledAt: this.buildDateRange(query.startDate, query.endDate),
      },
      orderBy: { scheduledAt: 'asc' },
    });
  }

  async create(userId: number, gardenId: number, dto: CreateWateringScheduleDto) {
    await this.ensureOwnership(gardenId, userId);
    return this.prisma.wateringSchedule.create({
      data: {
        gardenId,
        scheduledAt: new Date(dto.scheduledAt),
        amount: dto.amount,
      },
    });
  }

  /**
   * T·∫°o l·ªãch t∆∞·ªõi t·ª± ƒë·ªông th√¥ng minh v·ªõi AI
   * Ph√¢n t√≠ch ƒëa y·∫øu t·ªë: c·∫£m bi·∫øn, th·ªùi ti·∫øt, giai ƒëo·∫°n c√¢y tr·ªìng
   */
  async autoGenerate(userId: number, gardenId: number): Promise<any> {
    try {
      this.logger.log(`üå± Starting AI-powered auto schedule generation for garden ${gardenId}`);
      
      await this.ensureOwnership(gardenId, userId);

      // 1. L·∫•y th√¥ng tin v∆∞·ªùn v√† c√¢y tr·ªìng
      const garden = await this.getGardenWithDetails(gardenId);
      
      // 2. Ph√¢n t√≠ch d·ªØ li·ªáu c·∫£m bi·∫øn hi·ªán t·∫°i
      const sensorAnalysis = await this.analyzeSensorData(gardenId);
      
      // 3. Ph√¢n t√≠ch d·ª± b√°o th·ªùi ti·∫øt
      const weatherAnalysis = await this.analyzeWeatherForecast(gardenId);
      
      // 4. G·ªçi AI ƒë·ªÉ ƒë√°nh gi√° v√† ƒë·ªÅ xu·∫•t
      const aiRecommendation = await this.getAIWateringRecommendation(
        sensorAnalysis, 
        weatherAnalysis, 
        garden
      );

      // 5. T·∫°o l·ªãch t∆∞·ªõi t·ªëi ∆∞u
      const schedules = await this.createOptimalSchedules(
        gardenId, 
        garden, 
        aiRecommendation, 
        weatherAnalysis
      );

      // 6. T·∫°o activity log cho vi·ªác t·∫°o l·ªãch t·ª± ƒë·ªông
      await this.createAutoScheduleActivity(userId, garden, aiRecommendation, weatherAnalysis, schedules);

      this.logger.log(`‚úÖ AI auto-schedule completed: ${schedules.length} schedules created`);

      return {
        success: true,
        schedulesCreated: schedules.length,
        schedules: schedules,
        aiAnalysis: {
          recommendation: aiRecommendation,
          weatherAnalysis: weatherAnalysis,
          sensorAnalysis: sensorAnalysis,
        },
        summary: this.generateScheduleSummary(schedules, aiRecommendation),
      };
    } catch (error) {
      this.logger.error(`‚ùå Error in AI auto-schedule generation: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa v∆∞·ªùn
   */
  private async getGardenWithDetails(gardenId: number): Promise<any> {
    const garden = await this.prisma.garden.findUnique({
      where: { id: gardenId },
      include: { 
        sensors: true,
        dailyForecast: {
          where: {
            forecastFor: {
              gte: new Date(),
              lte: addDays(new Date(), 7),
            },
          },
          orderBy: { forecastFor: 'asc' },
          take: 7,
        },
      },
    });

    if (!garden) {
      throw new NotFoundException('Garden not found');
    }

    return garden;
  }

  /**
   * Ph√¢n t√≠ch d·ªØ li·ªáu c·∫£m bi·∫øn hi·ªán t·∫°i v√† xu h∆∞·ªõng
   */
  private async analyzeSensorData(gardenId: number): Promise<any> {
    const yesterday = subDays(new Date(), 1);
    
    // L·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn 24h g·∫ßn nh·∫•t
    const recentSensorData = await this.prisma.sensorData.findMany({
      where: {
        sensor: { gardenId },
        timestamp: { gte: yesterday },
      },
      include: { sensor: true },
      orderBy: { timestamp: 'desc' },
      take: 100,
    });

    if (recentSensorData.length === 0) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn g·∫ßn ƒë√¢y');
    }

    // Ph√¢n t√≠ch theo lo·∫°i sensor
    const sensorMap = new Map();
    const trends = new Map();

    recentSensorData.forEach(data => {
      const sensorType = data.sensor.type;
      if (!sensorMap.has(sensorType)) {
        sensorMap.set(sensorType, []);
      }
      sensorMap.get(sensorType).push({
        value: data.value,
        timestamp: data.timestamp,
      });
    });

    // T√≠nh to√°n xu h∆∞·ªõng v√† gi√° tr·ªã hi·ªán t·∫°i
    const analysis = {};
    sensorMap.forEach((values, sensorType) => {
      const latest = values[0];
      const average = values.reduce((sum, item) => sum + item.value, 0) / values.length;
      const trend = values.length > 1 ? (latest.value - values[values.length - 1].value) : 0;
      
      analysis[sensorType] = {
        current: latest.value,
        average: average,
        trend: trend > 0 ? 'increasing' : trend < 0 ? 'decreasing' : 'stable',
        trendValue: trend,
        lastUpdate: latest.timestamp,
      };
    });

    this.logger.log(`üìä Sensor analysis completed: ${Object.keys(analysis).length} sensor types analyzed`);
    return analysis;
  }

  /**
   * Ph√¢n t√≠ch d·ª± b√°o th·ªùi ti·∫øt 7 ng√†y t·ªõi
   */
  private async analyzeWeatherForecast(gardenId: number): Promise<WeatherAnalysis> {
    const sevenDaysLater = addDays(new Date(), 7);
    
    const forecasts = await this.prisma.dailyForecast.findMany({
      where: {
        gardenId,
        forecastFor: {
          gte: new Date(),
          lte: sevenDaysLater,
        },
      },
      orderBy: { forecastFor: 'asc' },
    });

    if (forecasts.length === 0) {
      this.logger.warn('‚ö†Ô∏è No weather forecast data available, using default assumptions');
      return {
        hasRainForecast: false,
        avgTemperature: 25,
        avgHumidity: 70,
        riskLevel: 'MEDIUM',
        recommendation: 'Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt, s·ª≠ d·ª•ng l·ªãch t∆∞·ªõi c∆° b·∫£n',
      };
    }

    const totalRain = forecasts.reduce((sum, f) => sum + (f.rain || 0), 0);
    const avgTemp = forecasts.reduce((sum, f) => sum + f.tempDay, 0) / forecasts.length;
    const avgHumidity = forecasts.reduce((sum, f) => sum + f.humidity, 0) / forecasts.length;
    
    const hasRainForecast = totalRain > 5; // Tr√™n 5mm ƒë∆∞·ª£c coi l√† c√≥ m∆∞a ƒë√°ng k·ªÉ
    const isHotWeek = avgTemp > 30;
    const isHighHumidity = avgHumidity > 80;

    let riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' = 'MEDIUM';
    let recommendation = '';

    if (hasRainForecast && isHighHumidity) {
      riskLevel = 'LOW';
      recommendation = 'C√≥ m∆∞a v√† ƒë·ªô ·∫©m cao, gi·∫£m t·∫ßn su·∫•t t∆∞·ªõi';
    } else if (isHotWeek && !hasRainForecast) {
      riskLevel = 'HIGH';
      recommendation = 'Th·ªùi ti·∫øt n√≥ng kh√¥, tƒÉng t·∫ßn su·∫•t t∆∞·ªõi n∆∞·ªõc';
    } else {
      recommendation = 'Th·ªùi ti·∫øt ·ªïn ƒë·ªãnh, duy tr√¨ l·ªãch t∆∞·ªõi b√¨nh th∆∞·ªùng';
    }

    this.logger.log(`üå§Ô∏è Weather analysis: ${hasRainForecast ? 'Rain expected' : 'No rain'}, Avg temp: ${avgTemp.toFixed(1)}¬∞C, Risk: ${riskLevel}`);

    return {
      hasRainForecast,
      avgTemperature: avgTemp,
      avgHumidity,
      riskLevel,
      recommendation,
    };
  }

  /**
   * G·ªçi AI ƒë·ªÉ ƒë√°nh gi√° v√† ƒë·ªÅ xu·∫•t l·ªãch t∆∞·ªõi
   */
  private async getAIWateringRecommendation(
    sensorAnalysis: any,
    weatherAnalysis: WeatherAnalysis,
    garden: any
  ): Promise<AIWateringRecommendation> {
    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu cho AI
      const aiInput = {
        sensor_data: {
          soil_moisture: sensorAnalysis.SOIL_MOISTURE?.current || 50,
          temperature: sensorAnalysis.TEMPERATURE?.current || 25,
          humidity: sensorAnalysis.HUMIDITY?.current || 70,
          light_intensity: sensorAnalysis.LIGHT?.current || 10000,
          water_level: sensorAnalysis.WATER_LEVEL?.current || 80,
        },
        weather_forecast: {
          has_rain: weatherAnalysis.hasRainForecast,
          avg_temperature: weatherAnalysis.avgTemperature,
          avg_humidity: weatherAnalysis.avgHumidity,
          risk_level: weatherAnalysis.riskLevel,
        },
        plant_info: {
          plant_name: garden.plantName || 'Unknown',
          plant_stage: garden.plantGrowStage || 'Unknown',
          days_since_planting: garden.plantStartDate 
            ? Math.floor((new Date().getTime() - new Date(garden.plantStartDate).getTime()) / (1000 * 60 * 60 * 24))
            : 30,
        },
        request_type: 'schedule_recommendation',
      };

      this.logger.log(`ü§ñ Calling AI for schedule recommendation`);

      const response = await axios.post(`${this.aiServiceUrl}/watering/schedule`, aiInput, {
        timeout: 15000,
        headers: { 'Content-Type': 'application/json' },
      });

      if (response.data?.success) {
        const aiData = response.data;
        
        // T·∫°o c√°c th·ªùi ƒëi·ªÉm t∆∞·ªõi t·ªëi ∆∞u (t·ª´ AI ho·∫∑c logic m·∫∑c ƒë·ªãnh)
        const optimalTimes = this.generateOptimalTimes(aiData, weatherAnalysis);
        
        return {
          shouldSchedule: aiData.should_schedule || true,
          optimalTimes,
          recommendedAmount: aiData.recommended_amount || this.calculateDefaultAmount(sensorAnalysis),
          priority: this.determinePriority(sensorAnalysis, weatherAnalysis),
          reasons: aiData.reasons || this.generateDefaultReasons(sensorAnalysis, weatherAnalysis),
          confidence: aiData.confidence || 0.75,
        };
      } else {
        throw new Error('AI service returned unsuccessful response');
      }
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è AI service unavailable, falling back to rule-based recommendation: ${error.message}`);
      return this.getFallbackRecommendation(sensorAnalysis, weatherAnalysis, garden);
    }
  }

  /**
   * T·∫°o c√°c th·ªùi ƒëi·ªÉm t∆∞·ªõi t·ªëi ∆∞u
   */
  private generateOptimalTimes(aiData: any, weatherAnalysis: WeatherAnalysis): Date[] {
    const times: Date[] = [];
    const now = new Date();
    
    // AI c√≥ th·ªÉ ƒë·ªÅ xu·∫•t c√°c th·ªùi ƒëi·ªÉm c·ª• th·ªÉ, n·∫øu kh√¥ng th√¨ d√πng logic m·∫∑c ƒë·ªãnh
    const suggestedHours = aiData.optimal_hours || [6, 18]; // S√°ng s·ªõm v√† chi·ªÅu t·ªëi
    const daysToSchedule = weatherAnalysis.hasRainForecast ? 3 : 7; // √çt h∆°n n·∫øu c√≥ m∆∞a

    for (let day = 1; day <= daysToSchedule; day++) {
      const targetDate = addDays(now, day);
      
      // B·ªè qua ng√†y c√≥ m∆∞a l·ªõn
      if (day <= 3 && weatherAnalysis.hasRainForecast && Math.random() > 0.3) {
        continue;
      }
      
      suggestedHours.forEach(hour => {
        const wateringTime = new Date(targetDate);
        wateringTime.setHours(hour, 0, 0, 0);
        times.push(wateringTime);
      });
    }

    return times.slice(0, 10); // Gi·ªõi h·∫°n t·ªëi ƒëa 10 l·ªãch
  }

  /**
   * T·∫°o l·ªãch t∆∞·ªõi t·ªëi ∆∞u d·ª±a tr√™n ƒë·ªÅ xu·∫•t AI
   */
  private async createOptimalSchedules(
    gardenId: number,
    garden: any,
    recommendation: AIWateringRecommendation,
    weatherAnalysis: WeatherAnalysis
  ): Promise<any[]> {
    if (!recommendation.shouldSchedule) {
      this.logger.log('üõë AI recommends no watering schedule needed');
      return [];
    }

    const schedules: any[] = [];
    
    for (const optimalTime of recommendation.optimalTimes) {
      try {
        // Ki·ªÉm tra xem ƒë√£ c√≥ l·ªãch t∆∞·ªõi n√†o trong kho·∫£ng th·ªùi gian g·∫ßn ƒë√≥ ch∆∞a
        const existingSchedule = await this.prisma.wateringSchedule.findFirst({
          where: {
            gardenId,
            scheduledAt: {
              gte: subDays(optimalTime, 1),
              lte: addDays(optimalTime, 1),
            },
            status: { in: ['PENDING', 'COMPLETED'] },
          },
        });

        if (existingSchedule) {
          this.logger.log(`‚è≠Ô∏è Skipping ${optimalTime.toISOString()}, existing schedule found`);
          continue;
        }

        const schedule = await this.prisma.wateringSchedule.create({
          data: {
            gardenId,
            scheduledAt: optimalTime,
            amount: recommendation.recommendedAmount,
            reason: this.generateScheduleReason(recommendation, weatherAnalysis, optimalTime),
            notes: `L·ªãch t·ª± ƒë·ªông AI - ${garden.plantName || 'C√¢y tr·ªìng'} (${garden.plantGrowStage || 'Giai ƒëo·∫°n ph√°t tri·ªÉn'})`,
            status: 'PENDING',
          },
        });

        schedules.push(schedule);
        this.logger.log(`üìÖ Schedule created: ${optimalTime.toLocaleString('vi-VN')} - ${recommendation.recommendedAmount}L`);
      } catch (error) {
        this.logger.error(`Error creating schedule for ${optimalTime}: ${error.message}`);
      }
    }

    return schedules;
  }

  /**
   * T·∫°o l√Ω do cho l·ªãch t∆∞·ªõi
   */
  private generateScheduleReason(
    recommendation: AIWateringRecommendation,
    weatherAnalysis: WeatherAnalysis,
    scheduledTime: Date
  ): string {
    const timeStr = scheduledTime.toLocaleString('vi-VN');
    const reasons = recommendation.reasons.join(', ');
    return `AI ƒë·ªÅ xu·∫•t (${(recommendation.confidence * 100).toFixed(0)}% tin c·∫≠y): ${reasons}. Th·ªùi ti·∫øt: ${weatherAnalysis.recommendation}`;
  }

  /**
   * T√≠nh to√°n l∆∞·ª£ng n∆∞·ªõc m·∫∑c ƒë·ªãnh
   */
  private calculateDefaultAmount(sensorAnalysis: any): number {
    const soilMoisture = sensorAnalysis.SOIL_MOISTURE?.current || 50;
    const temperature = sensorAnalysis.TEMPERATURE?.current || 25;
    
    let baseAmount = 2.0; // L∆∞·ª£ng n∆∞·ªõc c∆° b·∫£n (l√≠t)
    
    // ƒêi·ªÅu ch·ªânh d·ª±a tr√™n ƒë·ªô ·∫©m ƒë·∫•t
    if (soilMoisture < 30) {
      baseAmount += 1.5; // ƒê·∫•t kh√¥, c·∫ßn nhi·ªÅu n∆∞·ªõc h∆°n
    } else if (soilMoisture < 50) {
      baseAmount += 0.5; // ƒê·∫•t h∆°i kh√¥
    }
    
    // ƒêi·ªÅu ch·ªânh d·ª±a tr√™n nhi·ªát ƒë·ªô
    if (temperature > 30) {
      baseAmount += 1.0; // Th·ªùi ti·∫øt n√≥ng, c·∫ßn nhi·ªÅu n∆∞·ªõc
    } else if (temperature > 25) {
      baseAmount += 0.5; // Th·ªùi ti·∫øt ·∫•m
    }
    
    return Math.min(baseAmount, 5.0); // Gi·ªõi h·∫°n t·ªëi ƒëa 5 l√≠t
  }

  /**
   * X√°c ƒë·ªãnh m·ª©c ƒë·ªô ∆∞u ti√™n
   */
  private determinePriority(sensorAnalysis: any, weatherAnalysis: WeatherAnalysis): 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT' {
    const soilMoisture = sensorAnalysis.SOIL_MOISTURE?.current || 50;
    const temperature = sensorAnalysis.TEMPERATURE?.current || 25;
    
    if (soilMoisture < 20 && temperature > 30) {
      return 'URGENT'; // ƒê·∫•t r·∫•t kh√¥ v√† th·ªùi ti·∫øt n√≥ng
    } else if (soilMoisture < 30) {
      return 'HIGH'; // ƒê·∫•t kh√¥
    } else if (soilMoisture < 50 || weatherAnalysis.riskLevel === 'HIGH') {
      return 'MEDIUM'; // ƒê·∫•t h∆°i kh√¥ ho·∫∑c th·ªùi ti·∫øt c√≥ nguy c∆°
    } else {
      return 'LOW'; // ƒêi·ªÅu ki·ªán b√¨nh th∆∞·ªùng
    }
  }

  /**
   * T·∫°o l√Ω do m·∫∑c ƒë·ªãnh
   */
  private generateDefaultReasons(sensorAnalysis: any, weatherAnalysis: WeatherAnalysis): string[] {
    const reasons: string[] = [];
    const soilMoisture = sensorAnalysis.SOIL_MOISTURE?.current || 50;
    const temperature = sensorAnalysis.TEMPERATURE?.current || 25;
    
    if (soilMoisture < 40) {
      reasons.push(`ƒê·ªô ·∫©m ƒë·∫•t th·∫•p (${soilMoisture.toFixed(1)}%)`);
    }
    
    if (temperature > 28) {
      reasons.push(`Nhi·ªát ƒë·ªô cao (${temperature.toFixed(1)}¬∞C)`);
    }
    
    if (!weatherAnalysis.hasRainForecast) {
      reasons.push('Kh√¥ng c√≥ m∆∞a trong d·ª± b√°o');
    }
    
    if (reasons.length === 0) {
      reasons.push('Duy tr√¨ l·ªãch t∆∞·ªõi ƒë·ªãnh k·ª≥');
    }
    
    return reasons;
  }

  /**
   * ƒê·ªÅ xu·∫•t d·ª± ph√≤ng khi AI kh√¥ng kh·∫£ d·ª•ng
   */
  private getFallbackRecommendation(
    sensorAnalysis: any,
    weatherAnalysis: WeatherAnalysis,
    garden: any
  ): AIWateringRecommendation {
    const soilMoisture = sensorAnalysis.SOIL_MOISTURE?.current || 50;
    const shouldSchedule = soilMoisture < 60 && !weatherAnalysis.hasRainForecast;
    
    return {
      shouldSchedule,
      optimalTimes: shouldSchedule ? this.generateDefaultOptimalTimes(weatherAnalysis) : [],
      recommendedAmount: this.calculateDefaultAmount(sensorAnalysis),
      priority: this.determinePriority(sensorAnalysis, weatherAnalysis),
      reasons: this.generateDefaultReasons(sensorAnalysis, weatherAnalysis),
      confidence: 0.6, // ƒê·ªô tin c·∫≠y th·∫•p h∆°n cho logic d·ª± ph√≤ng
    };
  }

  /**
   * T·∫°o th·ªùi gian t·ªëi ∆∞u m·∫∑c ƒë·ªãnh
   */
  private generateDefaultOptimalTimes(weatherAnalysis: WeatherAnalysis): Date[] {
    const times: Date[] = [];
    const now = new Date();
    const daysToSchedule = weatherAnalysis.hasRainForecast ? 2 : 5;
    
    for (let day = 1; day <= daysToSchedule; day++) {
      const morningTime = addDays(now, day);
      morningTime.setHours(6, 0, 0, 0);
      
      const eveningTime = addDays(now, day);
      eveningTime.setHours(18, 0, 0, 0);
      
      times.push(morningTime, eveningTime);
    }
    
    return times;
  }

  /**
   * T·∫°o activity log cho vi·ªác t·∫°o l·ªãch t·ª± ƒë·ªông
   */
  private async createAutoScheduleActivity(
    gardenerId: number,
    garden: any,
    recommendation: AIWateringRecommendation,
    weatherAnalysis: WeatherAnalysis,
    schedules: any[]
  ): Promise<void> {
    try {
      const currentTime = new Date();
      const timeString = currentTime.toLocaleString('vi-VN', {
        timeZone: 'Asia/Ho_Chi_Minh',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });

      let activityDetails = `ü§ñ **T·∫°o l·ªãch t∆∞·ªõi t·ª± ƒë·ªông b·∫±ng AI**\n\n`;
      activityDetails += `üìÖ **Th·ªùi gian t·∫°o**: ${timeString}\n`;
      activityDetails += `üè° **V∆∞·ªùn**: ${garden.name}\n`;
      activityDetails += `üåø **Lo·∫°i c√¢y**: ${garden.plantName || 'Ch∆∞a x√°c ƒë·ªãnh'}\n`;
      activityDetails += `üå± **Giai ƒëo·∫°n ph√°t tri·ªÉn**: ${garden.plantGrowStage || 'Ch∆∞a x√°c ƒë·ªãnh'}\n\n`;
      
      activityDetails += `üìä **Ph√¢n t√≠ch AI**:\n`;
      activityDetails += `‚Ä¢ üéØ Khuy·∫øn ngh·ªã: ${recommendation.shouldSchedule ? 'C·∫ßn t·∫°o l·ªãch t∆∞·ªõi' : 'Kh√¥ng c·∫ßn t∆∞·ªõi n∆∞·ªõc'}\n`;
      activityDetails += `‚Ä¢ üìà ƒê·ªô tin c·∫≠y: ${(recommendation.confidence * 100).toFixed(1)}%\n`;
      activityDetails += `‚Ä¢ ‚ö° M·ª©c ƒë·ªô ∆∞u ti√™n: ${recommendation.priority}\n`;
      activityDetails += `‚Ä¢ üíß L∆∞·ª£ng n∆∞·ªõc ƒë·ªÅ xu·∫•t: ${recommendation.recommendedAmount}L\n\n`;

      if (recommendation.reasons.length > 0) {
        activityDetails += `üîç **L√Ω do**:\n`;
        recommendation.reasons.forEach((reason, index) => {
          activityDetails += `${index + 1}. ${reason}\n`;
        });
        activityDetails += `\n`;
      }

      activityDetails += `üå§Ô∏è **Ph√¢n t√≠ch th·ªùi ti·∫øt**:\n`;
      activityDetails += `‚Ä¢ üåßÔ∏è D·ª± b√°o m∆∞a: ${weatherAnalysis.hasRainForecast ? 'C√≥' : 'Kh√¥ng'}\n`;
      activityDetails += `‚Ä¢ üå°Ô∏è Nhi·ªát ƒë·ªô trung b√¨nh: ${weatherAnalysis.avgTemperature.toFixed(1)}¬∞C\n`;
      activityDetails += `‚Ä¢ üí® ƒê·ªô ·∫©m trung b√¨nh: ${weatherAnalysis.avgHumidity.toFixed(1)}%\n`;
      activityDetails += `‚Ä¢ ‚ö†Ô∏è M·ª©c ƒë·ªô r·ªßi ro: ${weatherAnalysis.riskLevel}\n`;
      activityDetails += `‚Ä¢ üí° Khuy·∫øn ngh·ªã: ${weatherAnalysis.recommendation}\n\n`;

      if (schedules.length > 0) {
        activityDetails += `üìã **L·ªãch t∆∞·ªõi ƒë∆∞·ª£c t·∫°o** (${schedules.length} l·ªãch):\n`;
        schedules.forEach((schedule, index) => {
          const scheduleTime = new Date(schedule.scheduledAt).toLocaleString('vi-VN');
          activityDetails += `${index + 1}. ${scheduleTime} - ${schedule.amount}L\n`;
        });
      } else {
        activityDetails += `üìã **K·∫øt qu·∫£**: Kh√¥ng t·∫°o l·ªãch t∆∞·ªõi (AI ƒë√°nh gi√° kh√¥ng c·∫ßn thi·∫øt)\n`;
      }

      activityDetails += `\nüí° **L∆∞u √Ω**: L·ªãch t∆∞·ªõi c√≥ th·ªÉ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh t·ª± ƒë·ªông d·ª±a tr√™n d·ªØ li·ªáu c·∫£m bi·∫øn v√† th·ªùi ti·∫øt th·ª±c t·∫ø`;

      const reason = `AI t·∫°o ${schedules.length} l·ªãch t∆∞·ªõi t·ª± ƒë·ªông v·ªõi ƒë·ªô tin c·∫≠y ${(recommendation.confidence * 100).toFixed(0)}%`;

      await this.prisma.gardenActivity.create({
        data: {
          gardenId: garden.id,
          gardenerId: gardenerId,
          name: `T·∫°o l·ªãch t∆∞·ªõi AI - ${schedules.length} l·ªãch`,
          activityType: 'OTHER',
          timestamp: currentTime,
          plantName: garden.plantName || 'Ch∆∞a x√°c ƒë·ªãnh',
          plantGrowStage: garden.plantGrowStage || 'Ch∆∞a x√°c ƒë·ªãnh',
          details: activityDetails,
          reason: reason,
          notes: `AI ƒë·ªÅ xu·∫•t t·∫°o ${schedules.length} l·ªãch t∆∞·ªõi d·ª±a tr√™n ph√¢n t√≠ch sensor v√† th·ªùi ti·∫øt`,
        },
      });

      this.logger.log(`üìã Auto-schedule activity log created - ${schedules.length} schedules`);
    } catch (error) {
      this.logger.error(`Failed to create auto-schedule activity log: ${error.message}`, error.stack);
    }
  }

  /**
   * T·∫°o t√≥m t·∫Øt l·ªãch t∆∞·ªõi
   */
  private generateScheduleSummary(schedules: any[], recommendation: AIWateringRecommendation): string {
    if (schedules.length === 0) {
      return 'AI ƒë√°nh gi√° kh√¥ng c·∫ßn t·∫°o l·ªãch t∆∞·ªõi trong th·ªùi gian n√†y.';
    }

    const totalAmount = schedules.reduce((sum, s) => sum + (s.amount || 0), 0);
    const firstSchedule = new Date(schedules[0].scheduledAt).toLocaleDateString('vi-VN');
    const lastSchedule = new Date(schedules[schedules.length - 1].scheduledAt).toLocaleDateString('vi-VN');

    return `ƒê√£ t·∫°o ${schedules.length} l·ªãch t∆∞·ªõi t·ª´ ${firstSchedule} ƒë·∫øn ${lastSchedule}. ` +
           `T·ªïng l∆∞·ª£ng n∆∞·ªõc: ${totalAmount.toFixed(1)}L. ` +
           `M·ª©c ƒë·ªô ∆∞u ti√™n: ${recommendation.priority}. ` +
           `ƒê·ªô tin c·∫≠y AI: ${(recommendation.confidence * 100).toFixed(0)}%.`;
  }

  private async ensureOwnership(gardenId: number, userId: number) {
    const garden = await this.prisma.garden.findUnique({ where: { id: gardenId } });
    if (!garden || garden.gardenerId !== userId) {
      throw new ForbiddenException('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p garden n√†y');
    }
  }

  private async ensureOwnershipBySchedule(scheduleId: number, userId: number) {
    const schedule = await this.findScheduleOrFail(scheduleId);
    await this.ensureOwnership(schedule.gardenId, userId);
  }

  private async findScheduleOrFail(id: number) {
    const schedule = await this.prisma.wateringSchedule.findUnique({ where: { id } });
    if (!schedule) throw new NotFoundException('L·ªãch t∆∞·ªõi kh√¥ng t·ªìn t·∫°i');
    return schedule;
  }

  private buildDateRange(startDate?: string, endDate?: string) {
    if (!startDate && !endDate) return undefined;
    const range: any = {};
    if (startDate) range.gte = startOfDay(new Date(startDate));
    if (endDate) range.lte = endOfDay(new Date(endDate));
    return range;
  }

  private async getGardener(userId: number) {
    const gardener = await this.prisma.gardener.findUnique({ where: { userId } });
    if (!gardener) throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi l√†m v∆∞·ªùn');
    return gardener;
  }
}

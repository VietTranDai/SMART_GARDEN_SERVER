import { Injectable, NotFoundException, ForbiddenException, InternalServerErrorException, BadRequestException, Logger } from '@nestjs/common';
import { PrismaService } from '../../../../prisma/prisma.service';
import axios from 'axios';
import { WateringDecisionDto, WateringStatsDto, CreateWateringDecisionDto, SensorDataForRequestModelAIDto, WateringDecisionRequestDto } from '../dto/watering-decision-model.dto';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class WateringDecisionModelService {
  private readonly logger = new Logger(WateringDecisionModelService.name);
  private readonly aiServiceUrl: string;

  constructor(
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService,
  ) {
    this.aiServiceUrl = this.configService.get<string>('SMART_WATERING_AI_URL', 'http://smart-watering-ai:5001');
    this.logger.log(`ü§ñ Smart Watering AI service configured at: ${this.aiServiceUrl}`);
  }

  /**
   * Ph∆∞∆°ng th·ª©c g·ªôp ƒë·ªÉ l·∫•y quy·∫øt ƒë·ªãnh t∆∞·ªõi n∆∞·ªõc v·ªõi th·ªùi gian t√πy ch·ªçn
   * D·ªØ li·ªáu sensor lu√¥n ƒë∆∞·ª£c l·∫•y t·ª´ database
   */
  async getWateringDecision(
    userId: number, 
    gardenId: number, 
    requestDto: WateringDecisionRequestDto = {}
  ): Promise<WateringDecisionDto> {
    try {
      this.logger.log(`üå± Processing watering decision for garden ${gardenId} by user ${userId}`);

      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p v∆∞·ªùn
      const garden = await this.ensureGardenOwnership(gardenId, userId);

      // X·ª≠ l√Ω th·ªùi gian t∆∞·ªõi n∆∞·ªõc
      const wateringTime = requestDto.wateringTime ? new Date(requestDto.wateringTime) : new Date();
      
      // Validate th·ªùi gian kh√¥ng qu√° xa trong t∆∞∆°ng lai (max 7 ng√†y)
      const maxFutureTime = new Date();
      maxFutureTime.setDate(maxFutureTime.getDate() + 7);
      
      if (wateringTime > maxFutureTime) {
        throw new BadRequestException('Th·ªùi gian t∆∞·ªõi n∆∞·ªõc kh√¥ng ƒë∆∞·ª£c qu√° 7 ng√†y trong t∆∞∆°ng lai');
      }

      this.logger.log(`‚è∞ Watering time: ${wateringTime.toLocaleString('vi-VN')}`);

      // L·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn m·ªõi nh·∫•t t·ª´ database
      const sensorData = await this.getLatestSensorData(gardenId);

      this.logger.log(`üìä Sensor data retrieved: Soil ${sensorData.soil_moisture}%, Temp ${sensorData.temperature}¬∞C, Humidity ${sensorData.air_humidity}%`);

      // G·ªçi AI model v·ªõi d·ªØ li·ªáu sensor v√† th·ªùi gian
      const decision = await this.callAIModel(sensorData, wateringTime);

      // T·∫°o log ho·∫°t ƒë·ªông
      await this.createWateringDecisionActivity(userId, garden, sensorData, decision, requestDto.notes);

      const result = {
        ...decision,
        sensor_data: {
          soil_moisture: sensorData.soil_moisture,
          air_humidity: sensorData.air_humidity,
          temperature: sensorData.temperature,
          light_intensity: sensorData.light_intensity,
          water_level: sensorData.water_level,
        },
        timestamp: new Date(),
      };

      this.logger.log(`‚úÖ Watering decision completed: ${result.decision} (confidence: ${result.confidence}%)`);

      return result;
    } catch (error) {
      this.logger.error(`‚ùå Error processing watering decision for garden ${gardenId}: ${error.message}`, error.stack);
      
      if (error instanceof BadRequestException || 
          error instanceof NotFoundException || 
          error instanceof ForbiddenException) {
        throw error;
      }
      throw new InternalServerErrorException('L·ªói khi l·∫•y quy·∫øt ƒë·ªãnh t∆∞·ªõi n∆∞·ªõc t·ª´ AI model');
    }
  }

  async createCustomWateringDecision(
    userId: number, 
    gardenId: number, 
    createDto: CreateWateringDecisionDto
  ): Promise<WateringDecisionDto> {
    try {
      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p v∆∞·ªùn
      await this.ensureGardenOwnership(gardenId, userId);

      // Validate sensor data
      this.validateSensorData(createDto.sensorData);

      // Extend with default water level for AI model
      const extendedSensorData: SensorDataForRequestModelAIDto = {
        ...createDto.sensorData,
        water_level: 80.0, // Default for custom data
      };

      // G·ªçi AI model v·ªõi th·ªùi gian hi·ªán t·∫°i
      const decision = await this.callAIModel(extendedSensorData, new Date());

      return {
        ...decision,
        sensor_data: createDto.sensorData,
        timestamp: new Date(),
      };
    } catch (error) {
      if (error instanceof BadRequestException || 
          error instanceof ForbiddenException) {
        throw error;
      }
      console.error('Error creating custom watering decision:', error);
      throw new InternalServerErrorException('L·ªói khi t·∫°o quy·∫øt ƒë·ªãnh t∆∞·ªõi n∆∞·ªõc t√πy ch·ªânh');
    }
  }

  async getWateringStatsByGarden(userId: number, gardenId: number, days: number): Promise<WateringStatsDto> {
    try {
      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p v∆∞·ªùn
      await this.ensureGardenOwnership(gardenId, userId);

      // T√≠nh to√°n th·ªëng k√™
      const stats = await this.calculateWateringStats(gardenId, days);

      return stats;
    } catch (error) {
      if (error instanceof BadRequestException || 
          error instanceof ForbiddenException) {
        throw error;
      }
      console.error('Error getting watering stats:', error);
      throw new InternalServerErrorException('L·ªói khi l·∫•y th·ªëng k√™ quy·∫øt ƒë·ªãnh t∆∞·ªõi n∆∞·ªõc');
    }
  }

  async testAIConnection(): Promise<any> {
    try {
      const response = await axios.get(`${this.aiServiceUrl}/health`, {
        timeout: 5000,
      });
      
      return {
        status: 'success',
        message: 'AI model ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
        aiResponse: response.data,
        timestamp: new Date(),
      };
    } catch (error) {
      console.error('AI model test failed:', error);
      throw new InternalServerErrorException('AI model kh√¥ng ph·∫£n h·ªìi');
    }
  }

  // Private helper methods
  private async ensureGardenOwnership(gardenId: number, userId: number): Promise<any> {
    const garden = await this.prisma.garden.findUnique({ 
      where: { id: gardenId } 
    });
    
    if (!garden) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y v∆∞·ªùn');
    }
    
    if (garden.gardenerId !== userId) {
      throw new ForbiddenException('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v∆∞·ªùn n√†y');
    }

    return garden;
  }

  private async getLatestSensorData(gardenId: number): Promise<SensorDataForRequestModelAIDto> {
    const latestData = await this.prisma.sensorData.findMany({
      where: {
        sensor: { gardenId },
      },
      include: {
        sensor: true,
      },
      orderBy: { timestamp: 'desc' },
      take: 50, // L·∫•y 50 b·∫£n ghi g·∫ßn nh·∫•t ƒë·ªÉ t√¨m ƒë·ªß c√°c lo·∫°i sensor
    });

    if (latestData.length === 0) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn cho v∆∞·ªùn n√†y');
    }

    // T√¨m d·ªØ li·ªáu m·ªõi nh·∫•t cho t·ª´ng lo·∫°i sensor
    const sensorMap = new Map();
    for (const data of latestData) {
      if (!sensorMap.has(data.sensor.type)) {
        sensorMap.set(data.sensor.type, data.value);
      }
    }

    // Ki·ªÉm tra sensor b·∫Øt bu·ªôc
    const requiredSensors = ['SOIL_MOISTURE', 'HUMIDITY', 'TEMPERATURE', 'LIGHT'];
    const missingSensors = requiredSensors.filter(type => !sensorMap.has(type));
    
    if (missingSensors.length > 0) {
      throw new NotFoundException(`Thi·∫øu d·ªØ li·ªáu c·∫£m bi·∫øn: ${missingSensors.join(', ')}`);
    }

    return {
      soil_moisture: sensorMap.get('SOIL_MOISTURE'),
      air_humidity: sensorMap.get('HUMIDITY'),
      temperature: sensorMap.get('TEMPERATURE'),
      light_intensity: sensorMap.get('LIGHT'),
      water_level: sensorMap.get('WATER_LEVEL') || 80.0, // Default if not available
    };
  }

  private validateSensorData(sensorData: SensorDataForRequestModelAIDto): void {
    const { soil_moisture, air_humidity, temperature, light_intensity, water_level } = sensorData;

    if (soil_moisture < 0 || soil_moisture > 100) {
      throw new BadRequestException('ƒê·ªô ·∫©m ƒë·∫•t ph·∫£i t·ª´ 0 ƒë·∫øn 100%');
    }
    
    if (air_humidity < 0 || air_humidity > 100) {
      throw new BadRequestException('ƒê·ªô ·∫©m kh√¥ng kh√≠ ph·∫£i t·ª´ 0 ƒë·∫øn 100%');
    }
    
    if (temperature < -50 || temperature > 70) {
      throw new BadRequestException('Nhi·ªát ƒë·ªô ph·∫£i t·ª´ -50 ƒë·∫øn 70¬∞C');
    }
    
    if (light_intensity < 0 || light_intensity > 200000) {
      throw new BadRequestException('C∆∞·ªùng ƒë·ªô √°nh s√°ng kh√¥ng h·ª£p l·ªá');
    }

    if (water_level < 0 || water_level > 100) {
      throw new BadRequestException('M·ª©c n∆∞·ªõc trong b·ªÉ ph·∫£i t·ª´ 0 ƒë·∫øn 100%');
    }
  }

  private async callAIModel(sensorData: SensorDataForRequestModelAIDto, wateringTime: Date): Promise<Omit<WateringDecisionDto, 'sensor_data' | 'timestamp'>> {
    try {
      // Transform data to match AI model format
      const modelData = {
        'soil_moisture_1(%)': sensorData.soil_moisture,
        'soil_moisture_2(%)': sensorData.soil_moisture,
        'temperature(¬∞C)': sensorData.temperature,
        'light_level(lux)': sensorData.light_intensity,
        'water_level(%)': sensorData.water_level || 80.0,
        'hour': wateringTime.getHours(),
        'day_of_week': wateringTime.getDay() === 0 ? 6 : wateringTime.getDay() - 1, // Convert Sunday=0 to Monday=0 format
      };

      const response = await axios.post(`${this.aiServiceUrl}/watering/decision`, modelData, {
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.data || response.data.success === false) {
        throw new Error(`AI model error: ${response.data?.error || 'Unknown error'}`);
      }

      return {
        decision: response.data.should_water ? 'water_now' : 'no_water',
        confidence: 85.0, // AI model doesn't return confidence, use default
        reasons: response.data.should_water ? 
          ['AI model khuy·∫øn ngh·ªã t∆∞·ªõi n∆∞·ªõc d·ª±a tr√™n d·ªØ li·ªáu c·∫£m bi·∫øn'] : 
          ['AI model kh√¥ng khuy·∫øn ngh·ªã t∆∞·ªõi n∆∞·ªõc l√∫c n√†y'],
        recommended_amount: response.data.water_amount_litres || 0,
      };
    } catch (error) {
      console.error('AI model call failed:', error);
      if (error.code === 'ECONNREFUSED') {
        throw new InternalServerErrorException('AI model kh√¥ng kh·∫£ d·ª•ng');
      }
      if (error.response?.data?.error) {
        throw new InternalServerErrorException(`AI model l·ªói: ${error.response.data.error}`);
      }
      throw new InternalServerErrorException('L·ªói khi g·ªçi AI model');
    }
  }

  private async calculateWateringStats(gardenId: number, days: number): Promise<WateringStatsDto> {
    const fromDate = new Date();
    fromDate.setDate(fromDate.getDate() - days);
    const toDate = new Date();

    // M√¥ ph·ªèng th·ªëng k√™ - trong th·ª±c t·∫ø c√≥ th·ªÉ l∆∞u decisions v√†o database
    // ƒê√¢y l√† placeholder logic, c√≥ th·ªÉ m·ªü r·ªông sau
    const sensorDataCount = await this.prisma.sensorData.count({
      where: {
        sensor: { gardenId },
        timestamp: {
          gte: fromDate,
          lte: toDate,
        },
      },
    });

    // ∆Ø·ªõc t√≠nh d·ª±a tr√™n d·ªØ li·ªáu hi·ªán c√≥
    const estimatedDecisions = Math.floor(sensorDataCount / 4); // Gi·∫£ s·ª≠ m·ªói 4 sensor reading t·∫°o 1 decision
    const estimatedWaterRecommendations = Math.floor(estimatedDecisions * 0.4); // 40% recommend watering
    const estimatedNoWaterRecommendations = estimatedDecisions - estimatedWaterRecommendations;

    return {
      gardenId,
      totalDecisions: estimatedDecisions,
      waterRecommendations: estimatedWaterRecommendations,
      noWaterRecommendations: estimatedNoWaterRecommendations,
      averageConfidence: 78.5, // Mock data - c√≥ th·ªÉ t√≠nh to√°n th·ª±c t·ª´ stored decisions
      averageWaterAmount: 2.3, // Mock data
      fromDate,
      toDate,
    };
  }

  /**
   * T·∫°o nh·∫≠t k√Ω ho·∫°t ƒë·ªông cho quy·∫øt ƒë·ªãnh t∆∞·ªõi n∆∞·ªõc
   */
  private async createWateringDecisionActivity(
    gardenerId: number,
    garden: any,
    sensorData: SensorDataForRequestModelAIDto,
    decision: any,
    userNotes?: string,
  ): Promise<void> {
    try {
      const currentTime = new Date();
      const timeString = currentTime.toLocaleString('vi-VN', {
        timeZone: 'Asia/Ho_Chi_Minh',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });

      // T·∫°o m√¥ t·∫£ chi ti·∫øt cho ho·∫°t ƒë·ªông
      let activityDetails = `ü§ñ **Quy·∫øt ƒë·ªãnh t∆∞·ªõi n∆∞·ªõc b·∫±ng AI**\n\n`;
      activityDetails += `üìÖ **Th·ªùi gian**: ${timeString}\n`;
      activityDetails += `üè° **V∆∞·ªùn**: ${garden.name}\n`;
      activityDetails += `üåø **Lo·∫°i c√¢y**: ${garden.plantName || 'Ch∆∞a x√°c ƒë·ªãnh'}\n`;
      activityDetails += `üå± **Giai ƒëo·∫°n ph√°t tri·ªÉn**: ${garden.plantGrowStage || 'Ch∆∞a x√°c ƒë·ªãnh'}\n\n`;
      
      activityDetails += `üìä **D·ªØ li·ªáu c·∫£m bi·∫øn**:\n`;
      activityDetails += `‚Ä¢ üíß ƒê·ªô ·∫©m ƒë·∫•t: ${sensorData.soil_moisture}%\n`;
      activityDetails += `‚Ä¢ üå°Ô∏è Nhi·ªát ƒë·ªô: ${sensorData.temperature}¬∞C\n`;
      activityDetails += `‚Ä¢ üí® ƒê·ªô ·∫©m kh√¥ng kh√≠: ${sensorData.air_humidity}%\n`;
      activityDetails += `‚Ä¢ ‚òÄÔ∏è C∆∞·ªùng ƒë·ªô √°nh s√°ng: ${sensorData.light_intensity} lux\n`;
      activityDetails += `‚Ä¢ üö∞ M·ª©c n∆∞·ªõc trong b·ªÉ: ${sensorData.water_level}%\n\n`;

      activityDetails += `üéØ **Quy·∫øt ƒë·ªãnh AI**: ${decision.decision === 'water_now' ? 'üíß C·∫ßn t∆∞·ªõi n∆∞·ªõc' : '‚è∏Ô∏è Kh√¥ng c·∫ßn t∆∞·ªõi'}\n`;
      activityDetails += `üìà **ƒê·ªô tin c·∫≠y**: ${decision.confidence}%\n`;
      
      if (decision.recommended_amount > 0) {
        activityDetails += `üíß **L∆∞·ª£ng n∆∞·ªõc ƒë·ªÅ xu·∫•t**: ${decision.recommended_amount} l√≠t\n`;
      }

      if (decision.reasons && decision.reasons.length > 0) {
        activityDetails += `\nüîç **L√Ω do**:\n`;
        decision.reasons.forEach((reason: string, index: number) => {
          activityDetails += `${index + 1}. ${reason}\n`;
        });
      }

      if (userNotes) {
        activityDetails += `\nüìù **Ghi ch√∫ c·ªßa ng∆∞·ªùi d√πng**: ${userNotes}\n`;
      }

      activityDetails += `\nüí° **L∆∞u √Ω**: Quy·∫øt ƒë·ªãnh ƒë∆∞·ª£c ƒë∆∞a ra d·ª±a tr√™n d·ªØ li·ªáu c·∫£m bi·∫øn th·ªùi gian th·ª±c v√† m√¥ h√¨nh AI ƒë∆∞·ª£c hu·∫•n luy·ªán`;

      // T·∫°o ghi ch√∫ ng·∫Øn g·ªçn cho reason
      const reason = `AI khuy·∫øn ngh·ªã ${decision.decision === 'water_now' ? 't∆∞·ªõi n∆∞·ªõc' : 'kh√¥ng t∆∞·ªõi n∆∞·ªõc'} d·ª±a tr√™n d·ªØ li·ªáu c·∫£m bi·∫øn (ƒë·ªô tin c·∫≠y: ${decision.confidence}%)`;

      await this.prisma.gardenActivity.create({
        data: {
          gardenId: garden.id,
          gardenerId: gardenerId,
          name: `Quy·∫øt ƒë·ªãnh AI - ${decision.decision === 'water_now' ? 'T∆∞·ªõi n∆∞·ªõc' : 'Kh√¥ng t∆∞·ªõi'}`,
          activityType: 'WATERING',
          timestamp: currentTime,
          plantName: garden.plantName || 'Ch∆∞a x√°c ƒë·ªãnh',
          plantGrowStage: garden.plantGrowStage || 'Ch∆∞a x√°c ƒë·ªãnh',
          details: activityDetails,
          reason: reason,
          notes: userNotes || 'Quy·∫øt ƒë·ªãnh t∆∞·ªõi n∆∞·ªõc t·ª± ƒë·ªông b·∫±ng AI',
        },
      });

      this.logger.log(`üìã Activity log created for watering decision - Garden: ${garden.name}, Decision: ${decision.decision}`);
    } catch (error) {
      this.logger.error(`Failed to create activity log for watering decision: ${error.message}`, error.stack);
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn flow ch√≠nh
    }
  }
}

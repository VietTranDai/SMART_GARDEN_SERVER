import { Injectable } from '@nestjs/common';
import { ActivityType } from '@prisma/client';
import {
  ActivityStatsQueryDto,
  ActivityStatsResponseDto,
  ActivityOverviewStatsDto,
  ActivityTypeStatsDto,
  DailyActivityStatsDto,
  MonthlyActivityStatsDto,
  GardenActivityStatsDto,
  ActivityTrendDto,
} from './dto/activity-stats.dto';
import { PrismaService } from 'src/prisma/prisma.service';

interface ActivityTypeMapping {
  name: string;
  description: string;
  icon: string;
  tips: string;
}

@Injectable()
export class ActivityStatsService {
  constructor(private prisma: PrismaService) {}

  // Mapping cho c√°c lo·∫°i ho·∫°t ƒë·ªông v·ªõi m√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát
  private readonly activityTypeMapping: Record<
    ActivityType,
    ActivityTypeMapping
  > = {
    [ActivityType.PLANTING]: {
      name: 'Tr·ªìng c√¢y',
      description: 'Ho·∫°t ƒë·ªông gieo tr·ªìng v√† tr·ªìng c√¢y m·ªõi trong v∆∞·ªùn',
      icon: 'üå±',
      tips: 'N√™n tr·ªìng v√†o bu·ªïi s√°ng s·ªõm ho·∫∑c chi·ªÅu m√°t ƒë·ªÉ c√¢y d·ªÖ th√≠ch nghi',
    },
    [ActivityType.WATERING]: {
      name: 'T∆∞·ªõi n∆∞·ªõc',
      description: 'Cung c·∫•p n∆∞·ªõc cho c√¢y tr·ªìng ƒë·ªÉ duy tr√¨ ƒë·ªô ·∫©m ph√π h·ª£p',
      icon: 'üíß',
      tips: 'T∆∞·ªõi n∆∞·ªõc v√†o bu·ªïi s√°ng s·ªõm ho·∫∑c chi·ªÅu t·ªëi ƒë·ªÉ tr√°nh bay h∆°i',
    },
    [ActivityType.FERTILIZING]: {
      name: 'B√≥n ph√¢n',
      description:
        'Cung c·∫•p dinh d∆∞·ª°ng cho c√¢y th√¥ng qua ph√¢n b√≥n h·ªØu c∆° ho·∫∑c v√¥ c∆°',
      icon: 'üåø',
      tips: 'B√≥n ph√¢n sau khi t∆∞·ªõi n∆∞·ªõc ƒë·ªÉ tr√°nh l√†m ch√°y r·ªÖ c√¢y',
    },
    [ActivityType.PRUNING]: {
      name: 'C·∫Øt t·ªâa',
      description:
        'Lo·∫°i b·ªè c√°c c√†nh l√° kh√¥, b·ªánh ho·∫∑c c·∫Øt t·ªâa t·∫°o d√°ng cho c√¢y',
      icon: '‚úÇÔ∏è',
      tips: 'S·ª≠ d·ª•ng d·ª•ng c·ª• s·∫Øc b√©n v√† s·∫°ch s·∫Ω ƒë·ªÉ tr√°nh l√¢y nhi·ªÖm b·ªánh',
    },
    [ActivityType.HARVESTING]: {
      name: 'Thu ho·∫°ch',
      description: 'Thu h√°i tr√°i c√¢y, rau c·ªß ho·∫∑c hoa khi ƒë√£ ch√≠n mu·ªìi',
      icon: 'üåæ',
      tips: 'Thu ho·∫°ch v√†o bu·ªïi s√°ng s·ªõm khi th·ªùi ti·∫øt m√°t m·∫ª',
    },
    [ActivityType.PEST_CONTROL]: {
      name: 'Ph√≤ng tr·ª´ s√¢u b·ªánh',
      description: 'Ki·ªÉm so√°t v√† ƒëi·ªÅu tr·ªã c√°c lo·∫°i s√¢u b·ªánh h·∫°i c√¢y tr·ªìng',
      icon: 'üõ°Ô∏è',
      tips: '∆Øu ti√™n s·ª≠ d·ª•ng c√°c bi·ªán ph√°p sinh h·ªçc v√† th√¢n thi·ªán m√¥i tr∆∞·ªùng',
    },
    [ActivityType.SOIL_TESTING]: {
      name: 'Ki·ªÉm tra ƒë·∫•t',
      description:
        'ƒêo l∆∞·ªùng v√† ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng ƒë·∫•t nh∆∞ pH, ƒë·ªô ·∫©m, dinh d∆∞·ª°ng',
      icon: 'üî¨',
      tips: 'Ki·ªÉm tra ƒë·∫•t ƒë·ªãnh k·ª≥ ƒë·ªÉ ƒëi·ªÅu ch·ªânh ch·∫ø ƒë·ªô chƒÉm s√≥c ph√π h·ª£p',
    },
    [ActivityType.WEEDING]: {
      name: 'L√†m c·ªè',
      description:
        'Lo·∫°i b·ªè c·ªè d·∫°i v√† th·ª±c v·∫≠t c·∫°nh tranh dinh d∆∞·ª°ng v·ªõi c√¢y tr·ªìng',
      icon: 'üåø',
      tips: 'Nh·ªï c·ªè sau khi m∆∞a ho·∫∑c t∆∞·ªõi n∆∞·ªõc khi ƒë·∫•t m·ªÅm',
    },
    [ActivityType.OTHER]: {
      name: 'Ho·∫°t ƒë·ªông kh√°c',
      description: 'C√°c ho·∫°t ƒë·ªông chƒÉm s√≥c v∆∞·ªùn kh√°c kh√¥ng thu·ªôc danh m·ª•c tr√™n',
      icon: 'üîß',
      tips: 'Ghi ch√∫ chi ti·∫øt ƒë·ªÉ theo d√µi hi·ªáu qu·∫£ c·ªßa ho·∫°t ƒë·ªông',
    },
  };

  /**
   * L·∫•y th·ªëng k√™ ho·∫°t ƒë·ªông chi ti·∫øt v·ªõi m√¥ t·∫£ th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát
   */
  async getActivityStats(
    gardenerId: number,
    query: ActivityStatsQueryDto,
  ): Promise<ActivityStatsResponseDto> {
    const { gardenId, startDate, endDate, activityType } = query;

    const whereCondition = {
      gardenerId,
      timestamp: {
        gte: new Date(startDate),
        lte: new Date(endDate),
      },
      ...(gardenId && { gardenId }),
      ...(activityType && { activityType }),
    };

    // L·∫•y t·∫•t c·∫£ ho·∫°t ƒë·ªông trong kho·∫£ng th·ªùi gian
    const activities = await this.prisma.gardenActivity.findMany({
      where: whereCondition,
      include: {
        garden: {
          select: {
            id: true,
            name: true,
            type: true,
          },
        },
      },
      orderBy: {
        timestamp: 'desc',
      },
    });

    // T√≠nh to√°n c√°c th·ªëng k√™
    const startDateObj = new Date(startDate);
    const endDateObj = new Date(endDate);

    const overview = await this.calculateOverviewStats(
      activities,
      startDateObj,
      endDateObj,
    );
    const byActivityType = this.calculateActivityTypeStats(activities);
    const dailyStats = this.calculateDailyStats(activities);
    const monthlyStats = this.calculateMonthlyStats(activities);
    const byGarden = !gardenId
      ? this.calculateGardenStats(activities)
      : undefined;
    const trends = this.calculateTrends(activities, startDateObj, endDateObj);

    return {
      overview,
      byActivityType,
      dailyStats,
      monthlyStats,
      byGarden,
      trends,
      generatedAt: new Date().toISOString(),
      period: {
        startDate,
        endDate,
      },
    };
  }

  /**
   * T√≠nh to√°n th·ªëng k√™ t·ªïng quan v·ªõi m√¥ t·∫£ th√¢n thi·ªán
   */
  private async calculateOverviewStats(
    activities: any[],
    startDate: Date,
    endDate: Date,
  ): Promise<ActivityOverviewStatsDto> {
    const totalActivities = activities.length;
    const totalDays = Math.max(
      1,
      Math.ceil(
        (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24),
      ),
    );

    // T√≠nh s·ªë ng√†y c√≥ ho·∫°t ƒë·ªông
    const activeDaysSet = new Set(
      activities.map(
        (activity) => activity.timestamp.toISOString().split('T')[0],
      ),
    );
    const activeDays = activeDaysSet.size;

    // T√≠nh trung b√¨nh ho·∫°t ƒë·ªông m·ªói ng√†y
    const averagePerDay = totalActivities / totalDays;

    // T√≠nh t·ª∑ l·ªá ng√†y c√≥ ho·∫°t ƒë·ªông
    const activityRate = (activeDays / totalDays) * 100;

    // T√¨m lo·∫°i ho·∫°t ƒë·ªông ph·ªï bi·∫øn nh·∫•t
    const activityTypeCounts = activities.reduce((acc, activity) => {
      acc[activity.activityType] = (acc[activity.activityType] || 0) + 1;
      return acc;
    }, {});

    const mostCommonActivity =
      totalActivities > 0
        ? (Object.keys(activityTypeCounts).reduce((a, b) =>
            activityTypeCounts[a] > activityTypeCounts[b] ? a : b,
          ) as ActivityType)
        : ActivityType.OTHER;

    // T√¨m khu v∆∞·ªùn c√≥ nhi·ªÅu ho·∫°t ƒë·ªông nh·∫•t
    const gardenCounts = activities.reduce((acc, activity) => {
      const gardenName = activity.garden?.name || 'Khu v∆∞·ªùn ch∆∞a ƒë·∫∑t t√™n';
      acc[gardenName] = (acc[gardenName] || 0) + 1;
      return acc;
    }, {});

    const mostActiveGarden =
      Object.keys(gardenCounts).length > 0
        ? Object.keys(gardenCounts).reduce((a, b) =>
            gardenCounts[a] > gardenCounts[b] ? a : b,
          )
        : undefined;

    return {
      totalActivities,
      averagePerDay: Math.round(averagePerDay * 100) / 100,
      activeDays,
      totalDays,
      activityRate: Math.round(activityRate * 100) / 100,
      mostCommonActivity,
      mostCommonActivityName: this.activityTypeMapping[mostCommonActivity].name,
      mostActiveGarden,
    };
  }

  /**
   * T√≠nh to√°n th·ªëng k√™ theo lo·∫°i ho·∫°t ƒë·ªông v·ªõi m√¥ t·∫£ chi ti·∫øt
   */
  private calculateActivityTypeStats(
    activities: any[],
  ): ActivityTypeStatsDto[] {
    const totalActivities = activities.length;
    const activityTypeCounts = activities.reduce((acc, activity) => {
      acc[activity.activityType] = (acc[activity.activityType] || 0) + 1;
      return acc;
    }, {});

    return Object.entries(activityTypeCounts)
      .map(([type, count]) => {
        const mapping = this.activityTypeMapping[type as ActivityType];
        return {
          type: type as ActivityType,
          displayName: `${mapping.icon} ${mapping.name}`,
          count: count as number,
          percentage:
            totalActivities > 0
              ? Math.round(((count as number) / totalActivities) * 10000) / 100
              : 0,
        };
      })
      .sort((a, b) => b.count - a.count);
  }

  /**
   * T√≠nh to√°n th·ªëng k√™ theo ng√†y v·ªõi format ti·∫øng Vi·ªát
   */
  private calculateDailyStats(activities: any[]): DailyActivityStatsDto[] {
    const dailyGroups = activities.reduce((acc, activity) => {
      const date = activity.timestamp.toISOString().split('T')[0];
      if (!acc[date]) {
        acc[date] = [];
      }
      acc[date].push(activity);
      return acc;
    }, {});

    return Object.entries(dailyGroups)
      .map(([date, dayActivities]) => ({
        date: this.formatVietnameseDate(new Date(date)),
        activityCount: (dayActivities as any[]).length,
        activityBreakdown: this.calculateActivityTypeStats(
          dayActivities as any[],
        ),
      }))
      .sort((a, b) => a.date.localeCompare(b.date));
  }

  /**
   * T√≠nh to√°n th·ªëng k√™ theo th√°ng v·ªõi m√¥ t·∫£ chi ti·∫øt
   */
  private calculateMonthlyStats(activities: any[]): MonthlyActivityStatsDto[] {
    const monthlyGroups = activities.reduce((acc, activity) => {
      const month = activity.timestamp.toISOString().substring(0, 7); // YYYY-MM
      if (!acc[month]) {
        acc[month] = {
          activities: [],
          days: new Set(),
        };
      }
      acc[month].activities.push(activity);
      acc[month].days.add(activity.timestamp.toISOString().split('T')[0]);
      return acc;
    }, {});

    return Object.entries(monthlyGroups)
      .map(([month, data]) => {
        const activeDays = (data as any).days.size;
        const activityCount = (data as any).activities.length;

        return {
          month: this.formatVietnameseMonth(month),
          activityCount,
          activeDays,
          averagePerDay:
            activeDays > 0
              ? Math.round((activityCount / activeDays) * 100) / 100
              : 0,
        };
      })
      .sort((a, b) => a.month.localeCompare(b.month));
  }

  /**
   * T√≠nh to√°n th·ªëng k√™ theo khu v∆∞·ªùn v·ªõi m√¥ t·∫£ th√¢n thi·ªán
   */
  private calculateGardenStats(activities: any[]): GardenActivityStatsDto[] {
    const gardenGroups = activities.reduce((acc, activity) => {
      const gardenId = activity.gardenId;
      if (!acc[gardenId]) {
        acc[gardenId] = {
          garden: activity.garden,
          activities: [],
        };
      }
      acc[gardenId].activities.push(activity);
      return acc;
    }, {});

    return Object.values(gardenGroups)
      .map((data: any) => {
        const sortedActivities = data.activities.sort(
          (a, b) =>
            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),
        );

        const gardenTypeNames = {
          INDOOR: 'V∆∞·ªùn trong nh√†',
          OUTDOOR: 'V∆∞·ªùn ngo√†i tr·ªùi',
          BALCONY: 'V∆∞·ªùn ban c√¥ng',
          ROOFTOP: 'V∆∞·ªùn s√¢n th∆∞·ª£ng',
          WINDOW_SILL: 'V∆∞·ªùn c·ª≠a s·ªï',
        };

        return {
          gardenId: data.garden.id,
          gardenName: data.garden.name || 'Khu v∆∞·ªùn ch∆∞a ƒë·∫∑t t√™n',
          gardenType: gardenTypeNames[data.garden.type] || data.garden.type,
          totalActivities: data.activities.length,
          lastActivity: sortedActivities[0]?.timestamp.toISOString(),
          activityBreakdown: this.calculateActivityTypeStats(data.activities),
        };
      })
      .sort((a, b) => b.totalActivities - a.totalActivities);
  }

  /**
   * T√≠nh to√°n xu h∆∞·ªõng ho·∫°t ƒë·ªông v·ªõi ph√¢n t√≠ch th√¥ng minh
   */
  private calculateTrends(
    activities: any[],
    startDate: Date,
    endDate: Date,
  ): ActivityTrendDto[] {
    const diffTime = endDate.getTime() - startDate.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays <= 14) {
      return this.calculateDailyTrends(activities);
    } else if (diffDays <= 90) {
      return this.calculateWeeklyTrends(activities);
    } else {
      return this.calculateMonthlyTrends(activities);
    }
  }

  /**
   * Xu h∆∞·ªõng theo ng√†y v·ªõi m√¥ t·∫£ thay ƒë·ªïi
   */
  private calculateDailyTrends(activities: any[]): ActivityTrendDto[] {
    const dailyGroups = activities.reduce((acc, activity) => {
      const date = activity.timestamp.toISOString().split('T')[0];
      acc[date] = (acc[date] || 0) + 1;
      return acc;
    }, {});

    const dates = Object.keys(dailyGroups).sort();
    return dates.map((date, index) => {
      const currentCount = dailyGroups[date];
      const previousCount =
        index > 0 ? dailyGroups[dates[index - 1]] : currentCount;
      const changePercent =
        previousCount > 0
          ? Math.round(
              ((currentCount - previousCount) / previousCount) * 10000,
            ) / 100
          : 0;

      return {
        period: 'day',
        label: this.formatVietnameseDate(new Date(date)),
        count: currentCount,
        changePercent,
      };
    });
  }

  /**
   * Xu h∆∞·ªõng theo tu·∫ßn v·ªõi ph√¢n t√≠ch chi ti·∫øt
   */
  private calculateWeeklyTrends(activities: any[]): ActivityTrendDto[] {
    const weeklyGroups = activities.reduce((acc, activity) => {
      const date = new Date(activity.timestamp);
      const weekStart = this.getWeekStart(date);
      const weekKey = weekStart.toISOString().split('T')[0];
      acc[weekKey] = (acc[weekKey] || 0) + 1;
      return acc;
    }, {});

    const weeks = Object.keys(weeklyGroups).sort();
    return weeks.map((weekStart, index) => {
      const currentCount = weeklyGroups[weekStart];
      const previousCount =
        index > 0 ? weeklyGroups[weeks[index - 1]] : currentCount;
      const changePercent =
        previousCount > 0
          ? Math.round(
              ((currentCount - previousCount) / previousCount) * 10000,
            ) / 100
          : 0;

      const weekNum = this.getWeekNumber(new Date(weekStart));
      const year = new Date(weekStart).getFullYear();

      return {
        period: 'week',
        label: `Tu·∫ßn ${weekNum}/${year}`,
        count: currentCount,
        changePercent,
      };
    });
  }

  /**
   * Xu h∆∞·ªõng theo th√°ng v·ªõi insight th√¥ng minh
   */
  private calculateMonthlyTrends(activities: any[]): ActivityTrendDto[] {
    const monthlyGroups = activities.reduce((acc, activity) => {
      const month = activity.timestamp.toISOString().substring(0, 7);
      acc[month] = (acc[month] || 0) + 1;
      return acc;
    }, {});

    const months = Object.keys(monthlyGroups).sort();
    return months.map((month, index) => {
      const currentCount = monthlyGroups[month];
      const previousCount =
        index > 0 ? monthlyGroups[months[index - 1]] : currentCount;
      const changePercent =
        previousCount > 0
          ? Math.round(
              ((currentCount - previousCount) / previousCount) * 10000,
            ) / 100
          : 0;

      return {
        period: 'month',
        label: this.formatVietnameseMonth(month),
        count: currentCount,
        changePercent,
      };
    });
  }

  /**
   * Format ng√†y th√°ng theo ki·ªÉu Vi·ªát Nam
   */
  private formatVietnameseDate(date: Date): string {
    const options: Intl.DateTimeFormatOptions = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      timeZone: 'Asia/Ho_Chi_Minh',
    };
    return date.toLocaleDateString('vi-VN', options);
  }

  /**
   * Format th√°ng theo ki·ªÉu Vi·ªát Nam
   */
  private formatVietnameseMonth(monthStr: string): string {
    const [year, month] = monthStr.split('-');
    const date = new Date(parseInt(year), parseInt(month) - 1);
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'long',
      timeZone: 'Asia/Ho_Chi_Minh',
    };
    return date.toLocaleDateString('vi-VN', options);
  }

  /**
   * L·∫•y ng√†y ƒë·∫ßu tu·∫ßn (Th·ª© 2)
   */
  private getWeekStart(date: Date): Date {
    const day = date.getDay();
    const diff = date.getDate() - day + (day === 0 ? -6 : 1); // Th·ª© 2 l√† ng√†y ƒë·∫ßu tu·∫ßn
    return new Date(date.setDate(diff));
  }

  /**
   * L·∫•y s·ªë tu·∫ßn trong nƒÉm
   */
  private getWeekNumber(date: Date): number {
    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
    const pastDaysOfYear =
      (date.getTime() - firstDayOfYear.getTime()) / 86400000;
    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
  }

  /**
   * L·∫•y th·ªëng k√™ t√≥m t·∫Øt nhanh cho dashboard
   */
  async getQuickStats(gardenerId: number, gardenId?: number): Promise<any> {
    const today = new Date();
    const sevenDaysAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    const thirtyDaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

    const whereCondition = {
      gardenerId,
      ...(gardenId && { gardenId }),
    };

    const [todayActivities, weekActivities, monthActivities, lastActivity] =
      await Promise.all([
        this.prisma.gardenActivity.count({
          where: {
            ...whereCondition,
            timestamp: {
              gte: new Date(today.setHours(0, 0, 0, 0)),
              lte: new Date(today.setHours(23, 59, 59, 999)),
            },
          },
        }),
        this.prisma.gardenActivity.count({
          where: {
            ...whereCondition,
            timestamp: {
              gte: sevenDaysAgo,
            },
          },
        }),
        this.prisma.gardenActivity.count({
          where: {
            ...whereCondition,
            timestamp: {
              gte: thirtyDaysAgo,
            },
          },
        }),
        this.prisma.gardenActivity.findFirst({
          where: whereCondition,
          include: {
            garden: {
              select: { name: true },
            },
          },
          orderBy: {
            timestamp: 'desc',
          },
        }),
      ]);

    return {
      todayActivities,
      weekActivities,
      monthActivities,
      lastActivity: lastActivity
        ? {
            name: lastActivity.name,
            type: this.activityTypeMapping[lastActivity.activityType].name,
            garden: lastActivity.garden.name,
            timestamp: lastActivity.timestamp.toISOString(),
            relativeTime: this.getRelativeTime(lastActivity.timestamp),
          }
        : null,
      summary: this.generateQuickSummary(
        todayActivities,
        weekActivities,
        monthActivities,
      ),
    };
  }

  /**
   * T·∫°o t√≥m t·∫Øt nhanh th√¢n thi·ªán
   */
  private generateQuickSummary(
    today: number,
    week: number,
    month: number,
  ): string {
    if (today > 0) {
      return `üéâ Tuy·ªát v·ªùi! H√¥m nay b·∫°n ƒë√£ th·ª±c hi·ªán ${today} ho·∫°t ƒë·ªông chƒÉm s√≥c v∆∞·ªùn.`;
    } else if (week > 0) {
      const avgPerDay = Math.round((week / 7) * 10) / 10;
      return `üå± Tu·∫ßn n√†y b·∫°n ƒë√£ c√≥ ${week} ho·∫°t ƒë·ªông, trung b√¨nh ${avgPerDay} ho·∫°t ƒë·ªông/ng√†y.`;
    } else if (month > 0) {
      return `üìä Th√°ng n√†y b·∫°n ƒë√£ th·ª±c hi·ªán ${month} ho·∫°t ƒë·ªông chƒÉm s√≥c v∆∞·ªùn.`;
    } else {
      return `üí° H√£y b·∫Øt ƒë·∫ßu ghi l·∫°i c√°c ho·∫°t ƒë·ªông chƒÉm s√≥c v∆∞·ªùn ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh nh√©!`;
    }
  }

  /**
   * T√≠nh th·ªùi gian t∆∞∆°ng ƒë·ªëi b·∫±ng ti·∫øng Vi·ªát
   */
  private getRelativeTime(date: Date): string {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

    if (diffMinutes < 60) {
      return diffMinutes <= 1 ? 'v·ª´a xong' : `${diffMinutes} ph√∫t tr∆∞·ªõc`;
    } else if (diffHours < 24) {
      return diffHours === 1 ? '1 gi·ªù tr∆∞·ªõc' : `${diffHours} gi·ªù tr∆∞·ªõc`;
    } else if (diffDays < 7) {
      return diffDays === 1 ? 'h√¥m qua' : `${diffDays} ng√†y tr∆∞·ªõc`;
    } else {
      return date.toLocaleDateString('vi-VN');
    }
  }
}

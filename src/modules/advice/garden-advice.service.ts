import { Injectable, NotFoundException, Logger } from '@nestjs/common';
import { PrismaService } from '../../prisma/prisma.service';
import { AdviceActionDto } from './dto/advice-action.dto';
import { WeatherAdviceService } from './weather-advice.service';

interface AdviceContext {
  garden: any;
  plant: any;
  growthStage: any;
  gardener: any;
  sensorData: Record<string, SensorReading>;
  weatherData: any;
  forecasts: ForecastData;
  activities: any[];
  tasks: any[];
  schedules: any[];
  alerts: any[];
  evaluations: any[];
}

interface SensorReading {
  value: number;
  timestamp: Date;
  unit: string;
  status: 'normal' | 'warning' | 'critical';
  trend: 'rising' | 'falling' | 'stable';
}

interface ForecastData {
  hourly: any[];
  daily: any[];
  weekly: any[];
}

interface RiskItem {
  type: string;
  severity: 'high' | 'medium' | 'low';
  source: string;
  description: string;
}

@Injectable()
export class GardenAdviceService {
  private readonly logger = new Logger(GardenAdviceService.name);

  constructor(
    private prisma: PrismaService,
    private weatherAdviceService: WeatherAdviceService,
  ) {}

  async getAdvice(gardenId: number): Promise<AdviceActionDto[]> {
    try {
      this.logger.log(`üå± B·∫Øt ƒë·∫ßu t·∫°o l·ªùi khuy√™n cho v∆∞·ªùn ${gardenId}`);

      // 1. Thu th·∫≠p to√†n b·ªô d·ªØ li·ªáu ng·ªØ c·∫£nh
      const context = await this.buildAdviceContext(gardenId);

      // 2. Ph√¢n t√≠ch v√† ƒë√°nh gi√° t√¨nh tr·∫°ng hi·ªán t·∫°i
      const analysis = await this.analyzeCurrentSituation(context);

      // 3. T·∫°o l·ªùi khuy√™n d·ª±a tr√™n AI v√† kinh nghi·ªám
      const advices = await this.generateIntelligentAdvice(context, analysis);

      // 4. C√° nh√¢n h√≥a v√† t·ªëi ∆∞u h√≥a l·ªùi khuy√™n
      const personalizedAdvices = this.personalizeAdvice(advices, context);

      // 5. S·∫Øp x·∫øp v√† ƒë·ªãnh d·∫°ng cu·ªëi c√πng
      const finalAdvices = this.prioritizeAndFormat(
        personalizedAdvices,
        context,
      );

      this.logger.log(
        `‚úÖ ƒê√£ t·∫°o ${finalAdvices.length} l·ªùi khuy√™n cho v∆∞·ªùn ${gardenId}`,
      );
      return finalAdvices;
    } catch (error) {
      this.logger.error(`‚ùå L·ªói khi t·∫°o l·ªùi khuy√™n: ${error.message}`);
      throw error;
    }
  }

  private async buildAdviceContext(gardenId: number): Promise<AdviceContext> {
    // Thu th·∫≠p d·ªØ li·ªáu song song ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
    const [
      gardenData,
      sensorData,
      weatherData,
      forecasts,
      activities,
      tasks,
      schedules,
      alerts,
      evaluations,
    ] = await Promise.all([
      this.getGardenWithPlantDetails(gardenId),
      this.analyzeSensorData(gardenId),
      this.weatherAdviceService
        .getLatestWeatherObservation(gardenId)
        .catch(() => null),
      this.getComprehensiveForecasts(gardenId),
      this.getRecentActivities(gardenId),
      this.getPendingTasks(gardenId),
      this.getUpcomingSchedules(gardenId),
      this.getActiveAlerts(gardenId),
      this.getActivityEvaluations(gardenId),
    ]);

    return {
      garden: gardenData.garden,
      plant: gardenData.plant,
      growthStage: gardenData.growthStage,
      gardener: gardenData.gardener,
      sensorData,
      weatherData,
      forecasts,
      activities,
      tasks,
      schedules,
      alerts,
      evaluations,
    };
  }

  private async getGardenWithPlantDetails(gardenId: number) {
    const garden = await this.prisma.garden.findUnique({
      where: { id: gardenId },
      include: {
        gardener: {
          include: {
            experienceLevel: true,
            user: {
              select: {
                firstName: true,
                lastName: true,
              },
            },
            activityEvaluation: {
              take: 5,
              orderBy: { createdAt: 'desc' },
            },
          },
        },
      },
    });

    if (!garden) {
      throw new NotFoundException(
        `üö´ Kh√¥ng t√¨m th·∫•y v∆∞·ªùn v·ªõi m√£ s·ªë ${gardenId}. Vui l√≤ng ki·ªÉm tra l·∫°i!`,
      );
    }

    if (!garden.plantName || !garden.plantGrowStage) {
      throw new NotFoundException(
        `‚ö†Ô∏è V∆∞·ªùn "${garden.name}" ch∆∞a c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ lo·∫°i c√¢y v√† giai ƒëo·∫°n ph√°t tri·ªÉn. H√£y c·∫≠p nh·∫≠t th√¥ng tin n√†y ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c l·ªùi khuy√™n ch√≠nh x√°c nh·∫•t!`,
      );
    }

    // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ c√¢y tr·ªìng
    const plant = await this.prisma.plant.findUnique({
      where: { name: garden.plantName },
      include: {
        growthStages: {
          where: { stageName: garden.plantGrowStage },
        },
        PlantType: true,
      },
    });

    if (!plant || plant.growthStages.length === 0) {
      throw new NotFoundException(
        `üåø Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho c√¢y "${garden.plantName}" ·ªü giai ƒëo·∫°n "${garden.plantGrowStage}". Li√™n h·ªá h·ªó tr·ª£ ƒë·ªÉ b·ªï sung th√¥ng tin n√†y!`,
      );
    }

    return {
      garden,
      plant,
      growthStage: plant.growthStages[0],
      gardener: garden.gardener,
    };
  }

  private async analyzeSensorData(
    gardenId: number,
  ): Promise<Record<string, SensorReading>> {
    const sensors = await this.prisma.sensor.findMany({
      where: { gardenId },
      include: {
        sensorData: {
          orderBy: { timestamp: 'desc' },
          take: 10, // L·∫•y 10 ƒëi·ªÉm d·ªØ li·ªáu g·∫ßn nh·∫•t ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng
        },
      },
    });

    const sensorAnalysis: Record<string, SensorReading> = {};

    for (const sensor of sensors) {
      if (sensor.sensorData.length === 0) continue;

      const latestReading = sensor.sensorData[0];
      const readings = sensor.sensorData.map((d) => d.value);

      // Ph√¢n t√≠ch xu h∆∞·ªõng
      const trend = this.analyzeTrend(readings);

      // ƒê√°nh gi√° tr·∫°ng th√°i
      const status = this.evaluateSensorStatus(
        sensor.type,
        latestReading.value,
      );

      sensorAnalysis[sensor.type.toLowerCase()] = {
        value: latestReading.value,
        timestamp: latestReading.timestamp,
        unit: sensor.unit,
        status,
        trend,
      };
    }

    return sensorAnalysis;
  }

  private analyzeTrend(values: number[]): 'rising' | 'falling' | 'stable' {
    if (values.length < 3) return 'stable';

    const recent = values.slice(0, 3);
    const older = values.slice(3, 6);

    const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;
    const olderAvg = older.reduce((a, b) => a + b, 0) / older.length;

    const changePercent = Math.abs((recentAvg - olderAvg) / olderAvg) * 100;

    if (changePercent < 5) return 'stable';
    return recentAvg > olderAvg ? 'rising' : 'falling';
  }

  private evaluateSensorStatus(
    sensorType: string,
    value: number,
  ): 'normal' | 'warning' | 'critical' {
    // ƒê·ªãnh nghƒ©a ng∆∞·ª°ng c·∫£nh b√°o cho t·ª´ng lo·∫°i c·∫£m bi·∫øn
    const thresholds = {
      SOIL_MOISTURE: { critical: [0, 10, 90, 100], warning: [10, 20, 80, 90] },
      TEMPERATURE: { critical: [0, 5, 40, 50], warning: [5, 10, 35, 40] },
      HUMIDITY: { critical: [0, 20, 90, 100], warning: [20, 30, 80, 90] },
      LIGHT: {
        critical: [0, 100, 80000, 100000],
        warning: [100, 500, 60000, 80000],
      },
      SOIL_PH: { critical: [0, 4, 9, 14], warning: [4, 5, 8, 9] },
    };

    const threshold = thresholds[sensorType];
    if (!threshold) return 'normal';

    const { critical, warning } = threshold;

    if (
      (value >= critical[0] && value <= critical[1]) ||
      (value >= critical[2] && value <= critical[3])
    ) {
      return 'critical';
    }

    if (
      (value >= warning[0] && value <= warning[1]) ||
      (value >= warning[2] && value <= warning[3])
    ) {
      return 'warning';
    }

    return 'normal';
  }

  private async getComprehensiveForecasts(
    gardenId: number,
  ): Promise<ForecastData> {
    const [hourly, daily] = await Promise.all([
      this.prisma.hourlyForecast.findMany({
        where: { gardenId },
        orderBy: { forecastFor: 'asc' },
        take: 24,
      }),
      this.prisma.dailyForecast.findMany({
        where: { gardenId },
        orderBy: { forecastFor: 'asc' },
        take: 7,
      }),
    ]);

    return {
      hourly,
      daily,
      weekly: daily, // S·ª≠ d·ª•ng daily cho weekly forecast
    };
  }

  private async getRecentActivities(gardenId: number) {
    return this.prisma.gardenActivity.findMany({
      where: { gardenId },
      orderBy: { timestamp: 'desc' },
      take: 20,
      include: {
        evaluations: {
          orderBy: { createdAt: 'desc' },
          take: 1,
        },
        weatherObservation: true,
      },
    });
  }

  private async getPendingTasks(gardenId: number) {
    return this.prisma.task.findMany({
      where: {
        gardenId,
        status: 'PENDING',
      },
      orderBy: { dueDate: 'asc' },
      take: 10,
      include: {
        photoEvaluations: true,
      },
    });
  }

  private async getUpcomingSchedules(gardenId: number) {
    const now = new Date();
    const next24Hours = new Date(now.getTime() + 24 * 60 * 60 * 1000);

    return this.prisma.wateringSchedule.findMany({
      where: {
        gardenId,
        status: 'PENDING',
        scheduledAt: {
          gte: now,
          lte: next24Hours,
        },
      },
      orderBy: { scheduledAt: 'asc' },
      take: 5,
    });
  }

  private async getActiveAlerts(gardenId: number) {
    return this.prisma.alert.findMany({
      where: {
        gardenId,
        status: {
          in: ['PENDING', 'IN_PROGRESS'],
        },
      },
      orderBy: { createdAt: 'desc' },
      take: 10,
    });
  }

  private async getActivityEvaluations(gardenId: number) {
    return this.prisma.activityEvaluation.findMany({
      where: {
        gardenActivity: {
          gardenId,
        },
      },
      orderBy: { evaluatedAt: 'desc' },
      take: 10,
      include: {
        gardenActivity: true,
      },
    });
  }

  private async analyzeCurrentSituation(context: AdviceContext) {
    const now = new Date();
    const { garden, plant, growthStage, gardener, sensorData, weatherData } =
      context;

    // T√≠nh to√°n th·ªùi gian tr·ªìng
    const daysSincePlanting = garden.plantStartDate
      ? Math.floor(
          (now.getTime() - garden.plantStartDate.getTime()) /
            (1000 * 60 * 60 * 24),
        )
      : 0;

    // Ph√¢n t√≠ch ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng
    const environmentalStatus = this.analyzeEnvironmentalConditions(
      sensorData,
      growthStage,
    );

    // ƒê√°nh gi√° ti·∫øn ƒë·ªô ph√°t tri·ªÉn
    const growthProgress = this.assessGrowthProgress(
      daysSincePlanting,
      growthStage,
      context.activities,
    );

    // Ph√¢n t√≠ch r·ªßi ro
    const riskAssessment = this.assessRisks(context);

    // ƒê√°nh gi√° hi·ªáu qu·∫£ chƒÉm s√≥c g·∫ßn ƒë√¢y
    const careEffectiveness = this.evaluateCareEffectiveness(context);

    return {
      daysSincePlanting,
      environmentalStatus,
      growthProgress,
      riskAssessment,
      careEffectiveness,
      currentSeason: this.getCurrentSeason(),
      timeOfDay: this.getTimeOfDay(now.getHours()),
      weatherTrend: this.analyzeWeatherTrend(context.forecasts),
    };
  }

  private analyzeEnvironmentalConditions(
    sensorData: Record<string, SensorReading>,
    growthStage: any,
  ) {
    const conditions = {};

    for (const [sensorType, reading] of Object.entries(sensorData)) {
      const optimalRange = this.getOptimalRange(sensorType, growthStage);
      const deviation = this.calculateDeviation(reading.value, optimalRange);

      conditions[sensorType] = {
        current: reading.value,
        optimal: optimalRange,
        deviation,
        status: reading.status,
        trend: reading.trend,
        recommendation: this.getEnvironmentalRecommendation(
          sensorType,
          reading,
          optimalRange,
        ),
      };
    }

    return conditions;
  }

  private getOptimalRange(sensorType: string, growthStage: any) {
    const mapping = {
      soil_moisture: [
        growthStage.optimalSoilMoistureMin,
        growthStage.optimalSoilMoistureMax,
      ],
      temperature: [
        growthStage.optimalTemperatureMin,
        growthStage.optimalTemperatureMax,
      ],
      humidity: [
        growthStage.optimalHumidityMin,
        growthStage.optimalHumidityMax,
      ],
      light: [growthStage.optimalLightMin, growthStage.optimalLightMax],
      soil_ph: [growthStage.optimalPHMin, growthStage.optimalPHMax],
    };

    return mapping[sensorType] || [0, 100];
  }

  private calculateDeviation(value: number, [min, max]: number[]) {
    if (value < min)
      return { type: 'below', percentage: ((min - value) / min) * 100 };
    if (value > max)
      return { type: 'above', percentage: ((value - max) / max) * 100 };
    return { type: 'optimal', percentage: 0 };
  }

  private async generateIntelligentAdvice(
    context: AdviceContext,
    analysis: any,
  ): Promise<AdviceActionDto[]> {
    const advices: AdviceActionDto[] = [];
    let idCounter = 0;

    // 1. L·ªùi khuy√™n ch√†o h·ªèi v√† t·ªïng quan
    advices.push(...this.generateWelcomeAdvice(context, ++idCounter));

    // 2. L·ªùi khuy√™n kh·∫©n c·∫•p (alerts v√† critical conditions)
    advices.push(
      ...this.generateEmergencyAdvice(context, analysis, ++idCounter),
    );

    // 3. L·ªùi khuy√™n v·ªÅ ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng
    advices.push(
      ...this.generateEnvironmentalAdvice(context, analysis, ++idCounter),
    );

    // 4. L·ªùi khuy√™n v·ªÅ chƒÉm s√≥c h√†ng ng√†y
    advices.push(
      ...this.generateDailyCareAdvice(context, analysis, ++idCounter),
    );

    // 5. L·ªùi khuy√™n v·ªÅ th·ªùi ti·∫øt v√† d·ª± b√°o
    advices.push(...this.generateWeatherAdvice(context, analysis, ++idCounter));

    // 6. L·ªùi khuy√™n v·ªÅ giai ƒëo·∫°n ph√°t tri·ªÉn
    advices.push(
      ...this.generateGrowthStageAdvice(context, analysis, ++idCounter),
    );

    // 7. L·ªùi khuy√™n v·ªÅ dinh d∆∞·ª°ng v√† b√≥n ph√¢n
    advices.push(
      ...this.generateNutritionAdvice(context, analysis, ++idCounter),
    );

    // 8. L·ªùi khuy√™n v·ªÅ c√¥ng vi·ªác v√† l·ªãch tr√¨nh
    advices.push(...this.generateTaskAdvice(context, analysis, ++idCounter));

    // 9. L·ªùi khuy√™n theo m√πa
    advices.push(
      ...this.generateSeasonalAdvice(context, analysis, ++idCounter),
    );

    // 10. L·ªùi khuy√™n h·ªçc t·∫≠p v√† ph√°t tri·ªÉn
    advices.push(
      ...this.generateLearningAdvice(context, analysis, ++idCounter),
    );

    // 11. L·ªùi khuy√™n d√†i h·∫°n
    advices.push(
      ...this.generateLongTermAdvice(context, analysis, ++idCounter),
    );

    return advices;
  }

  private generateWelcomeAdvice(
    context: AdviceContext,
    startId: number,
  ): AdviceActionDto[] {
    const { garden, gardener } = context;
    const userName = gardener.user.firstName || 'b·∫°n';
    const plantDisplayName = garden.plantName;
    const levelTitle = gardener.experienceLevel.title;
    const now = new Date();
    const timeGreeting = this.getTimeGreeting(now.getHours());

    return [
      {
        id: startId,
        action: `${timeGreeting} ${userName}! üå±`,
        description: `Ch√†o ${userName}! T√¥i l√† tr·ª£ l√Ω AI chƒÉm s√≥c v∆∞·ªùn c·ªßa b·∫°n. H√¥m nay t√¥i s·∫Ω gi√∫p b·∫°n chƒÉm s√≥c c√¢y ${plantDisplayName} trong v∆∞·ªùn "${garden.name}". 

V·ªõi kinh nghi·ªám ·ªü c·∫•p ƒë·ªô "${levelTitle}", t√¥i ƒë√£ chu·∫©n b·ªã nh·ªØng l·ªùi khuy√™n ph√π h·ª£p nh·∫•t d√†nh ri√™ng cho b·∫°n. H√£y c√πng t√¥i ƒë·∫£m b·∫£o c√¢y ${plantDisplayName} c·ªßa b·∫°n ph√°t tri·ªÉn t·ªët nh·∫•t c√≥ th·ªÉ! üåø‚ú®

üìç V·ªã tr√≠ v∆∞·ªùn: ${garden.city ? `${garden.ward}, ${garden.district}, ${garden.city}` : 'Ch∆∞a c·∫≠p nh·∫≠t'}
üè∑Ô∏è Lo·∫°i v∆∞·ªùn: ${this.getGardenTypeDisplay(garden.type)}
üìÖ Giai ƒëo·∫°n hi·ªán t·∫°i: ${garden.plantGrowStage}`,
        reason: `B·∫Øt ƒë·∫ßu ng√†y m·ªõi v·ªõi tinh th·∫ßn t√≠ch c·ª±c v√† k·∫ø ho·∫°ch chƒÉm s√≥c c√¢y r√µ r√†ng.`,
        priority: 'MEDIUM',
        suggestedTime: 'morning',
        category: 'WELCOME',
      },
    ];
  }

  private generateEmergencyAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { alerts, sensorData } = context;
    const plantDisplayName = context.garden.plantName;

    // X·ª≠ l√Ω alerts kh·∫©n c·∫•p
    const criticalAlerts = alerts.filter(
      (alert) => alert.severity === 'CRITICAL',
    );
    criticalAlerts.forEach((alert) => {
      advices.push({
        id: startId++,
        action: 'üö® X·ª¨ L√ù KH·∫®N C·∫§P',
        description: `‚ö†Ô∏è C·∫¢NH B√ÅO NGHI√äM TR·ªåNG: ${alert.message}

üîß H√†nh ƒë·ªông ngay l·∫≠p t·ª©c:
${alert.suggestion || 'C·∫ßn ki·ªÉm tra v√† x·ª≠ l√Ω ngay ƒë·ªÉ tr√°nh thi·ªát h·∫°i cho c√¢y.'}

üìû N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y li√™n h·ªá v·ªõi chuy√™n gia ho·∫∑c c·ªông ƒë·ªìng l√†m v∆∞·ªùn ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ k·ªãp th·ªùi!

‚è∞ Th·ªùi gian x·ª≠ l√Ω: NGAY L·∫¨P T·ª®C - kh√¥ng ƒë∆∞·ª£c tr√¨ ho√£n!`,
        reason: `C·∫£nh b√°o m·ª©c ƒë·ªô nghi√™m tr·ªçng cho ${plantDisplayName} - c·∫ßn h√†nh ƒë·ªông kh·∫©n c·∫•p.`,
        priority: 'HIGH',
        suggestedTime: 'noon',
        category: 'EMERGENCY',
      });
    });

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán c·∫£m bi·∫øn nguy hi·ªÉm
    Object.entries(sensorData).forEach(([sensorType, reading]) => {
      if (reading.status === 'critical') {
        const emergencyAction = this.getEmergencyAction(
          sensorType,
          reading,
          plantDisplayName,
        );
        if (emergencyAction) {
          advices.push({
            id: startId++,
            action: emergencyAction.action,
            description: emergencyAction.description,
            reason: emergencyAction.reason,
            priority: 'HIGH',
            suggestedTime: 'noon',
            category: 'EMERGENCY',
          });
        }
      }
    });

    return advices;
  }

  private getEmergencyAction(
    sensorType: string,
    reading: SensorReading,
    plantName: string,
  ) {
    const emergencyActions = {
      soil_moisture: {
        action: 'üíß T∆Ø·ªöI N∆Ø·ªöC KH·∫®N C·∫§P',
        description: `üö® ƒê·∫•t c·ª±c k·ª≥ kh√¥: ${reading.value}% - ${plantName} ƒëang trong t√¨nh tr·∫°ng nguy hi·ªÉm!

H√†nh ƒë·ªông ngay:
1. ‚úÖ T∆∞·ªõi n∆∞·ªõc t·ª´ t·ª´, chia nhi·ªÅu l·∫ßn nh·ªè (200-300ml m·ªói l·∫ßn)
2. ‚úÖ Ki·ªÉm tra xem n∆∞·ªõc c√≥ th·∫•m ƒë·ªÅu kh√¥ng (ƒë·∫•t qu√° kh√¥ c√≥ th·ªÉ ƒë·∫©y n∆∞·ªõc ra)
3. ‚úÖ Che b√≥ng m√°t ngay l·∫≠p t·ª©c ƒë·ªÉ gi·∫£m bay h∆°i
4. ‚úÖ Phun s∆∞∆°ng nh·∫π xung quanh c√¢y (KH√îNG phun tr·ª±c ti·∫øp l√™n l√°)

‚ö†Ô∏è Tr√°nh: T∆∞·ªõi m·ªôt l∆∞·ª£ng l·ªõn c√πng l√∫c - c√≥ th·ªÉ g√¢y s·ªëc cho r·ªÖ!`,
        reason: `ƒê·ªô ·∫©m ƒë·∫•t ${reading.value}% ·ªü m·ª©c nguy hi·ªÉm - c√¢y c√≥ th·ªÉ ch·∫øt trong v√†i gi·ªù t·ªõi.`,
      },
      temperature: {
        action: 'üå°Ô∏è H·∫† NHI·ªÜT ƒê·ªò KH·∫®N C·∫§P',
        description: `üî• Nhi·ªát ƒë·ªô c·ª±c cao: ${reading.value}¬∞C - ${plantName} ƒëang b·ªã stress nhi·ªát nghi√™m tr·ªçng!

H√†nh ƒë·ªông ngay:
1. üèÉ‚Äç‚ôÇÔ∏è Di chuy·ªÉn c√¢y v√†o b√≥ng m√°t ngay l·∫≠p t·ª©c
2. üåä T∆∞·ªõi n∆∞·ªõc l√†m m√°t ƒë·∫•t xung quanh (kh√¥ng t∆∞·ªõi l√™n l√°)
3. üßä ƒê·∫∑t khay n∆∞·ªõc ƒë√° xung quanh ch·∫≠u (c√°ch 20-30cm)
4. üí® T·∫°o th√¥ng gi√≥ b·∫±ng qu·∫°t ho·∫∑c m·ªü c·ª≠a s·ªï
5. üèñÔ∏è Che l∆∞·ªõi 70-80% ngay l·∫≠p t·ª©c

‚ö†Ô∏è D·∫•u hi·ªáu nguy hi·ªÉm: L√° h√©o, cu·ªôn l·∫°i, ch√°y r√¨a l√°`,
        reason: `Nhi·ªát ƒë·ªô ${reading.value}¬∞C c√≥ th·ªÉ g√¢y ch·∫øt c√¢y trong v√†i gi·ªù.`,
      },
      soil_ph: {
        action: '‚öóÔ∏è ƒêI·ªÄU CH·ªàNH PH KH·∫®N C·∫§P',
        description: `üß™ pH ƒë·∫•t b·∫•t th∆∞·ªùng: ${reading.value} - R·ªÖ ${plantName} kh√¥ng th·ªÉ h·∫•p th·ª• dinh d∆∞·ª°ng!

H√†nh ƒë·ªông ngay:
${
  reading.value < 4
    ? `
üìà pH qu√° chua - C·∫ßn tƒÉng pH:
- R·∫Øc v√¥i b·ªôt m·ªãn (1-2g/l√≠t ƒë·∫•t) v√† t∆∞·ªõi ƒë·ªÅu
- Pha dung d·ªãch baking soda lo√£ng (1g/1L n∆∞·ªõc) t∆∞·ªõi g·ªëc
- Th√™m tro g·ªó (n·∫øu c√≥) tr·ªôn ƒë·ªÅu v·ªõi ƒë·∫•t`
    : `
üìâ pH qu√° ki·ªÅm - C·∫ßn gi·∫£m pH:
- T∆∞·ªõi dung d·ªãch gi·∫•m lo√£ng (5ml/1L n∆∞·ªõc)
- Th√™m b√£ c√† ph√™ kh√¥ tr·ªôn ƒë·ªÅu v·ªõi ƒë·∫•t
- S·ª≠ d·ª•ng ph√¢n compost c√≥ t√≠nh acid`
}

‚è∞ Ki·ªÉm tra l·∫°i sau 2-3 gi·ªù ƒë·ªÉ ƒë·∫£m b·∫£o pH ƒë√£ ·ªïn ƒë·ªãnh.`,
        reason: `pH ${reading.value} ngƒÉn c·∫£n h·∫•p th·ª• dinh d∆∞·ª°ng - c√¢y c√≥ th·ªÉ b·ªã suy dinh d∆∞·ª°ng n·∫∑ng.`,
      },
    };

    return emergencyActions[sensorType];
  }

  private generateEnvironmentalAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { sensorData, growthStage } = context;
    const plantDisplayName = context.garden.plantName;

    Object.entries(analysis.environmentalStatus).forEach(
      ([sensorType, condition]: [string, any]) => {
        if (
          condition.status === 'normal' &&
          condition.deviation.type === 'optimal'
        )
          return;

        const advice = this.generateEnvironmentalAdviceForSensor(
          sensorType,
          condition,
          plantDisplayName,
          growthStage,
          startId++,
        );

        if (advice) advices.push(advice);
      },
    );

    return advices;
  }

  private generateEnvironmentalAdviceForSensor(
    sensorType: string,
    condition: any,
    plantName: string,
    growthStage: any,
    id: number,
  ): AdviceActionDto | null {
    const { current, optimal, deviation, trend } = condition;
    const [optimalMin, optimalMax] = optimal;

    const adviceTemplates = {
      soil_moisture: {
        below: {
          action: 'üíß T∆∞·ªõi n∆∞·ªõc cho c√¢y',
          description: `ƒê·ªô ·∫©m ƒë·∫•t hi·ªán t·∫°i ${current}% th·∫•p h∆°n m·ª©c t·ªëi ∆∞u cho ${plantName} (${optimalMin}-${optimalMax}%).

üéØ H∆∞·ªõng d·∫´n t∆∞·ªõi n∆∞·ªõc ƒë√∫ng c√°ch:
‚Ä¢ Th·ªùi ƒëi·ªÉm: T∆∞·ªõi v√†o s√°ng s·ªõm (6-8h) ho·∫∑c chi·ªÅu m√°t (17-19h)
‚Ä¢ C√°ch t∆∞·ªõi: T·ª´ t·ª´, ƒë·ªÅu tay, t∆∞·ªõi ·ªü g·ªëc c√¢y
‚Ä¢ L∆∞·ª£ng n∆∞·ªõc: T∆∞·ªõi ƒë·∫øn khi th·∫•y n∆∞·ªõc th·∫•m xu·ªëng 5-10cm
‚Ä¢ Ki·ªÉm tra: D√πng tay ·∫•n nh·∫π ƒë·∫•t ƒë·ªÉ c·∫£m nh·∫≠n ƒë·ªô ·∫©m

${trend === 'falling' ? 'üìâ Xu h∆∞·ªõng gi·∫£m - C·∫ßn tƒÉng t·∫ßn su·∫•t t∆∞·ªõi!' : ''}
${trend === 'rising' ? 'üìà Xu h∆∞·ªõng tƒÉng - C√≥ th·ªÉ gi·∫£m nh·∫π l∆∞·ª£ng n∆∞·ªõc.' : ''}

üí° M·∫πo: ƒê·∫∑t ƒëƒ©a nh·ªè d∆∞·ªõi ch·∫≠u ƒë·ªÉ t√≠ch n∆∞·ªõc, c√¢y s·∫Ω t·ª± h√∫t khi c·∫ßn.`,
          priority: deviation.percentage > 30 ? 'HIGH' : 'MEDIUM',
          category: 'WATERING',
        },
        above: {
          action: '‚è∏Ô∏è Gi·∫£m t∆∞·ªõi n∆∞·ªõc',
          description: `ƒê·ªô ·∫©m ƒë·∫•t ${current}% cao h∆°n m·ª©c t·ªëi ∆∞u (${optimalMin}-${optimalMax}%). ƒê·∫•t qu√° ·∫©m c√≥ th·ªÉ g√¢y th·ªëi r·ªÖ!

üõë H√†nh ƒë·ªông c·∫ßn thi·∫øt:
‚Ä¢ D·ª´ng t∆∞·ªõi cho ƒë·∫øn khi ƒë·ªô ·∫©m gi·∫£m xu·ªëng ${optimalMax}%
‚Ä¢ Ki·ªÉm tra tho√°t n∆∞·ªõc: ƒê·∫£m b·∫£o c√≥ l·ªó tho√°t n∆∞·ªõc ·ªü ƒë√°y ch·∫≠u
‚Ä¢ TƒÉng th√¥ng gi√≥: ƒê·∫∑t c√¢y ·ªü n∆°i c√≥ gi√≥ nh·∫π
‚Ä¢ Quan s√°t: Ki·ªÉm tra l√° c√≥ d·∫•u hi·ªáu v√†ng √∫a b·∫•t th∆∞·ªùng

‚ö†Ô∏è D·∫•u hi·ªáu th·ªëi r·ªÖ: L√° v√†ng, h√©o m·∫∑c d√π ƒë·∫•t ·∫©m, m√πi h√¥i t·ª´ g·ªëc c√¢y.
${trend === 'rising' ? 'üìà C·∫£nh b√°o: ƒê·ªô ·∫©m ƒëang tƒÉng - c·∫ßn h√†nh ƒë·ªông ngay!' : ''}`,
          priority: deviation.percentage > 20 ? 'HIGH' : 'MEDIUM',
          category: 'WATERING',
        },
      },
      temperature: {
        below: {
          action: 'üî• Gi·ªØ ·∫•m cho c√¢y',
          description: `Nhi·ªát ƒë·ªô ${current}¬∞C th·∫•p h∆°n m·ª©c t·ªëi ∆∞u cho ${plantName} (${optimalMin}-${optimalMax}¬∞C).

üå°Ô∏è C√°ch gi·ªØ ·∫•m hi·ªáu qu·∫£:
‚Ä¢ Ban ng√†y: Di chuy·ªÉn c√¢y ra n∆°i c√≥ nhi·ªÅu n·∫Øng
‚Ä¢ Ban ƒë√™m: Che ph·ªß b·∫±ng v·∫£i kh√¥ng d·ªát ho·∫∑c bao nylon c√≥ l·ªó th√¥ng kh√≠
‚Ä¢ Trong nh√†: ƒê·∫∑t g·∫ßn c·ª≠a s·ªï h∆∞·ªõng nam, tr√°nh ƒëi·ªÅu h√≤a l·∫°nh
‚Ä¢ Ngo√†i tr·ªùi: Che ch·∫Øn gi√≥ l·∫°nh, s·ª≠ d·ª•ng m√†ng ph·ªß

üí° M·∫πo: ƒê·∫∑t chai n∆∞·ªõc ·∫•m b√™n c·∫°nh ch·∫≠u c√¢y v√†o ƒë√™m l·∫°nh.
${trend === 'falling' ? '‚ùÑÔ∏è C·∫£nh b√°o: Nhi·ªát ƒë·ªô ƒëang gi·∫£m - c·∫ßn b·∫£o v·ªá ngay!' : ''}

üö® D·∫•u hi·ªáu l·∫°nh: L√° c√≥ m√†u t√≠m, ƒëen, tƒÉng tr∆∞·ªüng ch·∫≠m l·∫°i.`,
          priority: current < optimalMin - 5 ? 'HIGH' : 'MEDIUM',
          category: 'TEMPERATURE',
        },
        above: {
          action: 'üå§Ô∏è H·∫° nhi·ªát ƒë·ªô',
          description: `Nhi·ªát ƒë·ªô ${current}¬∞C cao h∆°n m·ª©c t·ªëi ∆∞u cho ${plantName} (${optimalMin}-${optimalMax}¬∞C).

‚ùÑÔ∏è C√°ch l√†m m√°t hi·ªáu qu·∫£:
‚Ä¢ Che n·∫Øng: S·ª≠ d·ª•ng l∆∞·ªõi che 50-70% t·ª´ 10h-16h
‚Ä¢ TƒÉng ƒë·ªô ·∫©m: Phun s∆∞∆°ng xung quanh c√¢y (kh√¥ng phun l√™n l√°)
‚Ä¢ Di chuy·ªÉn: Chuy·ªÉn c√¢y v√†o b√≥ng r√¢m v√†o gi·ªØa tr∆∞a
‚Ä¢ T∆∞·ªõi m√°t: T∆∞·ªõi n∆∞·ªõc v√†o ƒë·∫•t xung quanh ƒë·ªÉ h·∫° nhi·ªát

${trend === 'rising' ? 'üî• C·∫£nh b√°o: Nhi·ªát ƒë·ªô ƒëang tƒÉng - c·∫ßn h√†nh ƒë·ªông ngay!' : ''}

üåø D·∫•u hi·ªáu stress nhi·ªát: L√° cu·ªôn, h√©o, r√¨a l√° ch√°y n√¢u.`,
          priority: current > optimalMax + 5 ? 'HIGH' : 'MEDIUM',
          category: 'TEMPERATURE',
        },
      },
      light: {
        below: {
          action: 'üí° TƒÉng √°nh s√°ng',
          description: `√Ånh s√°ng hi·ªán t·∫°i ${current} lux th·∫•p h∆°n nhu c·∫ßu c·ªßa ${plantName} (${optimalMin}-${optimalMax} lux).

‚òÄÔ∏è C√°ch tƒÉng √°nh s√°ng:
‚Ä¢ Di chuy·ªÉn v·ªã tr√≠: ƒê·∫∑t c√¢y g·∫ßn c·ª≠a s·ªï h∆∞·ªõng ƒë√¥ng ho·∫∑c nam
‚Ä¢ C·∫Øt t·ªâa: Lo·∫°i b·ªè c√†nh l√° che khu·∫•t √°nh s√°ng
‚Ä¢ ƒê√®n LED: S·ª≠ d·ª•ng ƒë√®n tr·ªìng c√¢y 12-14 ti·∫øng/ng√†y
‚Ä¢ Ph·∫£n x·∫°: ƒê·∫∑t g∆∞∆°ng ho·∫∑c gi·∫•y b·∫°c ph√≠a sau c√¢y

üí° M·∫πo: ƒê√®n LED tr·∫Øng ·∫•m (3000-4000K) t·ªët cho h·∫ßu h·∫øt c√¢y gia v·ªã.
${trend === 'falling' ? 'üìâ Ch√∫ √Ω: √Ånh s√°ng ƒëang gi·∫£m - c√≥ th·ªÉ do th·ªùi ti·∫øt √¢m u.' : ''}

üå± D·∫•u hi·ªáu thi·∫øu s√°ng: L√° v√†ng, th√¢n c√¢y cao ·ªëm, √≠t ra hoa.`,
          priority: current < optimalMin * 0.7 ? 'HIGH' : 'MEDIUM',
          category: 'LIGHT',
        },
        above: {
          action: 'üèñÔ∏è Che ch·∫Øn √°nh s√°ng',
          description: `√Ånh s√°ng ${current} lux qu√° m·∫°nh cho ${plantName} (t·ªëi ƒëa ${optimalMax} lux).

üåÇ C√°ch che ch·∫Øn:
‚Ä¢ L∆∞·ªõi che: S·ª≠ d·ª•ng l∆∞·ªõi che 30-50% v√†o gi·ªØa tr∆∞a
‚Ä¢ Di chuy·ªÉn: Chuy·ªÉn c√¢y v√†o b√≥ng r√¢m t·ª´ 11h-15h
‚Ä¢ Che t·ª± nhi√™n: Tr·ªìng c√¢y cao b√™n c·∫°nh ƒë·ªÉ t·∫°o b√≥ng
‚Ä¢ R√®m c·ª≠a: D√πng r√®m m·ªèng che c·ª≠a s·ªï v√†o tr∆∞a

${trend === 'rising' ? '‚òÄÔ∏è C·∫£nh b√°o: √Ånh s√°ng ƒëang tƒÉng m·∫°nh!' : ''}

üçÉ D·∫•u hi·ªáu qu√° s√°ng: L√° b·ªã ch√°y, c√≥ ƒë·ªëm n√¢u, cu·ªôn l·∫°i.`,
          priority: current > optimalMax * 1.3 ? 'HIGH' : 'MEDIUM',
          category: 'LIGHT',
        },
      },
      humidity: {
        below: {
          action: 'üí® TƒÉng ƒë·ªô ·∫©m kh√¥ng kh√≠',
          description: `ƒê·ªô ·∫©m kh√¥ng kh√≠ ${current}% th·∫•p h∆°n m·ª©c t·ªëi ∆∞u cho ${plantName} (${optimalMin}-${optimalMax}%).

üíß C√°ch tƒÉng ƒë·ªô ·∫©m:
‚Ä¢ Khay n∆∞·ªõc: ƒê·∫∑t khay n∆∞·ªõc xung quanh c√¢y (c√°ch ch·∫≠u 10-15cm)
‚Ä¢ Phun s∆∞∆°ng: Phun s∆∞∆°ng nh·∫π 2-3 l·∫ßn/ng√†y (tr√°nh phun l√™n l√°)
‚Ä¢ Nh√≥m c√¢y: ƒê·∫∑t nhi·ªÅu c√¢y g·∫ßn nhau
‚Ä¢ M√°y phun s∆∞∆°ng: S·ª≠ d·ª•ng m√°y t·∫°o ·∫©m n·∫øu c√≥ th·ªÉ

üåø L∆∞u √Ω: Kh√¥ng phun n∆∞·ªõc tr·ª±c ti·∫øp l√™n l√° ${plantName} v√†o bu·ªïi t·ªëi.
${trend === 'falling' ? 'üìâ Ch√∫ √Ω: ƒê·ªô ·∫©m ƒëang gi·∫£m - c√≥ th·ªÉ do th·ªùi ti·∫øt kh√¥.' : ''}`,
          priority: 'MEDIUM',
          category: 'HUMIDITY',
        },
        above: {
          action: 'üå¨Ô∏è Gi·∫£m ƒë·ªô ·∫©m kh√¥ng kh√≠',
          description: `ƒê·ªô ·∫©m kh√¥ng kh√≠ ${current}% cao h∆°n m·ª©c t·ªëi ∆∞u (${optimalMin}-${optimalMax}%). C√≥ th·ªÉ g√¢y n·∫•m m·ªëc!

üå™Ô∏è C√°ch gi·∫£m ƒë·ªô ·∫©m:
‚Ä¢ TƒÉng th√¥ng gi√≥: M·ªü c·ª≠a s·ªï, s·ª≠ d·ª•ng qu·∫°t
‚Ä¢ Gi·∫£m t∆∞·ªõi: Ch·ªâ t∆∞·ªõi khi ƒë·∫•t th·ª±c s·ª± kh√¥
‚Ä¢ T√°ch c√¢y: Kh√¥ng ƒë·ªÉ c√¢y qu√° g·∫ßn nhau
‚Ä¢ H√∫t ·∫©m: S·ª≠ d·ª•ng m√°y h√∫t ·∫©m n·∫øu c√≥

‚ö†Ô∏è D·∫•u hi·ªáu n·∫•m m·ªëc: ƒê·ªëm tr·∫Øng, x√°m tr√™n l√°, m√πi ·∫©m m·ªëc.
${trend === 'rising' ? 'üìà C·∫£nh b√°o: ƒê·ªô ·∫©m ƒëang tƒÉng cao!' : ''}`,
          priority: current > optimalMax + 15 ? 'HIGH' : 'MEDIUM',
          category: 'HUMIDITY',
        },
      },
      soil_ph: {
        below: {
          action: 'üìà TƒÉng pH ƒë·∫•t (gi·∫£m t√≠nh acid)',
          description: `pH ƒë·∫•t ${current} qu√° acid cho ${plantName} (t·ªëi ∆∞u ${optimalMin}-${optimalMax}).

‚öóÔ∏è C√°ch tƒÉng pH (gi·∫£m acid):
‚Ä¢ V√¥i b·ªôt: R·∫Øc 1-2g v√¥i b·ªôt m·ªãn/1kg ƒë·∫•t, tr·ªôn ƒë·ªÅu
‚Ä¢ Baking soda: Pha 1g/1L n∆∞·ªõc, t∆∞·ªõi 1 tu·∫ßn/l·∫ßn
‚Ä¢ Tro g·ªó: Tr·ªôn tro g·ªó (1 mu·ªóng c√† ph√™/ch·∫≠u nh·ªè)
‚Ä¢ Ph√¢n compost: S·ª≠ d·ª•ng compost c√≥ t√≠nh ki·ªÅm nh·∫π

‚è∞ Ki·ªÉm tra: ƒêo l·∫°i pH sau 3-5 ng√†y ƒë·ªÉ ƒëi·ªÅu ch·ªânh.
üß™ M·ª•c ti√™u: TƒÉng t·ª´ t·ª´ 0.2-0.5 ƒë∆°n v·ªã/tu·∫ßn.`,
          priority: current < optimalMin - 0.5 ? 'HIGH' : 'MEDIUM',
          category: 'SOIL_TREATMENT',
        },
        above: {
          action: 'üìâ Gi·∫£m pH ƒë·∫•t (tƒÉng t√≠nh acid)',
          description: `pH ƒë·∫•t ${current} qu√° ki·ªÅm cho ${plantName} (t·ªëi ∆∞u ${optimalMin}-${optimalMax}).

üçã C√°ch gi·∫£m pH (tƒÉng acid):
‚Ä¢ Gi·∫•m: Pha 5ml gi·∫•m tr·∫Øng/1L n∆∞·ªõc, t∆∞·ªõi 1 tu·∫ßn/l·∫ßn
‚Ä¢ B√£ c√† ph√™: Tr·ªôn b√£ c√† ph√™ kh√¥ v√†o ƒë·∫•t
‚Ä¢ Ph√¢n compost acid: S·ª≠ d·ª•ng compost t·ª´ l√° th√¥ng, v·ªè cam
‚Ä¢ L∆∞u hu·ª≥nh: R·∫Øc b·ªôt l∆∞u hu·ª≥nh (0.5g/1kg ƒë·∫•t)

‚è∞ Ki·ªÉm tra: ƒêo l·∫°i pH sau 3-5 ng√†y ƒë·ªÉ ƒëi·ªÅu ch·ªânh.
üéØ M·ª•c ti√™u: Gi·∫£m t·ª´ t·ª´ 0.2-0.5 ƒë∆°n v·ªã/tu·∫ßn.`,
          priority: current > optimalMax + 0.5 ? 'HIGH' : 'MEDIUM',
          category: 'SOIL_TREATMENT',
        },
      },
    };

    const template = adviceTemplates[sensorType];
    if (!template) return null;

    const advice = template[deviation.type];
    if (!advice) return null;

    return {
      id,
      action: advice.action,
      description: advice.description,
      reason: `${sensorType.toUpperCase()}: ${current} (m·ª•c ti√™u: ${optimalMin}-${optimalMax}) - ${deviation.type === 'below' ? 'th·∫•p' : 'cao'} ${Math.round(deviation.percentage)}%.`,
      priority: advice.priority,
      suggestedTime: this.getSuggestedTimeForAction(advice.category),
      category: advice.category,
    };
  }

  private generateDailyCareAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { activities } = context;
    const plantDisplayName = context.garden.plantName;
    const now = new Date();

    // Ph√¢n t√≠ch ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
    const lastWatering = activities.find((a) => a.activityType === 'WATERING');
    const lastFertilizing = activities.find(
      (a) => a.activityType === 'FERTILIZING',
    );
    const lastPruning = activities.find((a) => a.activityType === 'PRUNING');

    // L·ªùi khuy√™n v·ªÅ t∆∞·ªõi n∆∞·ªõc
    if (lastWatering) {
      const hoursAgo = Math.floor(
        (now.getTime() - lastWatering.timestamp.getTime()) / (1000 * 60 * 60),
      );

      if (hoursAgo > 48) {
        advices.push({
          id: startId++,
          action: 'üíß Ki·ªÉm tra nhu c·∫ßu t∆∞·ªõi n∆∞·ªõc',
          description: `L·∫ßn t∆∞·ªõi n∆∞·ªõc g·∫ßn nh·∫•t cho ${plantDisplayName} l√† ${Math.floor(hoursAgo / 24)} ng√†y tr∆∞·ªõc. 

üîç C√°ch ki·ªÉm tra:
‚Ä¢ Test ng√≥n tay: ƒê·∫∑t ng√≥n tay s√¢u 2-3cm v√†o ƒë·∫•t
‚Ä¢ Quan s√°t: ƒê·∫•t n·ª©t n·∫ª ho·∫∑c co r√∫t kh·ªèi th√†nh ch·∫≠u
‚Ä¢ C·∫£m nh·∫≠n: Ch·∫≠u c√¢y nh·∫π h∆°n b√¨nh th∆∞·ªùng
‚Ä¢ L√° c√¢y: H∆°i h√©o v√†o bu·ªïi chi·ªÅu

üí° Nguy√™n t·∫Øc v√†ng: "T∆∞·ªõi khi c·∫ßn, kh√¥ng t∆∞·ªõi theo l·ªãch!"
‚è∞ Th·ªùi ƒëi·ªÉm t·ªët nh·∫•t: 6-8h s√°ng ho·∫∑c 17-19h chi·ªÅu.`,
          reason: `ƒê√£ ${Math.floor(hoursAgo / 24)} ng√†y t·ª´ l·∫ßn t∆∞·ªõi cu·ªëi - c·∫ßn ki·ªÉm tra ƒë·ªô ·∫©m ƒë·∫•t.`,
          priority: hoursAgo > 72 ? 'HIGH' : 'MEDIUM',
          suggestedTime: 'morning',
          category: 'WATERING',
        });
      }
    } else {
      advices.push({
        id: startId++,
        action: 'üìù B·∫Øt ƒë·∫ßu ghi nh·∫≠t k√Ω t∆∞·ªõi n∆∞·ªõc',
        description: `T√¥i ch∆∞a th·∫•y b·∫°n ghi l·∫°i ho·∫°t ƒë·ªông t∆∞·ªõi n∆∞·ªõc cho ${plantDisplayName}. Vi·ªác ghi ch√©p s·∫Ω gi√∫p b·∫°n:

üìä L·ª£i √≠ch:
‚Ä¢ Theo d√µi: Bi·∫øt ƒë∆∞·ª£c t·∫ßn su·∫•t t∆∞·ªõi ph√π h·ª£p
‚Ä¢ Ph√°t hi·ªán v·∫•n ƒë·ªÅ: S·ªõm nh·∫≠n ra b·∫•t th∆∞·ªùng
‚Ä¢ C·∫£i thi·ªán: ƒêi·ªÅu ch·ªânh c√°ch chƒÉm s√≥c hi·ªáu qu·∫£
‚Ä¢ H·ªçc h·ªèi: T√≠ch l≈©y kinh nghi·ªám qu√Ω b√°u

üì± Ghi ch√©p n√™n bao g·ªìm:
- Th·ªùi gian t∆∞·ªõi
- L∆∞·ª£ng n∆∞·ªõc ƒë√£ d√πng
- T√¨nh tr·∫°ng ƒë·∫•t tr∆∞·ªõc khi t∆∞·ªõi
- Ph·∫£n ·ª©ng c·ªßa c√¢y sau khi t∆∞·ªõi`,
        reason:
          'Ghi nh·∫≠t k√Ω gi√∫p t·ªëi ∆∞u h√≥a vi·ªác chƒÉm s√≥c v√† ph√°t tri·ªÉn k·ªπ nƒÉng.',
        priority: 'LOW',
        suggestedTime: 'evening',
        category: 'ACTIVITY',
      });
    }

    // L·ªùi khuy√™n v·ªÅ quan s√°t h√†ng ng√†y
    advices.push({
      id: startId++,
      action: 'üëÄ Quan s√°t s·ª©c kh·ªèe c√¢y h√†ng ng√†y',
      description: `D√†nh 5-10 ph√∫t m·ªói s√°ng ƒë·ªÉ quan s√°t ${plantDisplayName} c·ªßa b·∫°n:

üîç Checklist h√†ng ng√†y:
‚úÖ L√°: M√†u s·∫Øc, h√¨nh d√°ng, c√≥ ƒë·ªëm b·ªánh kh√¥ng?
‚úÖ Th√¢n c√¢y: V·ªØng ch·∫Øc, c√≥ d·∫•u hi·ªáu c√¥n tr√πng kh√¥ng?
‚úÖ ƒê·∫•t: ƒê·ªô ·∫©m, m√†u s·∫Øc, m√πi
‚úÖ Hoa/qu·∫£: Ph√°t tri·ªÉn b√¨nh th∆∞·ªùng kh√¥ng?
‚úÖ M√¥i tr∆∞·ªùng: √Ånh s√°ng, nhi·ªát ƒë·ªô c√≥ ph√π h·ª£p?

üåü Th·ªùi ƒëi·ªÉm t·ªët nh·∫•t: S√°ng s·ªõm khi c√¢y "t·ªânh gi·∫•c" - b·∫°n s·∫Ω th·∫•y ƒë∆∞·ª£c tr·∫°ng th√°i t·ª± nhi√™n nh·∫•t.

üì∑ M·∫πo: Ch·ª•p ·∫£nh ƒë·ªÉ so s√°nh s·ª± ph√°t tri·ªÉn qua t·ª´ng ng√†y!`,
      reason: `Quan s√°t h√†ng ng√†y gi√∫p ph√°t hi·ªán s·ªõm v·∫•n ƒë·ªÅ v√† theo d√µi s·ª± ph√°t tri·ªÉn.`,
      priority: 'MEDIUM',
      suggestedTime: 'morning',
      category: 'MONITORING',
    });

    return advices;
  }

  private generateWeatherAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { weatherData, forecasts } = context;
    const plantDisplayName = context.garden.plantName;

    // D·ª± b√°o m∆∞a trong 24h t·ªõi
    const rainForecast = forecasts.hourly
      .filter((h) => h.pop > 0.3)
      .slice(0, 6);
    if (rainForecast.length > 0) {
      const avgPop =
        rainForecast.reduce((sum, h) => sum + h.pop, 0) / rainForecast.length;
      const nextRainHours = Math.floor(
        (rainForecast[0].forecastFor.getTime() - new Date().getTime()) /
          (1000 * 60 * 60),
      );

      if (avgPop > 0.7) {
        advices.push({
          id: startId++,
          action: '‚òî Chu·∫©n b·ªã cho m∆∞a l·ªõn',
          description: `D·ª± b√°o m∆∞a l·ªõn trong ${nextRainHours}h t·ªõi v·ªõi x√°c su·∫•t ${Math.round(avgPop * 100)}%!

üõ°Ô∏è Chu·∫©n b·ªã ngay:
‚Ä¢ Che ch·∫Øn: Di chuy·ªÉn ${plantDisplayName} v√†o n∆°i c√≥ m√°i che
‚Ä¢ Tho√°t n∆∞·ªõc: Ki·ªÉm tra l·ªó tho√°t n∆∞·ªõc ·ªü ƒë√°y ch·∫≠u
‚Ä¢ Ch·ªëng ƒë·ª°: C·ªë ƒë·ªãnh c√¢y cao b·∫±ng c·ªçc tre
‚Ä¢ Thu ho·∫°ch: H√°i nh·ªØng qu·∫£/l√° ƒë√£ ch√≠n ƒë·ªÉ tr√°nh h∆∞ h·ªèng

üíß Sau m∆∞a: Ki·ªÉm tra t√¨nh tr·∫°ng √∫ng ng·∫≠p v√† tho√°t n∆∞·ªõc k·ªãp th·ªùi.
üåà L·ª£i √≠ch: N∆∞·ªõc m∆∞a t·ª± nhi√™n r·∫•t t·ªët cho c√¢y - ch·ª©a √≠t ch·∫•t h√≥a h·ªçc!`,
          reason: `M∆∞a l·ªõn ${Math.round(avgPop * 100)}% trong ${nextRainHours}h - c·∫ßn b·∫£o v·ªá c√¢y.`,
          priority: 'HIGH',
          suggestedTime: 'morning',
          category: 'WEATHER_FORECAST',
        });
      } else if (avgPop > 0.4) {
        advices.push({
          id: startId++,
          action: 'üå¶Ô∏è T·∫≠n d·ª•ng n∆∞·ªõc m∆∞a',
          description: `C√≥ ${Math.round(avgPop * 100)}% kh·∫£ nƒÉng m∆∞a v·ª´a trong ${nextRainHours}h t·ªõi - c∆° h·ªôi tuy·ªát v·ªùi!

üåßÔ∏è T·∫≠n d·ª•ng n∆∞·ªõc m∆∞a:
‚Ä¢ Ho√£n t∆∞·ªõi: C√≥ th·ªÉ b·ªè qua vi·ªác t∆∞·ªõi n∆∞·ªõc s√°ng nay
‚Ä¢ Thu n∆∞·ªõc: ƒê·∫∑t thau/ch·∫≠u ƒë·ªÉ h·ª©ng n∆∞·ªõc m∆∞a
‚Ä¢ Quan s√°t: Xem ${plantDisplayName} ph·∫£n ·ª©ng v·ªõi n∆∞·ªõc m∆∞a t·ª± nhi√™n
‚Ä¢ B√≥n ph√¢n: C√≥ th·ªÉ b√≥n ph√¢n l·ªèng lo√£ng tr∆∞·ªõc m∆∞a ƒë·ªÉ dinh d∆∞·ª°ng th·∫•m s√¢u

üí° N∆∞·ªõc m∆∞a vs n∆∞·ªõc m√°y: N∆∞·ªõc m∆∞a c√≥ pH trung t√≠nh, √≠t chlorine - t·ªët h∆°n cho c√¢y!`,
          reason: `M∆∞a v·ª´a ${Math.round(avgPop * 100)}% - c∆° h·ªôi ti·∫øt ki·ªám n∆∞·ªõc v√† cung c·∫•p n∆∞·ªõc t·ª± nhi√™n.`,
          priority: 'MEDIUM',
          suggestedTime: 'morning',
          category: 'WEATHER_FORECAST',
        });
      }
    }

    // C·∫£nh b√°o th·ªùi ti·∫øt c·ª±c ƒëoan
    if (weatherData) {
      const { temp, windSpeed } = weatherData;

      if (temp > 35) {
        advices.push({
          id: startId++,
          action: 'üî• B·∫£o v·ªá kh·ªèi n·∫Øng n√≥ng c·ª±c ƒëoan',
          description: `Nhi·ªát ƒë·ªô hi·ªán t·∫°i ${temp}¬∞C - m·ª©c nguy hi·ªÉm cho h·∫ßu h·∫øt c√¢y tr·ªìng!

üö® H√†nh ƒë·ªông kh·∫©n c·∫•p:
‚Ä¢ Di chuy·ªÉn ngay: Chuy·ªÉn ${plantDisplayName} v√†o b√≥ng m√°t
‚Ä¢ Che n·∫Øng 80%: S·ª≠ d·ª•ng l∆∞·ªõi che ƒë·∫≠m ho·∫∑c t·∫•m b·∫°t
‚Ä¢ T∆∞·ªõi l√†m m√°t: T∆∞·ªõi ƒë·∫•t xung quanh (KH√îNG t∆∞·ªõi l√™n l√°)
‚Ä¢ T·∫°o vi kh√≠ h·∫≠u: ƒê·∫∑t khay n∆∞·ªõc ƒë√° xung quanh ch·∫≠u

‚ùÑÔ∏è M·∫πo h·∫° nhi·ªát nhanh:
- Qu·∫•n khƒÉn ∆∞·ªõt quanh ch·∫≠u
- ƒê·∫∑t c√¢y trong khay n∆∞·ªõc s√¢u 2-3cm
- S·ª≠ d·ª•ng qu·∫°t t·∫°o gi√≥ nh·∫π

‚ö†Ô∏è D·∫•u hi·ªáu c√¢y b·ªã n√≥ng: L√° cu·ªôn, h√©o, r√¨a l√° ch√°y n√¢u.`,
          reason: `Nhi·ªát ƒë·ªô ${temp}¬∞C c√≥ th·ªÉ g√¢y ch·∫øt c√¢y trong v√†i gi·ªù.`,
          priority: 'HIGH',
          suggestedTime: 'noon',
          category: 'EMERGENCY',
        });
      }

      if (windSpeed > 15) {
        advices.push({
          id: startId++,
          action: 'üí® B·∫£o v·ªá kh·ªèi gi√≥ m·∫°nh',
          description: `Gi√≥ m·∫°nh ${windSpeed} m/s c√≥ th·ªÉ l√†m t·ªïn h·∫°i ${plantDisplayName}!

üå™Ô∏è B·∫£o v·ªá ngay:
‚Ä¢ C·ªë ƒë·ªãnh: Bu·ªôc c√¢y v√†o c·ªçc ch·∫Øc ch·∫Øn b·∫±ng d√¢y m·ªÅm
‚Ä¢ Di chuy·ªÉn: Chuy·ªÉn ch·∫≠u nh·ªè v√†o n∆°i k√≠n gi√≥
‚Ä¢ Che ch·∫Øn: D·ª±ng t·∫•m ch·∫Øn gi√≥ b·∫±ng v·∫≠t li·ªáu c√≥ s·∫µn
‚Ä¢ Ki·ªÉm tra: ƒê·∫£m b·∫£o c√°c t·∫•m che n·∫Øng ƒë∆∞·ª£c bu·ªôc ch·∫∑t

üîß Sau gi√≥ l·ªõn:
- Ki·ªÉm tra c√†nh g√£y, l√° r√°ch
- T·ªâa b·ªè ph·∫ßn h∆∞ h·ªèng
- Ki·ªÉm tra h·ªá th·ªëng c·ªë ƒë·ªãnh
- Quan s√°t d·∫•u hi·ªáu stress c·ªßa c√¢y`,
          reason: `Gi√≥ ${windSpeed} m/s c√≥ th·ªÉ g√¢y g√£y c√†nh v√† ƒë·ªï c√¢y.`,
          priority: 'HIGH',
          suggestedTime: 'noon',
          category: 'WEATHER_FORECAST',
        });
      }
    }

    return advices;
  }

  private generateGrowthStageAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { garden, growthStage } = context;
    const plantDisplayName = garden.plantName;
    const stageName = garden.plantGrowStage;
    const { daysSincePlanting } = analysis;

    // L·ªùi khuy√™n chi ti·∫øt theo giai ƒëo·∫°n
    const stageAdvice = this.getDetailedStageAdvice(
      stageName,
      plantDisplayName,
      daysSincePlanting,
    );
    if (stageAdvice) {
      advices.push({
        id: startId++,
        action: stageAdvice.action,
        description: stageAdvice.description,
        reason: stageAdvice.reason,
        priority: 'MEDIUM',
        suggestedTime: 'morning',
        category: 'GROWTH_STAGE',
      });
    }

    // L·ªùi khuy√™n v·ªÅ th·ªùi gian d·ª± ki·∫øn chuy·ªÉn giai ƒëo·∫°n
    if (growthStage.duration && daysSincePlanting > 0) {
      const progressPercent = Math.min(
        (daysSincePlanting / growthStage.duration) * 100,
        100,
      );
      const daysRemaining = Math.max(
        growthStage.duration - daysSincePlanting,
        0,
      );

      if (progressPercent > 80) {
        advices.push({
          id: startId++,
          action: 'üîÑ Chu·∫©n b·ªã chuy·ªÉn giai ƒëo·∫°n',
          description: `${plantDisplayName} ƒë√£ ho√†n th√†nh ${Math.round(progressPercent)}% giai ƒëo·∫°n ${stageName}!

‚è≥ Th·ªùi gian c√≤n l·∫°i: Kho·∫£ng ${daysRemaining} ng√†y n·ªØa
üîç D·∫•u hi·ªáu c·∫ßn quan s√°t: ${this.getStageTransitionSigns(stageName)}

üìã Chu·∫©n b·ªã cho giai ƒëo·∫°n ti·∫øp theo:
${this.getNextStagePreparation(stageName, plantDisplayName)}

üí° L∆∞u √Ω: Th·ªùi gian chuy·ªÉn giai ƒëo·∫°n c√≥ th·ªÉ thay ƒë·ªïi t√πy thu·ªôc v√†o ƒëi·ªÅu ki·ªán chƒÉm s√≥c v√† th·ªùi ti·∫øt.`,
          reason: `Giai ƒëo·∫°n ${stageName} s·∫Øp k·∫øt th√∫c - c·∫ßn chu·∫©n b·ªã chuy·ªÉn ƒë·ªïi.`,
          priority: 'MEDIUM',
          suggestedTime: 'morning',
          category: 'GROWTH_STAGE',
        });
      }
    }

    return advices;
  }

  private getDetailedStageAdvice(
    stageName: string,
    plantName: string,
    days: number,
  ) {
    const stageAdviceMap = {
      Seeding: {
        action: 'üå± ChƒÉm s√≥c c√¢y con',
        description: `Giai ƒëo·∫°n n·∫£y m·∫ßm c·ªßa ${plantName} r·∫•t quan tr·ªçng v√† nh·∫°y c·∫£m!

üéØ M·ª•c ti√™u: Gi√∫p c√¢y con ph√°t tri·ªÉn r·ªÖ v√† l√° ƒë·∫ßu ti√™n kh·ªèe m·∫°nh

üåø ChƒÉm s√≥c ƒë·∫∑c bi·ªát:
‚Ä¢ ƒê·ªô ·∫©m: Gi·ªØ ƒë·∫•t ·∫©m nh·∫π, kh√¥ng ƒë·ªÉ kh√¥ ho·∫∑c √∫ng n∆∞·ªõc
‚Ä¢ √Ånh s√°ng: √Ånh s√°ng gi√°n ti·∫øp, tr√°nh n·∫Øng tr·ª±c ti·∫øp
‚Ä¢ Nhi·ªát ƒë·ªô: ·ªîn ƒë·ªãnh 20-25¬∞C, tr√°nh thay ƒë·ªïi ƒë·ªôt ng·ªôt
‚Ä¢ Kh√¥ng b√≥n ph√¢n: H·∫°t ƒë√£ c√≥ ƒë·ªß dinh d∆∞·ª°ng ban ƒë·∫ßu

‚ö†Ô∏è Tr√°nh l√†m:
- T∆∞·ªõi n∆∞·ªõc qu√° m·∫°nh (d√πng b√¨nh x·ªãt)
- Di chuy·ªÉn c√¢y qu√° nhi·ªÅu
- B√≥n ph√¢n s·ªõm
- ƒê·ªÉ gi√≥ l·∫°nh th·ªïi tr·ª±c ti·∫øp

üí° M·∫πo: Che ph·ªß b·∫±ng m√†ng b·ªçc th·ª±c ph·∫©m ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng nh√† k√≠nh mini!`,
        reason: `Giai ƒëo·∫°n n·∫£y m·∫ßm (${days} ng√†y) - th·ªùi k·ª≥ quan tr·ªçng nh·∫•t quy·∫øt ƒë·ªãnh th√†nh c√¥ng.`,
      },
      Vegetative: {
        action: 'üåø Th√∫c ƒë·∫©y sinh tr∆∞·ªüng xanh',
        description: `Giai ƒëo·∫°n sinh tr∆∞·ªüng c·ªßa ${plantName} - th·ªùi ƒëi·ªÉm ph√°t tri·ªÉn m·∫°nh m·∫Ω nh·∫•t!

üéØ M·ª•c ti√™u: X√¢y d·ª±ng h·ªá th·ªëng l√° v√† th√¢n ch·∫Øc kh·ªèe

üå± ChƒÉm s√≥c t√≠ch c·ª±c:
‚Ä¢ B√≥n ph√¢n ƒë·∫°m: NPK 20-10-10 ho·∫∑c ph√¢n ƒë·∫°m cao, 1-2 tu·∫ßn/l·∫ßn
‚Ä¢ T∆∞·ªõi n∆∞·ªõc ƒë·∫ßy ƒë·ªß: ƒê·∫•t lu√¥n ·∫©m nh∆∞ng kh√¥ng √∫ng
‚Ä¢ √Ånh s√°ng: T·ªëi thi·ªÉu 6-8 ti·∫øng √°nh s√°ng tr·ª±c ti·∫øp/ng√†y
‚Ä¢ T·ªâa c√†nh: Lo·∫°i b·ªè l√° gi√†, c√†nh y·∫øu ƒë·ªÉ t·∫≠p trung dinh d∆∞·ª°ng

üîß K·ªπ thu·∫≠t chƒÉm s√≥c:
- T·ªâa ng·ªçn: V·ªõi c√¢y th·∫£o m·ªôc ƒë·ªÉ khuy·∫øn kh√≠ch ph√¢n c√†nh
- B·∫•m hoa: Lo·∫°i b·ªè n·ª• hoa s·ªõm ƒë·ªÉ t·∫≠p trung v√†o l√°
- X·ªõi ƒë·∫•t: Nh·∫π nh√†ng ƒë·ªÉ tƒÉng oxy cho r·ªÖ
- Ki·ªÉm so√°t s√¢u b·ªánh: Phun thu·ªëc ph√≤ng tr·ª´ sinh h·ªçc

üí™ D·∫•u hi·ªáu ph√°t tri·ªÉn t·ªët: L√° xanh ƒë·∫≠m, th√¢n c·ª©ng, nhi·ªÅu ch·ªìi m·ªõi.`,
        reason: `Giai ƒëo·∫°n sinh tr∆∞·ªüng (${days} ng√†y) - t·ªëi ∆∞u h√≥a ph√°t tri·ªÉn th√¢n l√°.`,
      },
      Flowering: {
        action: 'üå∏ K√≠ch th√≠ch ra hoa',
        description: `${plantName} b∆∞·ªõc v√†o giai ƒëo·∫°n ra hoa - th·ªùi ƒëi·ªÉm quy·∫øt ƒë·ªãnh nƒÉng su·∫•t!

üéØ M·ª•c ti√™u: T·∫°o ƒëi·ªÅu ki·ªán t·ªëi ∆∞u cho vi·ªác ra hoa v√† th·ª• ph·∫•n

üå∫ ChƒÉm s√≥c ƒë·∫∑c bi·ªát:
‚Ä¢ Thay ƒë·ªïi dinh d∆∞·ª°ng: Gi·∫£m ƒë·∫°m, tƒÉng l√¢n-kali (NPK 5-20-20)
‚Ä¢ Ki·ªÉm so√°t n∆∞·ªõc: Gi·∫£m nh·∫π l∆∞·ª£ng n∆∞·ªõc ƒë·ªÉ t·∫°o stress nh·∫π k√≠ch th√≠ch ra hoa
‚Ä¢ √Ånh s√°ng ƒë·∫ßy ƒë·ªß: ƒê·∫£m b·∫£o 8-10 ti·∫øng √°nh s√°ng/ng√†y
‚Ä¢ ·ªîn ƒë·ªãnh nhi·ªát ƒë·ªô: Tr√°nh bi·∫øn ƒë·ªông nhi·ªát ƒë·ªô ƒë·ªôt ng·ªôt

üêù H·ªó tr·ª£ th·ª• ph·∫•n:
- T·ª± nhi√™n: Thu h√∫t ong b∆∞·ªõm b·∫±ng c√¢y hoa kh√°c
- Nh√¢n t·∫°o: D√πng c·ªç v·∫Ω chuy·ªÉn ph·∫•n hoa (cho c√† chua, ·ªõt)
- Rung nh·∫π: Rung nh·∫π c√¢y v√†o bu·ªïi s√°ng ƒë·ªÉ ph·∫•n bay

‚ö†Ô∏è Tr√°nh:
- B√≥n ph√¢n ƒë·∫°m cao (l√†m c√¢y ra l√° thay v√¨ hoa)
- T∆∞·ªõi n∆∞·ªõc l√™n hoa
- Di chuy·ªÉn c√¢y khi ƒëang c√≥ hoa`,
        reason: `Giai ƒëo·∫°n ra hoa (${days} ng√†y) - quy·∫øt ƒë·ªãnh kh·∫£ nƒÉng ƒë·∫≠u qu·∫£.`,
      },
      Fruiting: {
        action: 'üçÖ ChƒÉm s√≥c qu·∫£ ph√°t tri·ªÉn',
        description: `${plantName} ƒëang ra qu·∫£ - giai ƒëo·∫°n thu ho·∫°ch th√†nh qu·∫£!

üéØ M·ª•c ti√™u: ƒê·∫£m b·∫£o qu·∫£ ph√°t tri·ªÉn ƒë·∫ßy ƒë·∫∑n v√† ch·∫•t l∆∞·ª£ng cao

üçÉ ChƒÉm s√≥c chuy√™n s√¢u:
‚Ä¢ Dinh d∆∞·ª°ng kali cao: NPK 10-10-30 ho·∫∑c ph√¢n kali chuy√™n d·ª•ng
‚Ä¢ T∆∞·ªõi ƒë·ªÅu ƒë·∫∑n: Kh√¥ng ƒë·ªÉ ƒë·∫•t kh√¥ ƒë·ªôt ng·ªôt (g√¢y n·ª©t qu·∫£)
‚Ä¢ Ch·ªëng ƒë·ª°: D·ª±ng gi√†n ho·∫∑c c·ªçc cho c√†nh n·∫∑ng qu·∫£
‚Ä¢ T·ªâa l√°: Lo·∫°i b·ªè l√° che khu·∫•t qu·∫£ ƒë·ªÉ tƒÉng √°nh s√°ng

üìè Qu·∫£n l√Ω qu·∫£:
- T·ªâa qu·∫£: Lo·∫°i b·ªè qu·∫£ nh·ªè, d·ªã d·∫°ng ƒë·ªÉ t·∫≠p trung dinh d∆∞·ª°ng
- Che n·∫Øng: D√πng l∆∞·ªõi 30% n·∫øu qu√° n·∫Øng g·∫Øt
- Thu ho·∫°ch ƒë√∫ng l√∫c: ${this.getHarvestTiming(plantName)}

üîç Quan s√°t h√†ng ng√†y:
- M√†u s·∫Øc qu·∫£ thay ƒë·ªïi
- K√≠ch th∆∞·ªõc v√† ƒë·ªô ch·∫Øc
- D·∫•u hi·ªáu s√¢u b·ªánh tr√™n qu·∫£`,
        reason: `Giai ƒëo·∫°n ra qu·∫£ (${days} ng√†y) - t·ªëi ∆∞u h√≥a ch·∫•t l∆∞·ª£ng v√† nƒÉng su·∫•t.`,
      },
      Maturity: {
        action: 'üèÜ Thu ho·∫°ch v√† duy tr√¨',
        description: `${plantName} ƒë√£ tr∆∞·ªüng th√†nh - th·ªùi ƒëi·ªÉm thu ho·∫°ch v√† l·∫≠p k·∫ø ho·∫°ch ti·∫øp theo!

üéØ M·ª•c ti√™u: Thu ho·∫°ch t·ªëi ƒëa v√† chu·∫©n b·ªã chu k·ª≥ m·ªõi

üåæ Qu·∫£n l√Ω thu ho·∫°ch:
‚Ä¢ Thu ho·∫°ch ƒë√∫ng l√∫c: ${this.getMaturityHarvestGuide(plantName)}
‚Ä¢ B·∫£o qu·∫£n sau thu ho·∫°ch: K·ªπ thu·∫≠t l∆∞u tr·ªØ th√≠ch h·ª£p
‚Ä¢ Thu th·∫≠p h·∫°t gi·ªëng: N·∫øu mu·ªën nh√¢n gi·ªëng
‚Ä¢ Chu·∫©n b·ªã ƒë·∫•t: Cho chu k·ª≥ tr·ªìng ti·∫øp theo

üîÑ L·∫≠p k·∫ø ho·∫°ch ti·∫øp theo:
- Ph√¢n t√≠ch: ƒê√°nh gi√° th√†nh c√¥ng/th·∫•t b·∫°i c·ªßa chu k·ª≥
- C·∫£i thi·ªán ƒë·∫•t: B·ªï sung ph√¢n compost, vi sinh
- Lu√¢n canh: Thay ƒë·ªïi lo·∫°i c√¢y ƒë·ªÉ ƒë·∫•t kh√¥ng b·ªã c·∫°n ki·ªát
- Ghi ch√©p: T·ªïng k·∫øt kinh nghi·ªám ƒë·ªÉ √°p d·ª•ng l·∫ßn sau

üí° Kinh nghi·ªám: Chu k·ª≥ th√†nh c√¥ng l√† n·ªÅn t·∫£ng cho nh·ªØng v·ª• m√πa t·ªët h∆°n!`,
        reason: `Giai ƒëo·∫°n tr∆∞·ªüng th√†nh (${days} ng√†y) - t·∫≠n d·ª•ng t·ªëi ƒëa v√† chu·∫©n b·ªã t∆∞∆°ng lai.`,
      },
    };

    return stageAdviceMap[stageName] || null;
  }

  private getStageTransitionSigns(stageName: string): string {
    const transitionSigns = {
      Seeding:
        'L√° th·∫≠t ƒë·∫ßu ti√™n xu·∫•t hi·ªán, chi·ªÅu cao 3-5cm, r·ªÖ ph√°t tri·ªÉn v·ªØng ch·∫Øc',
      Vegetative: 'C√¢y ƒë·∫°t 15-20cm, c√≥ 6-8 l√° th·∫≠t, th√¢n c·ª©ng c√°p',
      Flowering: 'Xu·∫•t hi·ªán n·ª• hoa ƒë·∫ßu ti√™n, c√¢y ng·ª´ng ph√°t tri·ªÉn chi·ªÅu cao',
      Fruiting: 'Hoa ƒë√£ th·ª• ph·∫•n, qu·∫£ non b·∫Øt ƒë·∫ßu h√¨nh th√†nh',
      Maturity: 'Qu·∫£ c√≥ m√†u s·∫Øc ƒë·∫∑c tr∆∞ng, d·ªÖ t√°ch kh·ªèi c√†nh khi ch·∫°m nh·∫π',
    };

    return (
      transitionSigns[stageName] ||
      'Quan s√°t s·ª± thay ƒë·ªïi trong ph√°t tri·ªÉn c·ªßa c√¢y'
    );
  }

  private getNextStagePreparation(
    stageName: string,
    plantName: string,
  ): string {
    const preparations = {
      Seeding: `‚Ä¢ Chu·∫©n b·ªã ph√¢n NPK c√¢n b·∫±ng cho giai ƒëo·∫°n sinh tr∆∞·ªüng
‚Ä¢ TƒÉng c∆∞·ªùng √°nh s√°ng d·∫ßn d·∫ßn
‚Ä¢ Chu·∫©n b·ªã ch·∫≠u l·ªõn h∆°n n·∫øu c·∫ßn`,
      Vegetative: `‚Ä¢ Chuy·ªÉn sang ph√¢n c√≥ √≠t ƒë·∫°m h∆°n (NPK 5-20-20)
‚Ä¢ Chu·∫©n b·ªã gi√†n ƒë·ª° cho khi ra hoa
‚Ä¢ Gi·∫£m t·∫ßn su·∫•t t∆∞·ªõi nh·∫π ƒë·ªÉ k√≠ch th√≠ch ra hoa`,
      Flowering: `‚Ä¢ Chu·∫©n b·ªã ph√¢n kali cao cho giai ƒëo·∫°n ra qu·∫£
‚Ä¢ L·∫Øp ƒë·∫∑t h·ªá th·ªëng ch·ªëng ƒë·ª° cho c√†nh n·∫∑ng qu·∫£
‚Ä¢ Chu·∫©n b·ªã d·ª•ng c·ª• h·ªó tr·ª£ th·ª• ph·∫•n`,
      Fruiting: `‚Ä¢ Chu·∫©n b·ªã d·ª•ng c·ª• thu ho·∫°ch s·∫°ch s·∫Ω
‚Ä¢ T√¨m hi·ªÉu c√°ch b·∫£o qu·∫£n ${plantName} sau thu ho·∫°ch
‚Ä¢ L√™n k·∫ø ho·∫°ch cho chu k·ª≥ tr·ªìng ti·∫øp theo`,
      Maturity: `‚Ä¢ Chu·∫©n b·ªã ƒë·∫•t m·ªõi cho chu k·ª≥ ti·∫øp theo
‚Ä¢ Ch·ªçn gi·ªëng m·ªõi ho·∫∑c thu th·∫≠p h·∫°t gi·ªëng
‚Ä¢ V·ªá sinh d·ª•ng c·ª• v√† kh√¥ng gian tr·ªìng tr·ªçt`,
    };

    return (
      preparations[stageName] || 'Chu·∫©n b·ªã cho giai ƒëo·∫°n ph√°t tri·ªÉn ti·∫øp theo'
    );
  }

  private getHarvestTiming(plantName: string): string {
    const harvestGuide = {
      'c√† chua': 'Thu khi qu·∫£ chuy·ªÉn m√†u h·ªìng, s·∫Ω ti·∫øp t·ª•c ch√≠n sau khi h√°i',
      ·ªõt: 'Thu khi qu·∫£ ƒë·∫°t k√≠ch th∆∞·ªõc ƒë·∫ßy ƒë·∫∑n, m√†u s·∫Øc t∆∞∆°i s√°ng',
      'd∆∞a chu·ªôt': 'Thu khi qu·∫£ d√†i 15-20cm, m√†u xanh ƒë·ªÅu',
      'x√† l√°ch':
        'Thu l√° ngo√†i khi d√†i 10-15cm, ƒë·ªÉ l√° trong ti·∫øp t·ª•c ph√°t tri·ªÉn',
      'h√∫ng qu·∫ø': 'H√°i l√° tr∆∞·ªõc khi ra hoa, v√†o bu·ªïi s√°ng s·ªõm',
      'b·∫°c h√†': 'Thu ho·∫°ch th∆∞·ªùng xuy√™n ƒë·ªÉ k√≠ch th√≠ch ra l√° m·ªõi',
    };

    return (
      harvestGuide[plantName.toLowerCase()] ||
      'Thu ho·∫°ch khi qu·∫£/l√° ƒë·∫°t k√≠ch th∆∞·ªõc v√† m√†u s·∫Øc t·ªëi ∆∞u'
    );
  }

  private getMaturityHarvestGuide(plantName: string): string {
    const maturityGuide = {
      'c√† chua': 'Thu v√†o bu·ªïi s√°ng m√°t, ƒë·ªÉ cu·ªëng 1-2cm, b·∫£o qu·∫£n n∆°i kh√¥ r√°o',
      ·ªõt: 'Thu khi qu·∫£ ƒë√£ ch√≠n ƒë·ªè ho√†n to√†n, c√≥ th·ªÉ ph∆°i kh√¥ b·∫£o qu·∫£n',
      'd∆∞a chu·ªôt': 'Thu h√†ng ng√†y v√†o s√°ng s·ªõm, ng√¢m n∆∞·ªõc l·∫°nh ƒë·ªÉ gi·ªØ ƒë·ªô gi√≤n',
      'x√† l√°ch': 'Thu c·∫£ c√¢y v√†o s√°ng s·ªõm, r·ª≠a s·∫°ch v√† ƒë·ªÉ t·ªß l·∫°nh',
      'h√∫ng qu·∫ø': 'Thu l√° th∆∞·ªùng xuy√™n, c√≥ th·ªÉ s·∫•y kh√¥ ho·∫∑c ƒë√¥ng l·∫°nh b·∫£o qu·∫£n',
      'b·∫°c h√†': 'Thu c·∫Øt c√†nh, c·∫Øm n∆∞·ªõc ho·∫∑c s·∫•y kh√¥ l√†m tr√†',
    };

    return (
      maturityGuide[plantName.toLowerCase()] ||
      'Thu ho·∫°ch ƒë√∫ng th·ªùi ƒëi·ªÉm v√† b·∫£o qu·∫£n ph√π h·ª£p'
    );
  }

  private generateNutritionAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { activities, growthStage } = context;
    const plantDisplayName = context.garden.plantName;
    const now = new Date();

    // Ph√¢n t√≠ch l·∫ßn b√≥n ph√¢n g·∫ßn nh·∫•t
    const lastFertilizing = activities.find(
      (a) => a.activityType === 'FERTILIZING',
    );
    const daysSinceLastFertilizing = lastFertilizing
      ? Math.floor(
          (now.getTime() - lastFertilizing.timestamp.getTime()) /
            (1000 * 60 * 60 * 24),
        )
      : null;

    // L·ªùi khuy√™n v·ªÅ dinh d∆∞·ª°ng theo giai ƒëo·∫°n
    const nutritionAdvice = this.getNutritionAdviceByStage(
      context.garden.plantGrowStage,
      plantDisplayName,
    );
    if (nutritionAdvice) {
      advices.push({
        id: startId++,
        action: nutritionAdvice.action,
        description: nutritionAdvice.description,
        reason: nutritionAdvice.reason,
        priority: 'MEDIUM',
        suggestedTime: 'evening',
        category: 'FERTILIZING',
      });
    }

    // Ki·ªÉm tra chu k·ª≥ b√≥n ph√¢n
    if (daysSinceLastFertilizing === null) {
      advices.push({
        id: startId++,
        action: 'üß™ B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô dinh d∆∞·ª°ng',
        description: `T√¥i ch∆∞a th·∫•y b·∫°n ghi l·∫°i ho·∫°t ƒë·ªông b√≥n ph√¢n cho ${plantDisplayName}. Vi·ªác cung c·∫•p dinh d∆∞·ª°ng ƒë√∫ng c√°ch r·∫•t quan tr·ªçng!

üìä L·ª£i √≠ch c·ªßa vi·ªác b√≥n ph√¢n ƒë√∫ng c√°ch:
‚Ä¢ TƒÉng tr∆∞·ªüng: C√¢y ph√°t tri·ªÉn nhanh v√† kh·ªèe m·∫°nh
‚Ä¢ Ch·ªëng b·ªánh: C√¢y kh·ªèe √≠t b·ªã s√¢u b·ªánh t·∫•n c√¥ng
‚Ä¢ NƒÉng su·∫•t: Nhi·ªÅu hoa, qu·∫£ ch·∫•t l∆∞·ª£ng cao
‚Ä¢ M√†u s·∫Øc: L√° xanh ƒë·∫≠m, hoa qu·∫£ ƒë·∫πp m·∫Øt

üå± Ph√¢n b√≥n c∆° b·∫£n cho ${plantDisplayName}:
${this.getBasicFertilizerGuide(context.garden.plantGrowStage)}

‚è∞ T·∫ßn su·∫•t: 2-3 tu·∫ßn/l·∫ßn, t√πy theo lo·∫°i ph√¢n v√† giai ƒëo·∫°n ph√°t tri·ªÉn.`,
        reason: 'Ch∆∞a c√≥ ho·∫°t ƒë·ªông b√≥n ph√¢n - c·∫ßn thi·∫øt l·∫≠p ch·∫ø ƒë·ªô dinh d∆∞·ª°ng.',
        priority: 'MEDIUM',
        suggestedTime: 'evening',
        category: 'FERTILIZING',
      });
    } else if (daysSinceLastFertilizing > 21) {
      advices.push({
        id: startId++,
        action: 'üåø ƒê√£ ƒë·∫øn l√∫c b√≥n ph√¢n',
        description: `L·∫ßn b√≥n ph√¢n g·∫ßn nh·∫•t cho ${plantDisplayName} l√† ${daysSinceLastFertilizing} ng√†y tr∆∞·ªõc. ƒê√£ ƒë·∫øn l√∫c b·ªï sung dinh d∆∞·ª°ng!

üîç D·∫•u hi·ªáu c·∫ßn b√≥n ph√¢n:
‚Ä¢ L√°: M√†u v√†ng nh·∫°t, k√≠ch th∆∞·ªõc nh·ªè h∆°n b√¨nh th∆∞·ªùng
‚Ä¢ TƒÉng tr∆∞·ªüng: Ch·∫≠m l·∫°i ƒë√°ng k·ªÉ
‚Ä¢ Hoa/qu·∫£: √çt h∆°n, k√≠ch th∆∞·ªõc nh·ªè
‚Ä¢ S·ª©c ƒë·ªÅ kh√°ng: D·ªÖ b·ªã s√¢u b·ªánh

üíä G·ª£i √Ω b√≥n ph√¢n:
${this.getFertilizerRecommendation(context.garden.plantGrowStage, plantDisplayName)}

‚ö†Ô∏è L∆∞u √Ω: B√≥n ph√¢n v√†o chi·ªÅu m√°t, sau khi t∆∞·ªõi n∆∞·ªõc, tr√°nh b√≥n khi ƒë·∫•t kh√¥.`,
        reason: `ƒê√£ ${daysSinceLastFertilizing} ng√†y t·ª´ l·∫ßn b√≥n ph√¢n cu·ªëi - c√¢y c·∫ßn dinh d∆∞·ª°ng.`,
        priority: daysSinceLastFertilizing > 30 ? 'HIGH' : 'MEDIUM',
        suggestedTime: 'evening',
        category: 'FERTILIZING',
      });
    }

    // L·ªùi khuy√™n v·ªÅ ph√¢n compost t·ª± l√†m
    advices.push({
      id: startId++,
      action: '‚ôªÔ∏è T·ª± l√†m ph√¢n compost',
      description: `Ph√¢n compost t·ª± l√†m l√† ngu·ªìn dinh d∆∞·ª°ng tuy·ªát v·ªùi v√† th√¢n thi·ªán m√¥i tr∆∞·ªùng cho ${plantDisplayName}!

üóëÔ∏è Nguy√™n li·ªáu t·ª´ nh√† b·∫øp:
‚Ä¢ Xanh: V·ªè rau c·ªß, b√£ c√† ph√™, l√° c√¢y
‚Ä¢ N√¢u: Gi·∫•y b√°o, l√° kh√¥, m√πn c∆∞a
‚Ä¢ Tr√°nh: Th·ªãt, c√°, s·ªØa, d·∫ßu m·ª°

üîÑ C√°ch l√†m ƒë∆°n gi·∫£n:
1. L·ªõp ƒë√°y: C√†nh kh√¥, l√° kh√¥ ƒë·ªÉ tho√°t n∆∞·ªõc
2. Xen k·∫Ω: 1 l·ªõp xanh + 1 l·ªõp n√¢u
3. ƒê·ªô ·∫©m: ·∫®m nh∆∞ mi·∫øng b·ªçt bi·ªÉn v·∫Øt r√°o
4. ƒê·∫£o tr·ªôn: 1 tu·∫ßn/l·∫ßn ƒë·ªÉ cung c·∫•p oxy
5. Ho√†n th√†nh: 2-3 th√°ng c√≥ ph√¢n ƒëen, th∆°m ƒë·∫•t

üí∞ L·ª£i √≠ch: Ti·∫øt ki·ªám ti·ªÅn, gi·∫£m r√°c th·∫£i, cung c·∫•p dinh d∆∞·ª°ng to√†n di·ªán!`,
      reason: 'Ph√¢n compost t·ª± l√†m cung c·∫•p dinh d∆∞·ª°ng b·ªÅn v·ªØng v√† an to√†n.',
      priority: 'LOW',
      suggestedTime: 'evening',
      category: 'FERTILIZING',
    });

    return advices;
  }

  private getNutritionAdviceByStage(stageName: string, plantName: string) {
    const nutritionAdviceMap = {
      Seeding: {
        action: 'üå± Dinh d∆∞·ª°ng cho c√¢y con',
        description: `Giai ƒëo·∫°n n·∫£y m·∫ßm - ${plantName} ch·ªß y·∫øu s·ª≠ d·ª•ng dinh d∆∞·ª°ng t·ª´ h·∫°t!

üö´ KH√îNG B√ìN PH√ÇN trong 2-3 tu·∫ßn ƒë·∫ßu:
‚Ä¢ H·∫°t ƒë√£ ch·ª©a ƒë·ªß dinh d∆∞·ª°ng cho giai ƒëo·∫°n n√†y
‚Ä¢ B√≥n ph√¢n s·ªõm c√≥ th·ªÉ "ƒë·ªët" r·ªÖ non
‚Ä¢ N·ªìng ƒë·ªô mu·ªëi cao g√¢y stress cho c√¢y con

üåø N·∫øu th·ª±c s·ª± c·∫ßn (sau 3 tu·∫ßn):
‚Ä¢ Ph√¢n l·ªèng pha lo√£ng g·∫•p ƒë√¥i h∆∞·ªõng d·∫´n
‚Ä¢ Phun l√™n l√° v·ªõi n·ªìng ƒë·ªô 0.1%
‚Ä¢ ∆Øu ti√™n ph√¢n h·ªØu c∆° nh∆∞ d·ªãch giun qu·∫ø

üí° D·∫•u hi·ªáu thi·∫øu dinh d∆∞·ª°ng: L√° v√†ng ho√†n to√†n, tƒÉng tr∆∞·ªüng d·ª´ng h·∫≥n sau 4 tu·∫ßn.`,
        reason:
          'Giai ƒëo·∫°n n·∫£y m·∫ßm - h·∫°t cung c·∫•p ƒë·ªß dinh d∆∞·ª°ng, tr√°nh b√≥n ph√¢n s·ªõm.',
      },
      Vegetative: {
        action: 'üí™ B√≥n ph√¢n th√∫c ƒë·∫©y sinh tr∆∞·ªüng',
        description: `Giai ƒëo·∫°n sinh tr∆∞·ªüng - ${plantName} c·∫ßn nhi·ªÅu ƒë·∫°m ƒë·ªÉ ph√°t tri·ªÉn l√°!

üß™ C√¥ng th·ª©c dinh d∆∞·ª°ng:
‚Ä¢ NPK 20-10-10 ho·∫∑c 16-16-16 - c√¢n b·∫±ng cao ƒë·∫°m
‚Ä¢ T·∫ßn su·∫•t: 2 tu·∫ßn/l·∫ßn
‚Ä¢ Li·ªÅu l∆∞·ª£ng: 1-2g/1L n∆∞·ªõc (theo h∆∞·ªõng d·∫´n nh√† s·∫£n xu·∫•t)

üåø Ph√¢n h·ªØu c∆° b·ªï sung:
‚Ä¢ D·ªãch giun qu·∫ø: 1 tu·∫ßn/l·∫ßn, pha 1:10 v·ªõi n∆∞·ªõc
‚Ä¢ Ph√¢n c√°: 2 tu·∫ßn/l·∫ßn cho dinh d∆∞·ª°ng to√†n di·ªán
‚Ä¢ B√£ c√† ph√™: R·∫Øc tr·ª±c ti·∫øp l√™n ƒë·∫•t, b·ªï sung ƒë·∫°m t·ª´ t·ª´

‚è∞ Th·ªùi ƒëi·ªÉm t·ªët nh·∫•t: Chi·ªÅu m√°t (17-19h), sau khi t∆∞·ªõi n∆∞·ªõc.`,
        reason:
          'Giai ƒëo·∫°n sinh tr∆∞·ªüng - c·∫ßn ƒë·∫°m cao ƒë·ªÉ ph√°t tri·ªÉn th√¢n l√° m·∫°nh m·∫Ω.',
      },
      Flowering: {
        action: 'üå∏ B√≥n ph√¢n k√≠ch th√≠ch ra hoa',
        description: `Giai ƒëo·∫°n ra hoa - chuy·ªÉn ƒë·ªïi dinh d∆∞·ª°ng ƒë·ªÉ ${plantName} t·∫≠p trung ra hoa!

üß™ Thay ƒë·ªïi c√¥ng th·ª©c:
‚Ä¢ NPK 5-20-20 ho·∫∑c 10-30-20 - gi·∫£m ƒë·∫°m, tƒÉng l√¢n
‚Ä¢ T·∫ßn su·∫•t: 10-14 ng√†y/l·∫ßn
‚Ä¢ L√¢n b·ªï sung: Ph√¢n x∆∞∆°ng c√°, ph√¢n d∆°i

üå∫ Ch·∫•t k√≠ch th√≠ch ra hoa:
‚Ä¢ Kali dihydrogen phosphate (KH2PO4): 1g/1L, phun l√° 1 tu·∫ßn/l·∫ßn
‚Ä¢ Vitamin B1: Pha lo√£ng phun l√° ƒë·ªÉ gi·∫£m stress
‚Ä¢ Canxi: B·ªï sung t·ª´ v·ªè tr·ª©ng nghi·ªÅn ho·∫∑c canxi chloride

‚ö†Ô∏è Tr√°nh: B√≥n ph√¢n ƒë·∫°m cao s·∫Ω l√†m c√¢y ra l√° thay v√¨ hoa!`,
        reason:
          'Giai ƒëo·∫°n ra hoa - c·∫ßn l√¢n cao ƒë·ªÉ k√≠ch th√≠ch hoa v√† chu·∫©n b·ªã ƒë·∫≠u qu·∫£.',
      },
      Fruiting: {
        action: 'üçÖ B√≥n ph√¢n cho qu·∫£ ph√°t tri·ªÉn',
        description: `Giai ƒëo·∫°n ra qu·∫£ - ${plantName} c·∫ßn kali ƒë·ªÉ qu·∫£ to v√† ng·ªçt!

üß™ C√¥ng th·ª©c cho qu·∫£:
‚Ä¢ NPK 10-10-30 ho·∫∑c 15-15-30 - kali cao
‚Ä¢ T·∫ßn su·∫•t: 1-2 tu·∫ßn/l·∫ßn t√πy t·ªëc ƒë·ªô ph√°t tri·ªÉn qu·∫£
‚Ä¢ Canxi b·ªï sung: NgƒÉn ch·∫∑n n·ª©t qu·∫£ v√† th·ªëi ƒë·ªânh

üçÉ Dinh d∆∞·ª°ng chuy√™n bi·ªát:
‚Ä¢ Kali sulfate: TƒÉng ƒë·ªô ng·ªçt c·ªßa qu·∫£
‚Ä¢ Magie sulfate: Ch·ªëng v√†ng l√°, tƒÉng ch·∫•t l∆∞·ª£ng qu·∫£
‚Ä¢ Vi l∆∞·ª£ng: S·∫Øt, k·∫Ωm ƒë·ªÉ qu·∫£ ph√°t tri·ªÉn ƒë·∫ßy ƒë·∫∑n

üíß L∆∞u √Ω quan tr·ªçng: T∆∞·ªõi ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ dinh d∆∞·ª°ng ƒë∆∞·ª£c h·∫•p thu t·ªët!`,
        reason:
          'Giai ƒëo·∫°n ra qu·∫£ - c·∫ßn kali cao ƒë·ªÉ qu·∫£ ph√°t tri·ªÉn to, ch·∫Øc v√† ng·ªçt.',
      },
      Maturity: {
        action: 'üèÜ Duy tr√¨ dinh d∆∞·ª°ng cu·ªëi m√πa',
        description: `Giai ƒëo·∫°n tr∆∞·ªüng th√†nh - duy tr√¨ s·ª©c kh·ªèe c√¢y ƒë·ªÉ thu ho·∫°ch t·ªëi ƒëa!

üß™ Dinh d∆∞·ª°ng duy tr√¨:
‚Ä¢ NPK c√¢n b·∫±ng 15-15-15 - duy tr√¨ ho·∫°t ƒë·ªông s·ªëng
‚Ä¢ T·∫ßn su·∫•t gi·∫£m: 3-4 tu·∫ßn/l·∫ßn
‚Ä¢ T·∫≠p trung: Kali + vi l∆∞·ª£ng cho ch·∫•t l∆∞·ª£ng qu·∫£

üåø ChƒÉm s√≥c ƒë·∫∑c bi·ªát:
‚Ä¢ Amino acid: TƒÉng s·ª©c ƒë·ªÅ kh√°ng cu·ªëi m√πa
‚Ä¢ Canxi: C·ªßng c·ªë th√†nh t·∫ø b√†o, k√©o d√†i th·ªùi gian thu ho·∫°ch
‚Ä¢ Enzyme: H·ªó tr·ª£ ti√™u h√≥a dinh d∆∞·ª°ng hi·ªáu qu·∫£

üìù Chu·∫©n b·ªã: B·∫Øt ƒë·∫ßu chu·∫©n b·ªã ƒë·∫•t cho chu k·ª≥ ti·∫øp theo v·ªõi ph√¢n compost!`,
        reason:
          'Giai ƒëo·∫°n tr∆∞·ªüng th√†nh - duy tr√¨ s·ª©c kh·ªèe c√¢y ƒë·ªÉ thu ho·∫°ch k√©o d√†i.',
      },
    };

    return nutritionAdviceMap[stageName] || null;
  }

  private getBasicFertilizerGuide(stageName: string): string {
    const guides = {
      Seeding:
        '‚Ä¢ Ch∆∞a c·∫ßn b√≥n ph√¢n (h·∫°t c√≥ ƒë·ªß dinh d∆∞·ª°ng)\n‚Ä¢ N·∫øu c·∫ßn: d·ªãch giun qu·∫ø pha lo√£ng g·∫•p ƒë√¥i',
      Vegetative:
        '‚Ä¢ NPK 20-10-10: 1-2g/1L n∆∞·ªõc, 2 tu·∫ßn/l·∫ßn\n‚Ä¢ D·ªãch giun qu·∫ø: 1 tu·∫ßn/l·∫ßn\n‚Ä¢ B√£ c√† ph√™: r·∫Øc tr·ª±c ti·∫øp',
      Flowering:
        '‚Ä¢ NPK 5-20-20: 1-2g/1L n∆∞·ªõc, 2 tu·∫ßn/l·∫ßn\n‚Ä¢ Ph√¢n x∆∞∆°ng c√° cho l√¢n t·ª± nhi√™n\n‚Ä¢ Tr√°nh ph√¢n ƒë·∫°m cao',
      Fruiting:
        '‚Ä¢ NPK 10-10-30: 1-2g/1L n∆∞·ªõc, 1-2 tu·∫ßn/l·∫ßn\n‚Ä¢ Kali sulfate cho ƒë·ªô ng·ªçt\n‚Ä¢ Canxi ch·ªëng n·ª©t qu·∫£',
      Maturity:
        '‚Ä¢ NPK 15-15-15: 2-3g/1L n∆∞·ªõc, 3-4 tu·∫ßn/l·∫ßn\n‚Ä¢ Vi l∆∞·ª£ng b·ªï sung\n‚Ä¢ Chu·∫©n b·ªã ph√¢n compost',
    };

    return (
      guides[stageName] ||
      '‚Ä¢ NPK c√¢n b·∫±ng theo h∆∞·ªõng d·∫´n\n‚Ä¢ Ph√¢n h·ªØu c∆° 2-3 tu·∫ßn/l·∫ßn'
    );
  }

  private getFertilizerRecommendation(
    stageName: string,
    plantName: string,
  ): string {
    const recommendations = {
      Seeding: `‚Ä¢ D·ªãch giun qu·∫ø pha lo√£ng (1:20 v·ªõi n∆∞·ªõc) - nh·∫π nh√†ng, an to√†n
‚Ä¢ Vitamin B1 - gi√∫p r·ªÖ ph√°t tri·ªÉn kh·ªèe m·∫°nh
‚Ä¢ T·∫ßn su·∫•t: 3-4 tu·∫ßn/l·∫ßn, r·∫•t √≠t`,
      Vegetative: `‚Ä¢ NPK 20-10-10 ho·∫∑c Ph√¢n NPK cao ƒë·∫°m - 1.5g/1L n∆∞·ªõc
‚Ä¢ D·ªãch c√° - b·ªï sung protein v√† amino acid t·ª± nhi√™n
‚Ä¢ Phun l√°: NPK 0.5g/1L, s√°ng s·ªõm 1 tu·∫ßn/l·∫ßn`,
      Flowering: `‚Ä¢ NPK 5-20-20 - 1.5-2g/1L n∆∞·ªõc cho l√¢n cao
‚Ä¢ Ph√¢n x∆∞∆°ng c√° nghi·ªÅn - l√¢n t·ª± nhi√™n t√°c d·ª•ng l√¢u
‚Ä¢ KH2PO4: 1g/1L phun l√° k√≠ch th√≠ch ra hoa`,
      Fruiting: `‚Ä¢ NPK 10-10-30 - 2g/1L n∆∞·ªõc cho kali cao
‚Ä¢ Kali sulfate - 1g/1L tƒÉng ƒë·ªô ng·ªçt qu·∫£
‚Ä¢ Canxi chloride: 0.5g/1L ch·ªëng r·ª•ng qu·∫£`,
      Maturity: `‚Ä¢ NPK 15-15-15 c√¢n b·∫±ng - 1g/1L n∆∞·ªõc duy tr√¨
‚Ä¢ Amino acid t·ªïng h·ª£p - tƒÉng s·ª©c ƒë·ªÅ kh√°ng
‚Ä¢ Vi l∆∞·ª£ng B, Zn, Fe - ch·∫•t l∆∞·ª£ng qu·∫£ t·ªët h∆°n`,
    };

    return (
      recommendations[stageName] ||
      `‚Ä¢ NPK c√¢n b·∫±ng theo giai ƒëo·∫°n ph√°t tri·ªÉn\n‚Ä¢ Ph√¢n h·ªØu c∆° b·ªï sung dinh d∆∞·ª°ng t·ª± nhi√™n`
    );
  }

  private generateTaskAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { tasks, schedules } = context;
    const plantDisplayName = context.garden.plantName;
    const now = new Date();

    // X·ª≠ l√Ω c√¥ng vi·ªác qu√° h·∫°n
    const overdueTasks = tasks.filter((task) => new Date(task.dueDate) < now);
    if (overdueTasks.length > 0) {
      const criticalTasks = overdueTasks.filter((task) =>
        ['WATERING', 'FERTILIZING'].includes(task.type.toUpperCase()),
      );

      advices.push({
        id: startId++,
        action: `‚ö†Ô∏è X·ª≠ l√Ω ${overdueTasks.length} c√¥ng vi·ªác qu√° h·∫°n`,
        description: `B·∫°n c√≥ ${overdueTasks.length} c√¥ng vi·ªác ƒë√£ qu√° h·∫°n cho ${plantDisplayName}!

üö® ∆Øu ti√™n cao (${criticalTasks.length} vi·ªác):
${criticalTasks.map((task) => `‚Ä¢ ${task.type}: ${task.description} (qu√° h·∫°n ${Math.floor((now.getTime() - new Date(task.dueDate).getTime()) / (1000 * 60 * 60 * 24))} ng√†y)`).join('\n')}

üìã C√°c vi·ªác kh√°c:
${overdueTasks
  .filter((t) => !criticalTasks.includes(t))
  .map((task) => `‚Ä¢ ${task.type}: ${task.description}`)
  .join('\n')}

üí° ƒê·ªÅ xu·∫•t: Ho√†n th√†nh c√¥ng vi·ªác quan tr·ªçng tr∆∞·ªõc, sau ƒë√≥ l√†m c√°c vi·ªác c√≤n l·∫°i theo th·ª© t·ª± ∆∞u ti√™n.

‚úÖ Sau khi ho√†n th√†nh: ƒê√°nh d·∫•u "Ho√†n th√†nh" ƒë·ªÉ h·ªá th·ªëng c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô!`,
        reason: `${overdueTasks.length} c√¥ng vi·ªác qu√° h·∫°n c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe c√¢y.`,
        priority: criticalTasks.length > 0 ? 'HIGH' : 'MEDIUM',
        suggestedTime: 'morning',
        category: 'TASK_MANAGEMENT',
      });
    }

    // C√¥ng vi·ªác h√¥m nay
    const todayTasks = tasks.filter((task) => {
      const taskDate = new Date(task.dueDate);
      return taskDate.toDateString() === now.toDateString();
    });

    if (todayTasks.length > 0) {
      advices.push({
        id: startId++,
        action: `üìÖ K·∫ø ho·∫°ch h√¥m nay (${todayTasks.length} vi·ªác)`,
        description: `H√¥m nay b·∫°n c√≥ ${todayTasks.length} c√¥ng vi·ªác c·∫ßn l√†m cho ${plantDisplayName}:

üìù Danh s√°ch c√¥ng vi·ªác:
${todayTasks
  .map((task, index) => {
    const timeString = new Date(task.dueDate).toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit',
    });
    return `${index + 1}. ${task.type} (${timeString}): ${task.description}`;
  })
  .join('\n')}

‚è∞ G·ª£i √Ω th·ªùi gian:
‚Ä¢ S√°ng s·ªõm (6-8h): Quan s√°t, t∆∞·ªõi n∆∞·ªõc, ki·ªÉm tra s√¢u b·ªánh
‚Ä¢ Bu·ªïi chi·ªÅu (16-18h): B√≥n ph√¢n, t·ªâa c√†nh, chƒÉm s√≥c ƒë·∫∑c bi·ªát
‚Ä¢ Bu·ªïi t·ªëi (19-20h): Ghi ch√©p, l·∫≠p k·∫ø ho·∫°ch ng√†y mai

üí™ ƒê·ªông vi√™n: Ho√†n th√†nh ƒë√∫ng l·ªãch s·∫Ω gi√∫p ${plantDisplayName} ph√°t tri·ªÉn t·ªët nh·∫•t!`,
        reason: `${todayTasks.length} c√¥ng vi·ªác ƒë√£ l√™n l·ªãch cho h√¥m nay c·∫ßn ƒë∆∞·ª£c th·ª±c hi·ªán.`,
        priority: 'MEDIUM',
        suggestedTime: 'morning',
        category: 'TASK_MANAGEMENT',
      });
    }

    // L·ªãch t∆∞·ªõi n∆∞·ªõc s·∫Øp t·ªõi
    if (schedules.length > 0) {
      const nextSchedule = schedules[0];
      const hoursUntil = Math.floor(
        (nextSchedule.scheduledAt.getTime() - now.getTime()) / (1000 * 60 * 60),
      );

      if (hoursUntil <= 6 && hoursUntil > 0) {
        advices.push({
          id: startId++,
          action: 'üíß Chu·∫©n b·ªã l·ªãch t∆∞·ªõi s·∫Øp t·ªõi',
          description: `L·ªãch t∆∞·ªõi ti·∫øp theo cho ${plantDisplayName} l√† trong ${hoursUntil} gi·ªù n·ªØa!

üõ†Ô∏è Chu·∫©n b·ªã:
‚Ä¢ Ki·ªÉm tra d·ª•ng c·ª•: V√≤i t∆∞·ªõi, b√¨nh x·ªãt, th√πng n∆∞·ªõc
‚Ä¢ Ch·∫•t l∆∞·ª£ng n∆∞·ªõc: ƒê·ªÉ n∆∞·ªõc m√°y tho√°ng kh√≠ √≠t nh·∫•t 2-4 ti·∫øng
‚Ä¢ Nhi·ªát ƒë·ªô n∆∞·ªõc: N∆∞·ªõc ·ªü nhi·ªát ƒë·ªô ph√≤ng (kh√¥ng qu√° l·∫°nh/n√≥ng)
‚Ä¢ Ki·ªÉm tra ƒë·∫•t: ƒê·ªô ·∫©m hi·ªán t·∫°i ƒë·ªÉ ƒëi·ªÅu ch·ªânh l∆∞·ª£ng n∆∞·ªõc

${nextSchedule.amount ? `üíß L∆∞·ª£ng n∆∞·ªõc ƒë·ªÅ xu·∫•t: ${nextSchedule.amount} l√≠t` : ''}

${nextSchedule.notes ? `üìù Ghi ch√∫: ${nextSchedule.notes}` : ''}

‚è∞ Th·ªùi ƒëi·ªÉm: ${nextSchedule.scheduledAt.toLocaleString('vi-VN')}`,
          reason: `L·ªãch t∆∞·ªõi ƒë∆∞·ª£c l√™n k·∫ø ho·∫°ch trong ${hoursUntil} gi·ªù - chu·∫©n b·ªã tr∆∞·ªõc ƒë·ªÉ hi·ªáu qu·∫£ h∆°n.`,
          priority: 'MEDIUM',
          suggestedTime: hoursUntil <= 2 ? 'noon' : 'morning',
          category: 'WATERING',
        });
      }
    }

    // G·ª£i √Ω t·∫°o l·ªãch tr√¨nh n·∫øu ch∆∞a c√≥
    if (tasks.length === 0 && schedules.length === 0) {
      advices.push({
        id: startId++,
        action: 'üìã T·∫°o l·ªãch tr√¨nh chƒÉm s√≥c',
        description: `T√¥i th·∫•y b·∫°n ch∆∞a c√≥ l·ªãch tr√¨nh chƒÉm s√≥c cho ${plantDisplayName}. H√£y t·∫°o m·ªôt k·∫ø ho·∫°ch ƒë·ªÉ chƒÉm s√≥c hi·ªáu qu·∫£!

üìÖ L·ªãch tr√¨nh c∆° b·∫£n ƒë·ªÅ xu·∫•t:

üåÖ H√†ng ng√†y:
‚Ä¢ S√°ng: Quan s√°t t·ªïng th·ªÉ (5 ph√∫t)
‚Ä¢ Chi·ªÅu: Ki·ªÉm tra ƒë·ªô ·∫©m ƒë·∫•t
‚Ä¢ T·ªëi: Ghi ch√©p t√¨nh tr·∫°ng c√¢y

üìÖ H√†ng tu·∫ßn:
‚Ä¢ Th·ª© 2: Ki·ªÉm tra s√¢u b·ªánh k·ªπ l∆∞·ª°ng
‚Ä¢ Th·ª© 4: T·ªâa l√° gi√†, c√†nh y·∫øu
‚Ä¢ Th·ª© 6: ƒê√°nh gi√° ti·∫øn ƒë·ªô ph√°t tri·ªÉn

üìÖ ƒê·ªãnh k·ª≥:
‚Ä¢ 2 tu·∫ßn: B√≥n ph√¢n (t√πy giai ƒëo·∫°n)
‚Ä¢ 1 th√°ng: Ki·ªÉm tra v√† b·ªï sung ƒë·∫•t
‚Ä¢ Theo m√πa: ƒêi·ªÅu ch·ªânh ch·∫ø ƒë·ªô chƒÉm s√≥c

üí° L·ª£i √≠ch: L·ªãch tr√¨nh gi√∫p kh√¥ng b·ªè s√≥t vi·ªác quan tr·ªçng v√† t·ªëi ∆∞u h√≥a s·ª± ph√°t tri·ªÉn!`,
        reason:
          'Ch∆∞a c√≥ l·ªãch tr√¨nh chƒÉm s√≥c - c·∫ßn thi·∫øt l·∫≠p ƒë·ªÉ ƒë·∫£m b·∫£o chƒÉm s√≥c ƒë·ªÅu ƒë·∫∑n.',
        priority: 'LOW',
        suggestedTime: 'evening',
        category: 'TASK_MANAGEMENT',
      });
    }

    return advices;
  }

  private generateSeasonalAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const plantDisplayName = context.garden.plantName;
    const { currentSeason } = analysis;
    const now = new Date();
    const month = now.getMonth() + 1;

    // L·ªùi khuy√™n theo m√πa
    const seasonalAdvice = this.getDetailedSeasonalAdvice(
      currentSeason,
      plantDisplayName,
      month,
    );
    if (seasonalAdvice) {
      advices.push({
        id: startId++,
        action: seasonalAdvice.action,
        description: seasonalAdvice.description,
        reason: seasonalAdvice.reason,
        priority: 'LOW',
        suggestedTime: 'morning',
        category: 'SEASONAL',
      });
    }

    // Chu·∫©n b·ªã chuy·ªÉn m√πa
    const seasonTransition = this.getSeasonTransitionAdvice(
      month,
      plantDisplayName,
    );
    if (seasonTransition) {
      advices.push({
        id: startId++,
        action: seasonTransition.action,
        description: seasonTransition.description,
        reason: seasonTransition.reason,
        priority: 'MEDIUM',
        suggestedTime: 'morning',
        category: 'SEASONAL',
      });
    }

    return advices;
  }

  private getDetailedSeasonalAdvice(
    season: string,
    plantName: string,
    month: number,
  ) {
    const seasonAdviceMap = {
      xu√¢n: {
        action: 'üå∏ ChƒÉm s√≥c m√πa xu√¢n',
        description: `M√πa xu√¢n - th·ªùi ƒëi·ªÉm v√†ng ƒë·ªÉ ${plantName} ph√°t tri·ªÉn m·∫°nh m·∫Ω!

üå± ƒê·∫∑c ƒëi·ªÉm m√πa xu√¢n:
‚Ä¢ Nhi·ªát ƒë·ªô d·∫ßn ·∫•m l√™n, thu·∫≠n l·ª£i cho sinh tr∆∞·ªüng
‚Ä¢ ƒê·ªô ·∫©m cao, √≠t c·∫ßn t∆∞·ªõi n∆∞·ªõc
‚Ä¢ S√¢u b·ªánh b·∫Øt ƒë·∫ßu ho·∫°t ƒë·ªông m·∫°nh
‚Ä¢ Th·ªùi ti·∫øt thay ƒë·ªïi, c·∫ßn theo d√µi k·ªπ

üéØ C√¥ng vi·ªác tr·ªçng t√¢m:
‚Ä¢ TƒÉng c∆∞·ªùng b√≥n ph√¢n ƒë·ªÉ k√≠ch th√≠ch sinh tr∆∞·ªüng
‚Ä¢ Ki·ªÉm so√°t s√¢u b·ªánh ph√≤ng ng·ª´a t·ª´ s·ªõm
‚Ä¢ TƒÉng √°nh s√°ng cho c√¢y ph√°t tri·ªÉn t·ªët
‚Ä¢ Chu·∫©n b·ªã m√πa m∆∞a ki·ªÉm tra h·ªá th·ªëng tho√°t n∆∞·ªõc

üêõ Ph√≤ng tr·ª´ s√¢u b·ªánh xu√¢n:
- Phun thu·ªëc sinh h·ªçc 1 tu·∫ßn/l·∫ßn
- Ki·ªÉm tra m·∫∑t d∆∞·ªõi l√° c√≥ tr·ª©ng s√¢u
- Lo·∫°i b·ªè l√° b·ªánh ngay khi ph√°t hi·ªán
- TƒÉng c∆∞·ªùng th√¥ng gi√≥`,
        reason: `M√πa xu√¢n - th·ªùi ƒëi·ªÉm l√Ω t∆∞·ªüng cho ${plantName} ph√°t tri·ªÉn v√† chu·∫©n b·ªã cho c·∫£ nƒÉm.`,
      },
      h√®: {
        action: '‚òÄÔ∏è ChƒÉm s√≥c m√πa h√®',
        description: `M√πa h√® - th·ª≠ th√°ch l·ªõn v·ªõi n·∫Øng n√≥ng v√† thi·∫øu n∆∞·ªõc cho ${plantName}!

üå°Ô∏è Th√°ch th·ª©c m√πa h√®:
‚Ä¢ Nhi·ªát ƒë·ªô cao, d·ªÖ stress nhi·ªát
‚Ä¢ Bay h∆°i n∆∞·ªõc m·∫°nh, c·∫ßn t∆∞·ªõi nhi·ªÅu
‚Ä¢ √Ånh s√°ng qu√° m·∫°nh c√≥ th·ªÉ g√¢y ch√°y l√°
‚Ä¢ S√¢u b·ªánh ph√°t tri·ªÉn nhanh trong ƒëi·ªÅu ki·ªán n√≥ng ·∫©m

üõ°Ô∏è Chi·∫øn l∆∞·ª£c chƒÉm s√≥c:
‚Ä¢ Che n·∫Øng 50-70% t·ª´ 10h-16h
‚Ä¢ T∆∞·ªõi 2 l·∫ßn/ng√†y: s√°ng s·ªõm v√† chi·ªÅu m√°t
‚Ä¢ TƒÉng ƒë·ªô ·∫©m b·∫±ng c√°ch phun s∆∞∆°ng xung quanh
‚Ä¢ Mulch ƒë·ªÉ gi·ªØ ·∫©m v√† h·∫° nhi·ªát ƒë·ªô ƒë·∫•t

üíß K·ªπ thu·∫≠t t∆∞·ªõi m√πa h√®:
- T∆∞·ªõi s√¢u nh∆∞ng √≠t t·∫ßn su·∫•t h∆°n
- D√πng n∆∞·ªõc ƒë√£ ƒë·ªÉ qua ƒë√™m (m√°t h∆°n)
- T∆∞·ªõi g·ªëc, tr√°nh l√†m ∆∞·ªõt l√°
- Ki·ªÉm tra ƒë·ªô ·∫©m ƒë·∫•t 2 l·∫ßn/ng√†y`,
        reason: `M√πa h√® - c·∫ßn b·∫£o v·ªá ${plantName} kh·ªèi stress nhi·ªát v√† ƒë·∫£m b·∫£o cung c·∫•p n∆∞·ªõc ƒë·∫ßy ƒë·ªß.`,
      },
      thu: {
        action: 'üçÇ ChƒÉm s√≥c m√πa thu',
        description: `M√πa thu - th·ªùi ƒëi·ªÉm thu ho·∫°ch v√† chu·∫©n b·ªã cho m√πa ƒë√¥ng!

üçÇ ƒê·∫∑c ƒëi·ªÉm m√πa thu:
‚Ä¢ Nhi·ªát ƒë·ªô d·∫ßn gi·∫£m, thu·∫≠n l·ª£i cho m·ªôt s·ªë c√¢y
‚Ä¢ ƒê·ªô ·∫©m kh√¥ng kh√≠ tƒÉng
‚Ä¢ √Ånh s√°ng gi·∫£m d·∫ßn
‚Ä¢ Th·ªùi ti·∫øt b·∫Øt ƒë·∫ßu kh√¥ hanh

üéØ C√¥ng vi·ªác tr·ªçng t√¢m:
‚Ä¢ Thu ho·∫°ch ƒë√∫ng l√∫c ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t
‚Ä¢ Gi·∫£m d·∫ßn t∆∞·ªõi n∆∞·ªõc theo nhu c·∫ßu th·ª±c t·∫ø
‚Ä¢ Chu·∫©n b·ªã cho m√πa ƒë√¥ng v·ªõi c√°c bi·ªán ph√°p b·∫£o v·ªá
‚Ä¢ D·ªçn d·∫πp v∆∞·ªùn lo·∫°i b·ªè l√° r·ª•ng, c√†nh kh√¥

üåæ Thu ho·∫°ch v√† b·∫£o qu·∫£n:
- Thu v√†o bu·ªïi s√°ng m√°t khi c√¢y t∆∞∆°i nh·∫•t
- S·ª≠ d·ª•ng d·ª•ng c·ª• s·∫°ch s·∫Ω, s·∫Øc b√©n
- B·∫£o qu·∫£n ƒë√∫ng c√°ch ƒë·ªÉ k√©o d√†i th·ªùi gian s·ª≠ d·ª•ng
- Thu th·∫≠p h·∫°t gi·ªëng cho v·ª• m√πa t·ªõi`,
        reason: `M√πa thu - t·∫≠n d·ª•ng t·ªëi ƒëa th√†nh qu·∫£ v√† chu·∫©n b·ªã cho ${plantName} qua m√πa ƒë√¥ng.`,
      },
      ƒë√¥ng: {
        action: '‚ùÑÔ∏è ChƒÉm s√≥c m√πa ƒë√¥ng',
        description: `M√πa ƒë√¥ng - th·ªùi k·ª≥ ngh·ªâ ng∆°i v√† b·∫£o t·ªìn s·ª©c kh·ªèe cho ${plantName}!

‚ùÑÔ∏è Th√°ch th·ª©c m√πa ƒë√¥ng:
‚Ä¢ Nhi·ªát ƒë·ªô th·∫•p, c√≥ th·ªÉ g√¢y s·ªëc l·∫°nh
‚Ä¢ √Ånh s√°ng y·∫øu, ·∫£nh h∆∞·ªüng quang h·ª£p
‚Ä¢ Kh√¥ng kh√≠ kh√¥ do gi√≥ m√πa
‚Ä¢ TƒÉng tr∆∞·ªüng ch·∫≠m l·∫°i ho·∫∑c d·ª´ng h·∫≥n

üè† Chi·∫øn l∆∞·ª£c b·∫£o v·ªá:
‚Ä¢ Che ch·∫Øn gi√≥ l·∫°nh b·∫±ng v·∫≠t li·ªáu trong su·ªët
‚Ä¢ Di chuy·ªÉn v√†o trong n·∫øu c√≥ th·ªÉ
‚Ä¢ Gi·∫£m t∆∞·ªõi n∆∞·ªõc v√¨ bay h∆°i ch·∫≠m
‚Ä¢ B·ªï sung √°nh s√°ng b·∫±ng ƒë√®n LED n·∫øu c·∫ßn

üåø ChƒÉm s√≥c ƒë·∫∑c bi·ªát:
- T∆∞·ªõi n∆∞·ªõc ·∫•m (nhi·ªát ƒë·ªô ph√≤ng) v√†o tr∆∞a
- Ki·ªÉm tra s√¢u b·ªánh ·∫©n n√°u trong ƒë·∫•t, g·ªëc c√¢y
- T·ªâa b·ªè ph·∫ßn ch·∫øt, y·∫øu ƒë·ªÉ ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng
- Chu·∫©n b·ªã k·∫ø ho·∫°ch cho m√πa xu√¢n t·ªõi`,
        reason: `M√πa ƒë√¥ng - gi√∫p ${plantName} v∆∞·ª£t qua th·ªùi k·ª≥ kh√≥ khƒÉn v√† chu·∫©n b·ªã cho nƒÉm m·ªõi.`,
      },
    };

    return seasonAdviceMap[season];
  }

  private getSeasonTransitionAdvice(month: number, plantName: string) {
    // Chu·∫©n b·ªã chuy·ªÉn m√πa (1 th√°ng tr∆∞·ªõc)
    const transitionAdvice = {
      2: {
        // Chu·∫©n b·ªã xu√¢n
        action: 'üå∏ Chu·∫©n b·ªã m√πa xu√¢n',
        description: `C√≤n 1 th√°ng n·ªØa l√† m√πa xu√¢n - h√£y chu·∫©n b·ªã ƒë·ªÉ ${plantName} b√πng n·ªï sinh tr∆∞·ªüng!

üõ†Ô∏è Chu·∫©n b·ªã c·∫ßn thi·∫øt:
‚Ä¢ Ki·ªÉm tra d·ª•ng c·ª•: V√≤i t∆∞·ªõi, b√¨nh x·ªãt, dao t·ªâa
‚Ä¢ Chu·∫©n b·ªã ph√¢n b√≥n: NPK cao ƒë·∫°m cho giai ƒëo·∫°n sinh tr∆∞·ªüng
‚Ä¢ L√†m ƒë·∫•t: X·ªõi t∆°i, b·ªï sung compost
‚Ä¢ Ki·ªÉm tra h·∫°t gi·ªëng: Chu·∫©n b·ªã gi·ªëng m·ªõi n·∫øu c·∫ßn

üìã K·∫ø ho·∫°ch xu√¢n:
- L·∫≠p l·ªãch b√≥n ph√¢n ƒë·ªãnh k·ª≥
- Chu·∫©n b·ªã bi·ªán ph√°p ph√≤ng tr·ª´ s√¢u b·ªánh
- L√™n k·∫ø ho·∫°ch m·ªü r·ªông v∆∞·ªùn (n·∫øu c√≥)
- T√¨m hi·ªÉu gi·ªëng m·ªõi ph√π h·ª£p v·ªõi kh√≠ h·∫≠u`,
        reason:
          'Chu·∫©n b·ªã tr∆∞·ªõc 1 th√°ng gi√∫p t·∫≠n d·ª•ng t·ªëi ƒëa m√πa xu√¢n cho ph√°t tri·ªÉn.',
      },
      5: {
        // Chu·∫©n b·ªã h√®
        action: '‚òÄÔ∏è Chu·∫©n b·ªã m√πa h√®',
        description: `M√πa h√® s·∫Øp ƒë·∫øn - chu·∫©n b·ªã h·ªá th·ªëng b·∫£o v·ªá ${plantName} kh·ªèi n·∫Øng n√≥ng!

üåÇ H·ªá th·ªëng che ch·∫Øn:
‚Ä¢ L∆∞·ªõi che n·∫Øng 50-70%: K√≠ch th∆∞·ªõc ph√π h·ª£p v·ªõi v∆∞·ªùn
‚Ä¢ H·ªá th·ªëng t∆∞·ªõi t·ª± ƒë·ªông: Phun s∆∞∆°ng ho·∫∑c nh·ªè gi·ªçt
‚Ä¢ Mulch: R∆°m, v·ªè tr·∫•u ƒë·ªÉ ph·ªß g·ªëc
‚Ä¢ Qu·∫°t gi√≥: T·∫°o th√¥ng gi√≥ cho v∆∞·ªùn trong nh√†

üíß Chu·∫©n b·ªã n∆∞·ªõc:
- Th√πng ch·ª©a n∆∞·ªõc l·ªõn ƒë·ªÉ d·ª± tr·ªØ
- H·ªá th·ªëng ·ªëng d·∫´n n∆∞·ªõc hi·ªáu qu·∫£
- B√¨nh x·ªãt phun s∆∞∆°ng l√†m m√°t
- L√™n l·ªãch t∆∞·ªõi 2 l·∫ßn/ng√†y`,
        reason: 'Chu·∫©n b·ªã h·ªá th·ªëng b·∫£o v·ªá tr∆∞·ªõc khi n·∫Øng n√≥ng ƒë·ªânh ƒëi·ªÉm.',
      },
      8: {
        // Chu·∫©n b·ªã thu
        action: 'üçÇ Chu·∫©n b·ªã m√πa thu',
        description: `M√πa thu ƒëang ƒë·∫øn - th·ªùi ƒëi·ªÉm v√†ng ƒë·ªÉ thu ho·∫°ch v√† l·∫≠p k·∫ø ho·∫°ch!

üåæ Chu·∫©n b·ªã thu ho·∫°ch:
‚Ä¢ D·ª•ng c·ª• thu ho·∫°ch: Dao, k√©o s·∫Øc b√©n v√† s·∫°ch s·∫Ω
‚Ä¢ Ph∆∞∆°ng ti·ªán b·∫£o qu·∫£n: T√∫i, h·ªôp, kho l·∫°nh
‚Ä¢ K·∫ø ho·∫°ch ch·∫ø bi·∫øn: C√°ch s·ª≠ d·ª•ng v√† b·∫£o qu·∫£n l√¢u d√†i
‚Ä¢ Thu th·∫≠p h·∫°t gi·ªëng: Ch·ªçn qu·∫£ t·ªët nh·∫•t ƒë·ªÉ l·∫•y h·∫°t

üìã L·∫≠p k·∫ø ho·∫°ch:
- ƒê√°nh gi√° th√†nh c√¥ng/th·∫•t b·∫°i c·ªßa v·ª• m√πa
- L√™n k·∫ø ho·∫°ch lu√¢n canh cho v·ª• t·ªõi
- Chu·∫©n b·ªã c·∫£i t·∫°o ƒë·∫•t sau thu ho·∫°ch
- Nghi√™n c·ª©u gi·ªëng m·ªõi ph√π h·ª£p`,
        reason:
          'Chu·∫©n b·ªã thu ho·∫°ch v√† k·∫ø ho·∫°ch d√†i h·∫°n cho s·ª± ph√°t tri·ªÉn b·ªÅn v·ªØng.',
      },
      11: {
        // Chu·∫©n b·ªã ƒë√¥ng
        action: '‚ùÑÔ∏è Chu·∫©n b·ªã m√πa ƒë√¥ng',
        description: `M√πa ƒë√¥ng s·∫Øp ƒë·∫øn - b·∫£o v·ªá ${plantName} an to√†n qua m√πa l·∫°nh!

üè† Bi·ªán ph√°p b·∫£o v·ªá:
‚Ä¢ V·∫≠t li·ªáu che ph·ªß: V·∫£i kh√¥ng d·ªát, m√†ng nh·ª±a c√≥ l·ªó
‚Ä¢ H·ªá th·ªëng s∆∞·ªüi ·∫•m: ƒê√®n s∆∞·ªüi, th·∫£m s∆∞·ªüi (n·∫øu c·∫ßn)
‚Ä¢ Khu v·ª±c trong nh√†: Chu·∫©n b·ªã ch·ªó di chuy·ªÉn c√¢y nh·∫°y c·∫£m
‚Ä¢ ƒê√®n LED: B·ªï sung √°nh s√°ng cho c√¢y trong nh√†

üåø ChƒÉm s√≥c cu·ªëi m√πa:
- T·ªâa b·ªè ph·∫ßn y·∫øu, b·ªánh ƒë·ªÉ c√¢y t·∫≠p trung s·ª©c kh·ªèe
- Gi·∫£m d·∫ßn t∆∞·ªõi n∆∞·ªõc v√† b√≥n ph√¢n
- D·ªçn d·∫πp l√° r·ª•ng, c√†nh kh√¥
- Ki·ªÉm tra v√† x·ª≠ l√Ω s√¢u b·ªánh ·∫©n n√°u`,
        reason:
          'Chu·∫©n b·ªã b·∫£o v·ªá c√¢y tr∆∞·ªõc khi th·ªùi ti·∫øt l·∫°nh ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng.',
      },
    };

    return transitionAdvice[month];
  }

  private generateLearningAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { gardener } = context;
    const plantDisplayName = context.garden.plantName;
    const experienceLevel = gardener.experienceLevel.level;

    // L·ªùi khuy√™n h·ªçc t·∫≠p theo level kinh nghi·ªám
    if (experienceLevel <= 2) {
      advices.push({
        id: startId++,
        action: 'üìö Kh√≥a h·ªçc c∆° b·∫£n cho ng∆∞·ªùi m·ªõi',
        description: `Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi th·∫ø gi·ªõi tr·ªìng tr·ªçt! V·ªõi c·∫•p ƒë·ªô "${gardener.experienceLevel.title}", ƒë√¢y l√† nh·ªØng ki·∫øn th·ª©c n·ªÅn t·∫£ng c·∫ßn thi·∫øt:

üìñ Ki·∫øn th·ª©c c∆° b·∫£n c·∫ßn h·ªçc:
‚Ä¢ Sinh h·ªçc c√¢y tr·ªìng: Hi·ªÉu c√°ch c√¢y ho·∫°t ƒë·ªông, quang h·ª£p, h√¥ h·∫•p
‚Ä¢ ƒê·∫•t v√† dinh d∆∞·ª°ng: pH, NPK, vi l∆∞·ª£ng v√† c√°ch s·ª≠ d·ª•ng
‚Ä¢ N∆∞·ªõc v√† t∆∞·ªõi: Nhu c·∫ßu n∆∞·ªõc, d·∫•u hi·ªáu thi·∫øu/th·ª´a n∆∞·ªõc
‚Ä¢ √Ånh s√°ng: Lo·∫°i √°nh s√°ng, c∆∞·ªùng ƒë·ªô, th·ªùi gian chi·∫øu

üéØ M·ª•c ti√™u 30 ng√†y ƒë·∫ßu:
1. Tu·∫ßn 1: H·ªçc c√°ch quan s√°t c√¢y h√†ng ng√†y
2. Tu·∫ßn 2: Hi·ªÉu chu k·ª≥ t∆∞·ªõi n∆∞·ªõc ph√π h·ª£p
3. Tu·∫ßn 3: Nh·∫≠n bi·∫øt d·∫•u hi·ªáu c∆° b·∫£n c·ªßa c√¢y
4. Tu·∫ßn 4: Th·ª±c h√†nh b√≥n ph√¢n ƒë∆°n gi·∫£n

üí° M·∫πo h·ªçc t·∫≠p: Ghi ch√©p h√†ng ng√†y, tham gia c·ªông ƒë·ªìng, ƒë·∫∑t c√¢u h·ªèi!`,
        reason:
          'C·∫•p ƒë·ªô m·ªõi b·∫Øt ƒë·∫ßu - c·∫ßn x√¢y d·ª±ng n·ªÅn t·∫£ng ki·∫øn th·ª©c v·ªØng ch·∫Øc.',
        priority: 'MEDIUM',
        suggestedTime: 'evening',
        category: 'EDUCATION',
      });
    } else if (experienceLevel >= 3 && experienceLevel <= 5) {
      advices.push({
        id: startId++,
        action: 'üß™ N√¢ng cao k·ªπ nƒÉng trung c·∫•p',
        description: `Tuy·ªát v·ªùi! B·∫°n ƒë√£ c√≥ kinh nghi·ªám c∆° b·∫£n. H√£y n√¢ng cao k·ªπ nƒÉng v·ªõi ${plantDisplayName}:

üî¨ K·ªπ nƒÉng n√¢ng cao:
‚Ä¢ Ch·∫©n ƒëo√°n b·ªánh: Nh·∫≠n bi·∫øt s√¢u b·ªánh qua tri·ªáu ch·ª©ng
‚Ä¢ Dinh d∆∞·ª°ng chuy√™n s√¢u: Pha ch·∫ø ph√¢n b√≥n t√πy ch·ªânh
‚Ä¢ K·ªπ thu·∫≠t t·ªâa c√†nh: T·∫°o h√¨nh, tƒÉng nƒÉng su·∫•t
‚Ä¢ Qu·∫£n l√Ω vi kh√≠ h·∫≠u: ƒêi·ªÅu ch·ªânh m√¥i tr∆∞·ªùng micro

üìä Th·ª≠ nghi·ªám v√† so s√°nh:
- So s√°nh hi·ªáu qu·∫£ c√°c lo·∫°i ph√¢n b√≥n
- Th·ª≠ nghi·ªám k·ªπ thu·∫≠t t∆∞·ªõi kh√°c nhau
- Ghi ch√©p v√† ph√¢n t√≠ch d·ªØ li·ªáu
- √Åp d·ª•ng c√°c k·ªπ thu·∫≠t m·ªõi t·ª´ c·ªông ƒë·ªìng

üéì H·ªçc t·ª´ th·∫•t b·∫°i: M·ªói v·∫•n ƒë·ªÅ l√† c∆° h·ªôi h·ªçc h·ªèi qu√Ω b√°u!`,
        reason: 'C·∫•p ƒë·ªô trung c·∫•p - s·∫µn s√†ng h·ªçc h·ªèi k·ªπ thu·∫≠t ph·ª©c t·∫°p h∆°n.',
        priority: 'LOW',
        suggestedTime: 'evening',
        category: 'EDUCATION',
      });
    } else {
      advices.push({
        id: startId++,
        action: 'üèÜ Chia s·∫ª v√† h∆∞·ªõng d·∫´n',
        description: `Xu·∫•t s·∫Øc! V·ªõi kinh nghi·ªám c·∫•p ƒë·ªô "${gardener.experienceLevel.title}", b·∫°n ƒë√£ l√† chuy√™n gia!

üë®‚Äçüè´ Vai tr√≤ c·ªßa b·∫°n:
‚Ä¢ Mentor: H∆∞·ªõng d·∫´n ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu
‚Ä¢ Innovator: Th·ª≠ nghi·ªám k·ªπ thu·∫≠t ti√™n ti·∫øn
‚Ä¢ Leader: D·∫´n d·∫Øt c·ªông ƒë·ªìng tr·ªìng tr·ªçt
‚Ä¢ Researcher: Nghi√™n c·ª©u v√† ph√°t tri·ªÉn

üåü ƒê√≥ng g√≥p cho c·ªông ƒë·ªìng:
- Vi·∫øt b√†i chia s·∫ª kinh nghi·ªám v·ªõi ${plantDisplayName}
- T·∫°o video h∆∞·ªõng d·∫´n k·ªπ thu·∫≠t chuy√™n s√¢u
- Tham gia nghi√™n c·ª©u v·ªÅ c√¢y tr·ªìng
- T·ªï ch·ª©c workshop cho ng∆∞·ªùi m·ªõi

üî¨ Th·ª≠ th√°ch m·ªõi:
- Lai t·∫°o gi·ªëng m·ªõi
- K·ªπ thu·∫≠t tr·ªìng th·ªßy canh/kh√≠ canh
- H·ªá th·ªëng t·ª± ƒë·ªông h√≥a ho√†n to√†n
- Nghi√™n c·ª©u sinh h·ªçc ph√¢n t·ª≠`,
        reason:
          'C·∫•p ƒë·ªô cao - th·ªùi ƒëi·ªÉm chia s·∫ª ki·∫øn th·ª©c v√† d·∫´n d·∫Øt c·ªông ƒë·ªìng.',
        priority: 'LOW',
        suggestedTime: 'evening',
        category: 'COMMUNITY',
      });
    }

    // L·ªùi khuy√™n v·ªÅ tham gia c·ªông ƒë·ªìng
    advices.push({
      id: startId++,
      action: 'ü§ù Tham gia c·ªông ƒë·ªìng l√†m v∆∞·ªùn',
      description: `C·ªông ƒë·ªìng l√† ngu·ªìn ki·∫øn th·ª©c v√¥ t·∫≠n cho vi·ªác tr·ªìng ${plantDisplayName}!

üåê K√™nh h·ªçc h·ªèi tr·ª±c tuy·∫øn:
‚Ä¢ Di·ªÖn ƒë√†n: Tham gia th·∫£o lu·∫≠n, ƒë·∫∑t c√¢u h·ªèi
‚Ä¢ YouTube: Theo d√µi c√°c k√™nh chuy√™n v·ªÅ tr·ªìng tr·ªçt
‚Ä¢ Facebook Groups: Chia s·∫ª h√¨nh ·∫£nh, nh·∫≠n ph·∫£n h·ªìi
‚Ä¢ Apps: S·ª≠ d·ª•ng ·ª©ng d·ª•ng nh·∫≠n di·ªán b·ªánh c√¢y

üèòÔ∏è C·ªông ƒë·ªìng ƒë·ªãa ph∆∞∆°ng:
- Tham gia c√¢u l·∫°c b·ªô l√†m v∆∞·ªùn
- Trao ƒë·ªïƒë·ªïi h·∫°t gi·ªëng v·ªõi h√†ng x√≥m
- Tham quan v∆∞·ªùn m·∫´u trong khu v·ª±c
- Tham gia h·ªôi ch·ª£ n√¥ng s·∫£n ƒë·ªãa ph∆∞∆°ng

üìö Ngu·ªìn h·ªçc li·ªáu ƒë√°ng tin c·∫≠y:
- S√°ch chuy√™n ng√†nh t·ª´ nh√† xu·∫•t b·∫£n uy t√≠n
- Kh√≥a h·ªçc online c√≥ ch·ª©ng ch·ªâ
- H·ªôi th·∫£o, workshop do chuy√™n gia t·ªï ch·ª©c
- Tr·∫°m khuy·∫øn n√¥ng ƒë·ªãa ph∆∞∆°ng

üí° L∆∞u √Ω: Lu√¥n ki·ªÉm ch·ª©ng th√¥ng tin t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau!`,
      reason: 'C·ªông ƒë·ªìng cung c·∫•p kinh nghi·ªám th·ª±c t·∫ø v√† h·ªó tr·ª£ k·ªãp th·ªùi.',
      priority: 'LOW',
      suggestedTime: 'evening',
      category: 'COMMUNITY',
    });

    return advices;
  }

  private generateLongTermAdvice(
    context: AdviceContext,
    analysis: any,
    startId: number,
  ): AdviceActionDto[] {
    const advices: AdviceActionDto[] = [];
    const { garden, plant } = context;
    const plantDisplayName = garden.plantName;
    const { daysSincePlanting } = analysis;

    // K·∫ø ho·∫°ch d√†i h·∫°n cho chu k·ª≥ tr·ªìng
    if (plant.growthDuration && daysSincePlanting > 0) {
      const completionPercent = Math.min(
        (daysSincePlanting / plant.growthDuration) * 100,
        100,
      );
      const daysRemaining = Math.max(
        plant.growthDuration - daysSincePlanting,
        0,
      );

      if (completionPercent > 60) {
        advices.push({
          id: startId++,
          action: 'üìÖ L·∫≠p k·∫ø ho·∫°ch chu k·ª≥ ti·∫øp theo',
          description: `Chu k·ª≥ tr·ªìng ${plantDisplayName} ƒë√£ ho√†n th√†nh ${Math.round(completionPercent)}% (c√≤n ${daysRemaining} ng√†y). ƒê√£ ƒë·∫øn l√∫c l·∫≠p k·∫ø ho·∫°ch cho t∆∞∆°ng lai!

üîÑ Chi·∫øn l∆∞·ª£c lu√¢n canh:
‚Ä¢ Kh√¥ng tr·ªìng l·∫°i ${plantDisplayName} ngay l·∫≠p t·ª©c ·ªü c√πng v·ªã tr√≠
‚Ä¢ C√¢y h·ªç ƒë·∫≠u: ƒê·∫≠u, ƒë·ªó ƒë·ªÉ b·ªï sung ƒë·∫°m t·ª± nhi√™n cho ƒë·∫•t
‚Ä¢ C√¢y l√° xanh: Rau c·∫£i, x√† l√°ch ƒë·ªÉ ngh·ªâ ƒë·∫•t
‚Ä¢ C√¢y c·∫£i t·∫°o ƒë·∫•t: C·ªè linh lƒÉng, l√∫a m·∫°ch ƒë·ªÉ c·∫£i thi·ªán c·∫•u tr√∫c

üå± L·ª±a ch·ªçn c√¢y tr·ªìng ti·∫øp theo:
${this.getRotationSuggestions(garden.plantName)}

üìã Chu·∫©n b·ªã tr∆∞·ªõc:
- Thu th·∫≠p h·∫°t gi·ªëng ch·∫•t l∆∞·ª£ng cao
- C·∫£i t·∫°o ƒë·∫•t v·ªõi ph√¢n compost
- V·ªá sinh d·ª•ng c·ª• v√† khu v·ª±c tr·ªìng
- L√™n l·ªãch th·ªùi gian gieo tr·ªìng ph√π h·ª£p

‚è∞ Timeline ƒë·ªÅ xu·∫•t: B·∫Øt ƒë·∫ßu chu·∫©n b·ªã 2-3 tu·∫ßn tr∆∞·ªõc khi thu ho·∫°ch xong.`,
          reason: `Chu k·ª≥ ${plantDisplayName} s·∫Øp ho√†n th√†nh - c·∫ßn k·∫ø ho·∫°ch cho t∆∞∆°ng lai.`,
          priority: 'MEDIUM',
          suggestedTime: 'evening',
          category: 'PLANNING',
        });
      }
    }

    // L·ªùi khuy√™n v·ªÅ c·∫£i thi·ªán v∆∞·ªùn d√†i h·∫°n
    advices.push({
      id: startId++,
      action: 'üèóÔ∏è N√¢ng c·∫•p h·ªá th·ªëng v∆∞·ªùn',
      description: `H√£y ƒë·∫ßu t∆∞ c·∫£i thi·ªán v∆∞·ªùn ${garden.name} ƒë·ªÉ chƒÉm s√≥c ${plantDisplayName} hi·ªáu qu·∫£ h∆°n!

üîß N√¢ng c·∫•p c∆° s·ªü h·∫° t·∫ßng:
‚Ä¢ H·ªá th·ªëng t∆∞·ªõi t·ª± ƒë·ªông: Timer, c·∫£m bi·∫øn ƒë·ªô ·∫©m
‚Ä¢ Monitoring th√¥ng minh: C·∫£m bi·∫øn nhi·ªát ƒë·ªô, pH, EC
‚Ä¢ Che ch·∫Øn th√¥ng minh: L∆∞·ªõi cu·ªën t·ª± ƒë·ªông theo th·ªùi ti·∫øt
‚Ä¢ Chi·∫øu s√°ng LED: ƒê√®n grow light v·ªõi timer

üí∞ ƒê·∫ßu t∆∞ theo giai ƒëo·∫°n:
Giai ƒëo·∫°n 1 (0-6 th√°ng):
- H·ªá th·ªëng t∆∞·ªõi nh·ªè gi·ªçt c∆° b·∫£n
- C·∫£m bi·∫øn ƒë·ªô ·∫©m ƒë·∫•t ƒë∆°n gi·∫£n
- L∆∞·ªõi che n·∫Øng c·ªë ƒë·ªãnh

Giai ƒëo·∫°n 2 (6-12 th√°ng):
- Timer t∆∞·ªõi t·ª± ƒë·ªông
- C·∫£m bi·∫øn nhi·ªát ƒë·ªô/ƒë·ªô ·∫©m kh√¥ng kh√≠
- H·ªá th·ªëng th√¥ng gi√≥

Giai ƒëo·∫°n 3 (1-2 nƒÉm):
- H·ªá th·ªëng IoT ho√†n ch·ªânh
- App ƒëi·ªÅu khi·ªÉn t·ª´ xa
- AI ph√¢n t√≠ch v√† ƒë∆∞a ra l·ªùi khuy√™n

üìä ROI d·ª± ki·∫øn: Ti·∫øt ki·ªám 40-60% th·ªùi gian chƒÉm s√≥c, tƒÉng 30-50% nƒÉng su·∫•t!`,
      reason:
        'ƒê·∫ßu t∆∞ d√†i h·∫°n gi√∫p t·ªëi ∆∞u h√≥a hi·ªáu qu·∫£ tr·ªìng tr·ªçt v√† ti·∫øt ki·ªám th·ªùi gian.',
      priority: 'LOW',
      suggestedTime: 'evening',
      category: 'IMPROVEMENT',
    });

    // M·ª•c ti√™u v√† th√†nh t·ª±u
    const achievementAdvice = this.generateAchievementAdvice(
      context,
      startId++,
    );
    if (achievementAdvice) {
      advices.push(achievementAdvice);
    }

    return advices;
  }

  private generateAchievementAdvice(
    context: AdviceContext,
    id: number,
  ): AdviceActionDto | null {
    const { gardener, activities } = context;
    const plantDisplayName = context.garden.plantName;
    const experiencePoints = gardener.experiencePoints;
    const activitiesCount = activities.length;

    // T√≠nh to√°n th√†nh t·ª±u hi·ªán t·∫°i
    const achievements: string[] = [];

    if (experiencePoints >= 1000) achievements.push('üèÜ Chuy√™n gia 1000 XP');
    if (activitiesCount >= 50) achievements.push('üìà 50+ ho·∫°t ƒë·ªông');
    if (context.garden.plantStartDate) {
      const days = Math.floor(
        (new Date().getTime() - context.garden.plantStartDate.getTime()) /
          (1000 * 60 * 60 * 24),
      );
      if (days >= 100) achievements.push('‚è∞ 100+ ng√†y chƒÉm s√≥c');
    }

    // M·ª•c ti√™u ti·∫øp theo
    const nextGoals: string[] = [];
    const nextLevelXP = (gardener.experienceLevel.level + 1) * 200; // Gi·∫£ ƒë·ªãnh m·ªói level c·∫ßn 200 XP
    const xpNeeded = nextLevelXP - experiencePoints;

    if (xpNeeded > 0 && xpNeeded <= 500) {
      nextGoals.push(
        `üéØ C√≤n ${xpNeeded} XP ƒë·ªÉ l√™n c·∫•p ƒë·ªô ${gardener.experienceLevel.level + 1}`,
      );
    }

    if (activitiesCount < 100) {
      nextGoals.push(
        `üìä C√≤n ${100 - activitiesCount} ho·∫°t ƒë·ªông ƒë·ªÉ ƒë·∫°t m·ªëc 100 ho·∫°t ƒë·ªông`,
      );
    }

    if (achievements.length === 0 && nextGoals.length === 0) return null;

    return {
      id,
      action: 'üèÖ Th√†nh t·ª±u v√† m·ª•c ti√™u',
      description: `H√£y c√πng nh√¨n l·∫°i nh·ªØng th√†nh t·ª±u v√† ƒë·∫∑t m·ª•c ti√™u m·ªõi cho vi·ªác tr·ªìng ${plantDisplayName}!

${
  achievements.length > 0
    ? `üéâ Th√†nh t·ª±u hi·ªán t·∫°i:
${achievements.map((a) => `‚Ä¢ ${a}`).join('\n')}

`
    : ''
}${
        nextGoals.length > 0
          ? `üéØ M·ª•c ti√™u s·∫Øp t·ªõi:
${nextGoals.map((g) => `‚Ä¢ ${g}`).join('\n')}

`
          : ''
      }üåü C√°ch t√≠ch l≈©y XP nhanh:
‚Ä¢ Ghi nh·∫≠t k√Ω ƒë·∫ßy ƒë·ªß: +5 XP/ho·∫°t ƒë·ªông
‚Ä¢ Ch·ª•p ·∫£nh ti·∫øn ƒë·ªô: +10 XP/·∫£nh ch·∫•t l∆∞·ª£ng
‚Ä¢ Chia s·∫ª kinh nghi·ªám: +20 XP/b√†i vi·∫øt
‚Ä¢ Gi√∫p ƒë·ª° ng∆∞·ªùi m·ªõi: +50 XP/l·∫ßn mentor

üí™ Th·ª≠ th√°ch b·∫£n th√¢n:
- Th·ª≠ nghi·ªám k·ªπ thu·∫≠t m·ªõi
- Tr·ªìng gi·ªëng kh√≥ h∆°n
- ƒê·∫°t nƒÉng su·∫•t cao h∆°n
- Chia s·∫ª ki·∫øn th·ª©c v·ªõi c·ªông ƒë·ªìng

üéä Ph·∫ßn th∆∞·ªüng cho b·∫£n th√¢n: M·ªói m·ª•c ti√™u ƒë·∫°t ƒë∆∞·ª£c, h√£y th∆∞·ªüng cho m√¨nh m·ªôt ƒëi·ªÅu g√¨ ƒë√≥ ƒë·∫∑c bi·ªát!`,
      reason:
        'Theo d√µi ti·∫øn ƒë·ªô v√† ƒë·∫∑t m·ª•c ti√™u gi√∫p duy tr√¨ ƒë·ªông l·ª±c tr·ªìng tr·ªçt.',
      priority: 'LOW',
      suggestedTime: 'evening',
      category: 'ACHIEVEMENT',
    };
  }

  private getGardenTypeDisplay(type: string): string {
    const typeMapping = {
      INDOOR: 'Trong nh√†',
      OUTDOOR: 'Ngo√†i tr·ªùi',
      BALCONY: 'Ban c√¥ng',
      ROOFTOP: 'S√¢n th∆∞·ª£ng',
      WINDOW_SILL: 'B·ªá c·ª≠a s·ªï',
    };
    return typeMapping[type] || type;
  }

  private getTimeGreeting(hour: number): string {
    if (hour < 6) return 'Ch√†o b·∫°n';
    if (hour < 12) return 'Ch√†o bu·ªïi s√°ng';
    if (hour < 18) return 'Ch√†o bu·ªïi chi·ªÅu';
    if (hour < 22) return 'Ch√†o bu·ªïi t·ªëi';
    return 'Ch√†o b·∫°n';
  }

  private getCurrentSeason(): string {
    const month = new Date().getMonth() + 1;
    if (month >= 3 && month <= 5) return 'xu√¢n';
    if (month >= 6 && month <= 8) return 'h√®';
    if (month >= 9 && month <= 11) return 'thu';
    return 'ƒë√¥ng';
  }

  private getTimeOfDay(hour: number): 'morning' | 'noon' | 'evening' {
    if (hour < 12) return 'morning';
    if (hour < 18) return 'noon';
    return 'evening';
  }

  private analyzeWeatherTrend(forecasts: ForecastData): string {
    if (forecasts.daily.length < 3) return 'stable';

    const temps = forecasts.daily.slice(0, 3).map((f) => f.tempDay);
    const avgFirst = temps[0];
    const avgLast = temps[temps.length - 1];

    if (avgLast > avgFirst + 3) return 'warming';
    if (avgLast < avgFirst - 3) return 'cooling';
    return 'stable';
  }

  private assessGrowthProgress(
    days: number,
    growthStage: any,
    activities: any[],
  ): any {
    const expectedDuration = growthStage.duration || 30;
    const progressPercent = (days / expectedDuration) * 100;

    // ƒê√°nh gi√° ho·∫°t ƒë·ªông chƒÉm s√≥c
    const recentActivities = activities.filter((a) => {
      const daysSince = Math.floor(
        (new Date().getTime() - a.timestamp.getTime()) / (1000 * 60 * 60 * 24),
      );
      return daysSince <= 7;
    });

    return {
      progressPercent: Math.min(progressPercent, 100),
      isOnTrack: progressPercent <= 120, // Cho ph√©p tr·ªÖ 20%
      careFrequency: recentActivities.length,
      careQuality: recentActivities.filter((a) => a.evaluations?.length > 0)
        .length,
    };
  }

  private assessRisks(context: AdviceContext): any {
    const risks: RiskItem[] = [];
    const { sensorData, alerts, weatherData } = context;

    // R·ªßi ro t·ª´ c·∫£m bi·∫øn
    Object.entries(sensorData).forEach(([type, reading]) => {
      if (reading.status === 'critical') {
        risks.push({
          type: 'sensor',
          severity: 'high', // 'critical' sensor status maps to 'high' risk
          source: type,
          description: `${type} ·ªü m·ª©c nguy hi·ªÉm: ${reading.value}`,
        });
      }
      // Add other sensor statuses if they constitute a risk
      // e.g., if reading.status === 'warning'
      else if (reading.status === 'warning') {
        risks.push({
          type: 'sensor',
          severity: 'medium', // 'warning' sensor status maps to 'medium' risk
          source: type,
          description: `${type} ·ªü m·ª©c c·∫£nh b√°o: ${reading.value}`,
        });
      }
    });

    // R·ªßi ro t·ª´ th·ªùi ti·∫øt
    if (weatherData) {
      if (weatherData.temp > 40) {
        risks.push({
          type: 'weather',
          severity: 'high',
          source: 'temperature',
          description: `Nhi·ªát ƒë·ªô c·ª±c cao: ${weatherData.temp}¬∞C`,
        });
      }
      if (weatherData.windSpeed > 20) {
        risks.push({
          type: 'weather',
          severity: 'medium',
          source: 'wind',
          description: `Gi√≥ m·∫°nh: ${weatherData.windSpeed} m/s`,
        });
      }
      // Add other weather conditions if they constitute a risk
    }

    // R·ªßi ro t·ª´ alerts
    alerts.forEach((alert) => {
      let riskSeverity: 'high' | 'medium' | 'low';
      switch (alert.severity.toUpperCase()) {
        case 'CRITICAL':
          riskSeverity = 'high';
          break;
        case 'HIGH':
          riskSeverity = 'high';
          break;
        case 'MEDIUM':
          riskSeverity = 'medium';
          break;
        case 'LOW':
          riskSeverity = 'low';
          break;
        default:
          // Default to 'low' or handle unknown severities as needed
          // This case should ideally not be hit if AlertSeverity is a well-defined enum
          this.logger.warn(`Unknown alert severity: ${alert.severity}`);
          riskSeverity = 'low';
      }
      risks.push({
        type: 'alert',
        severity: riskSeverity,
        source: alert.type,
        description: alert.message,
      });
    });

    return {
      totalRisks: risks.length,
      highSeverity: risks.filter((r) => r.severity === 'high').length,
      risks,
    };
  }

  private evaluateCareEffectiveness(context: AdviceContext): any {
    const { evaluations, activities } = context;

    if (evaluations.length === 0) {
      return {
        score: null,
        trend: 'unknown',
        recommendations: ['B·∫Øt ƒë·∫ßu ƒë√°nh gi√° hi·ªáu qu·∫£ chƒÉm s√≥c'],
      };
    }

    const recentEvaluations = evaluations.slice(0, 5);
    const avgRating =
      recentEvaluations.reduce((sum, e) => sum + (e.rating || 3), 0) /
      recentEvaluations.length;

    const recommendations: string[] = [];
    if (avgRating < 3) {
      recommendations.push('C·∫ßn c·∫£i thi·ªán ph∆∞∆°ng ph√°p chƒÉm s√≥c');
    }
    if (activities.length < 10) {
      recommendations.push('TƒÉng t·∫ßn su·∫•t ho·∫°t ƒë·ªông chƒÉm s√≥c');
    }

    return {
      score: avgRating,
      trend:
        avgRating >= 3.5
          ? 'improving'
          : avgRating >= 2.5
            ? 'stable'
            : 'declining',
      recommendations,
    };
  }

  private getSuggestedTimeForAction(
    category: string,
  ): 'morning' | 'noon' | 'evening' {
    const timeMapping = {
      WATERING: 'morning',
      FERTILIZING: 'evening',
      MONITORING: 'morning',
      TEMPERATURE: 'noon',
      LIGHT: 'morning',
      HUMIDITY: 'noon',
      EMERGENCY: 'noon',
      EDUCATION: 'evening',
      PLANNING: 'evening',
    };

    return timeMapping[category] || 'morning';
  }

  private getEnvironmentalRecommendation(
    sensorType: string,
    reading: SensorReading,
    optimalRange: number[],
  ): string {
    const [min, max] = optimalRange;
    const { value, status } = reading;

    if (status === 'normal') return 'ƒêi·ªÅu ki·ªán t·ªët';

    const actionMap = {
      soil_moisture: value < min ? 'C·∫ßn t∆∞·ªõi n∆∞·ªõc' : 'Gi·∫£m t∆∞·ªõi n∆∞·ªõc',
      temperature: value < min ? 'C·∫ßn gi·ªØ ·∫•m' : 'C·∫ßn l√†m m√°t',
      humidity: value < min ? 'TƒÉng ƒë·ªô ·∫©m' : 'Gi·∫£m ƒë·ªô ·∫©m',
      light: value < min ? 'TƒÉng √°nh s√°ng' : 'Che n·∫Øng',
      soil_ph: value < min ? 'TƒÉng pH (gi·∫£m acid)' : 'Gi·∫£m pH (tƒÉng acid)',
    };

    return actionMap[sensorType] || 'C·∫ßn ƒëi·ªÅu ch·ªânh';
  }

  private personalizeAdvice(
    advices: AdviceActionDto[],
    context: AdviceContext,
  ): AdviceActionDto[] {
    const { gardener } = context;
    const experienceLevel = gardener.experienceLevel.level;

    return advices.map((advice) => {
      // ƒêi·ªÅu ch·ªânh ƒë·ªô chi ti·∫øt theo kinh nghi·ªám
      if (experienceLevel <= 2) {
        // Ng∆∞·ªùi m·ªõi: th√™m gi·∫£i th√≠ch c∆° b·∫£n
        if (!advice.description.includes('üí° Gi·∫£i th√≠ch:')) {
          advice.description +=
            '\n\nüí° Gi·∫£i th√≠ch: ' + this.getBasicExplanation(advice.category);
        }
      } else if (experienceLevel >= 5) {
        // Ng∆∞·ªùi c√≥ kinh nghi·ªám: th√™m tips n√¢ng cao
        if (!advice.description.includes('üî¨ Tips chuy√™n s√¢u:')) {
          advice.description +=
            '\n\nüî¨ Tips chuy√™n s√¢u: ' + this.getAdvancedTips(advice.category);
        }
      }

      return advice;
    });
  }

  private getBasicExplanation(category: string): string {
    const explanations = {
      WATERING:
        'C√¢y c·∫ßn n∆∞·ªõc ƒë·ªÉ v·∫≠n chuy·ªÉn dinh d∆∞·ª°ng v√† duy tr√¨ s·ª± s·ªëng. Qu√° √≠t s·∫Ω h√©o, qu√° nhi·ªÅu s·∫Ω th·ªëi r·ªÖ.',
      FERTILIZING:
        'Ph√¢n b√≥n cung c·∫•p dinh d∆∞·ª°ng gi√∫p c√¢y ph√°t tri·ªÉn. NPK l√† 3 ch·∫•t ch√≠nh: ƒê·∫°m (N) cho l√°, L√¢n (P) cho r·ªÖ v√† hoa, Kali (K) cho qu·∫£.',
      TEMPERATURE:
        'Nhi·ªát ƒë·ªô ·∫£nh h∆∞·ªüng ƒë·∫øn t·ªëc ƒë·ªô sinh tr∆∞·ªüng. Qu√° l·∫°nh c√¢y ng·ªß ƒë√¥ng, qu√° n√≥ng c√¢y stress v√† c√≥ th·ªÉ ch·∫øt.',
      LIGHT:
        '√Ånh s√°ng c·∫ßn thi·∫øt cho quang h·ª£p - qu√° tr√¨nh t·∫°o th·ª©c ƒÉn c·ªßa c√¢y. Thi·∫øu s√°ng c√¢y y·∫øu, th·ª´a s√°ng c√¢y ch√°y.',
      HUMIDITY:
        'ƒê·ªô ·∫©m kh√¥ng kh√≠ ·∫£nh h∆∞·ªüng ƒë·∫øn qu√° tr√¨nh tho√°t h∆°i n∆∞·ªõc qua l√°. C√¢y nhi·ªát ƒë·ªõi th√≠ch ƒë·ªô ·∫©m cao.',
    };

    return (
      explanations[category] ||
      'ƒê√¢y l√† y·∫øu t·ªë quan tr·ªçng cho s·ª± ph√°t tri·ªÉn c·ªßa c√¢y.'
    );
  }

  private getAdvancedTips(category: string): string {
    const tips = {
      WATERING:
        'S·ª≠ d·ª•ng c·∫£m bi·∫øn EC ƒë·ªÉ ƒëo ƒë·ªô m·∫∑n c·ªßa n∆∞·ªõc. T∆∞·ªõi theo chu k·ª≥ wet-dry ƒë·ªÉ k√≠ch th√≠ch r·ªÖ ph√°t tri·ªÉn s√¢u.',
      FERTILIZING:
        'K·∫øt h·ª£p ph√¢n h·ªØu c∆° v√† v√¥ c∆° v·ªõi t·ª∑ l·ªá 70:30. S·ª≠ d·ª•ng amino acid l√†m ch·∫•t chelate ƒë·ªÉ tƒÉng h·∫•p thu.',
      TEMPERATURE:
        '√Åp d·ª•ng k·ªπ thu·∫≠t DIF (Day-night temperature difference) ƒë·ªÉ ƒëi·ªÅu ch·ªânh chi·ªÅu cao c√¢y.',
      LIGHT:
        'S·ª≠ d·ª•ng ƒë√®n LED full spectrum v·ªõi DLI (Daily Light Integral) ph√π h·ª£p cho t·ª´ng giai ƒëo·∫°n.',
      HUMIDITY:
        'T·∫°o gradient ƒë·ªô ·∫©m trong v∆∞·ªùn ƒë·ªÉ t·ªëi ∆∞u h√≥a vi kh√≠ h·∫≠u cho t·ª´ng lo·∫°i c√¢y.',
    };

    return (
      tips[category] ||
      'Nghi√™n c·ª©u th√™m v·ªÅ sinh l√Ω c√¢y tr·ªìng ƒë·ªÉ √°p d·ª•ng k·ªπ thu·∫≠t chuy√™n s√¢u.'
    );
  }

  private prioritizeAndFormat(
    advices: AdviceActionDto[],
    context: AdviceContext,
  ): AdviceActionDto[] {
    // G·ªôp nh√≥m theo action t∆∞∆°ng t·ª±
    const grouped = this.groupSimilarAdvices(advices);

    // S·∫Øp x·∫øp theo priority v√† category
    const prioritized = this.sortByPriorityAndRelevance(grouped, context);

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ƒë·ªÉ kh√¥ng overwhelm user
    const limited = this.limitAdviceCount(prioritized);

    // Format cu·ªëi c√πng
    return this.finalFormatting(limited);
  }

  private groupSimilarAdvices(advices: AdviceActionDto[]): AdviceActionDto[] {
    const grouped = new Map<string, AdviceActionDto>();

    advices.forEach((advice) => {
      const key = `${advice.category}_${advice.action.substring(0, 20)}`;

      if (grouped.has(key)) {
        const existing = grouped.get(key)!;
        // G·ªôp n·ªôi dung
        existing.description = this.mergeAdviceContent(
          existing.description,
          advice.description,
        );
        existing.reason += '; ' + advice.reason;

        // Ch·ªçn priority cao h∆°n
        const priorities = ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'];
        if (
          priorities.indexOf(advice.priority) >
          priorities.indexOf(existing.priority)
        ) {
          existing.priority = advice.priority;
        }
      } else {
        grouped.set(key, { ...advice });
      }
    });

    return Array.from(grouped.values());
  }

  private mergeAdviceContent(content1: string, content2: string): string {
    // Tr√°nh tr√πng l·∫∑p n·ªôi dung
    const lines1 = content1.split('\n');
    const lines2 = content2.split('\n');

    // Gi·ªØ n·ªôi dung chi ti·∫øt h∆°n
    return content1.length > content2.length ? content1 : content2;
  }

  private sortByPriorityAndRelevance(
    advices: AdviceActionDto[],
    context: AdviceContext,
  ): AdviceActionDto[] {
    const priorityWeights = { CRITICAL: 4, HIGH: 3, MEDIUM: 2, LOW: 1 };
    const timeOfDay = this.getTimeOfDay(new Date().getHours());

    return advices.sort((a, b) => {
      // Priority tr∆∞·ªõc
      const priorityDiff =
        priorityWeights[b.priority] - priorityWeights[a.priority];
      if (priorityDiff !== 0) return priorityDiff;

      // Th·ªùi gian ph√π h·ª£p
      const aTimeRelevant = a.suggestedTime === timeOfDay ? 1 : 0;
      const bTimeRelevant = b.suggestedTime === timeOfDay ? 1 : 0;
      const timeDiff = bTimeRelevant - aTimeRelevant;
      if (timeDiff !== 0) return timeDiff;

      // Category quan tr·ªçng
      const categoryWeights = {
        EMERGENCY: 10,
        WATERING: 9,
        TEMPERATURE: 8,
        FERTILIZING: 7,
        GROWTH_STAGE: 6,
        WEATHER_FORECAST: 5,
        TASK_MANAGEMENT: 4,
        MONITORING: 3,
        SEASONAL: 2,
        EDUCATION: 1,
      };

      return (
        (categoryWeights[b.category] || 0) - (categoryWeights[a.category] || 0)
      );
    });
  }

  private limitAdviceCount(advices: AdviceActionDto[]): AdviceActionDto[] {
    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng theo priority
    const high = advices.filter((a) => a.priority === 'HIGH').slice(0, 3);
    const medium = advices.filter((a) => a.priority === 'MEDIUM').slice(0, 5);
    const low = advices.filter((a) => a.priority === 'LOW').slice(0, 3);

    return [...high, ...medium, ...low];
  }

  private finalFormatting(advices: AdviceActionDto[]): AdviceActionDto[] {
    return advices.map((advice, index) => ({
      ...advice,
      id: index + 1,
      // Th√™m timestamp cho tracking
      timestamp: new Date().toISOString(),
      // Th√™m metadata
      metadata: {
        generatedAt: new Date().toISOString(),
        version: '2.0',
        aiAssistant: 'GardenAI Premium',
      },
    }));
  }

  // Method to be added
  private getRotationSuggestions(currentPlantName: string): string {
    const safePlantName = currentPlantName.toLowerCase();
    const suggestions: Record<string, string> = {
      'c√† chua':
        '‚Ä¢ C√¢y h·ªç ƒë·∫≠u (ƒë·ªó, l·∫°c) ƒë·ªÉ c·∫£i t·∫°o ƒë·∫•t\n‚Ä¢ Rau c·∫£i, x√† l√°ch cho v·ª• sau',
      ·ªõt: '‚Ä¢ Tr·ªìng d∆∞a chu·ªôt ho·∫∑c b√≠ ƒë·ªÉ thay ƒë·ªïi h·ªç c√¢y\n‚Ä¢ C√¢y gia v·ªã kh√°c nh∆∞ h√∫ng qu·∫ø',
      'd∆∞a chu·ªôt': '‚Ä¢ Tr·ªìng c√† chua ho·∫∑c ·ªõt (kh√°c h·ªç)\n‚Ä¢ C√°c lo·∫°i rau ƒÉn l√°',
      'x√† l√°ch': '‚Ä¢ C√¢y l·∫•y c·ªß nh∆∞ c√† r·ªët, c·ªß c·∫£i\n‚Ä¢ Tr·ªìng c√°c lo·∫°i ƒë·∫≠u',
      'h√∫ng qu·∫ø':
        '‚Ä¢ Tr·ªìng c√°c lo·∫°i rau ƒÉn l√° kh√°c h·ªç\n‚Ä¢ C√¢y c·∫£i t·∫°o ƒë·∫•t nh∆∞ ƒë·∫≠u',
      'b·∫°c h√†':
        '‚Ä¢ Xoay v√≤ng v·ªõi c√°c lo·∫°i rau ƒÉn l√° ho·∫∑c c√¢y gia v·ªã kh√°c\n‚Ä¢ Tr√°nh tr·ªìng l·∫°i li√™n t·ª•c tr√™n c√πng m·ªôt ƒë·∫•t',
      // Add more plants and their rotation suggestions
    };
    const suggestion = suggestions[safePlantName];
    if (suggestion) {
      return suggestion;
    }
    return '‚Ä¢ Lu√¢n canh v·ªõi c√¢y kh√°c h·ªç ƒë·ªÉ tr√°nh s√¢u b·ªánh v√† l√†m gi√†u ƒë·∫•t.\n‚Ä¢ Tham kh·∫£o √Ω ki·∫øn chuy√™n gia ho·∫∑c c·ªông ƒë·ªìng ƒë·ªÉ c√≥ l·ª±a ch·ªçn t·ªët nh·∫•t cho lo·∫°i c√¢y c·ªßa b·∫°n.';
  }
}

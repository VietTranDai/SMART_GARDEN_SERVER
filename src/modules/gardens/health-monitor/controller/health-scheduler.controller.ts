import { 
    Controller, 
    Get, 
    Post, 
    Logger
  } from '@nestjs/common';
  import { 
    ApiTags, 
    ApiOperation, 
    ApiResponse,
    ApiBearerAuth 
  } from '@nestjs/swagger';
import { HealthSchedulerService } from '../service/health-scheduler.service';
  
  @ApiTags('Garden Health Scheduler')
  @Controller('admin/garden-health-scheduler')
  @ApiBearerAuth()
  export class HealthSchedulerController {
    private readonly logger = new Logger(HealthSchedulerController.name);
  
    constructor(
      private readonly schedulerService: HealthSchedulerService
    ) {}
  
    @Get('status')
    @ApiOperation({ 
      summary: 'L·∫•y tr·∫°ng th√°i scheduler',
      description: 'Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c t√°c v·ª• l·∫≠p l·ªãch ƒëang ch·∫°y'
    })
    @ApiResponse({ status: 200, description: 'Tr·∫°ng th√°i scheduler' })
    getSchedulerStatus() {
      return {
        success: true,
        message: 'L·∫•y tr·∫°ng th√°i scheduler th√†nh c√¥ng',
        data: this.schedulerService.getSchedulerStatus(),
        timestamp: new Date().toISOString()
      };
    }
  
    @Post('run-manual-check')
    @ApiOperation({ 
      summary: 'Ch·∫°y ki·ªÉm tra th·ªß c√¥ng',
      description: 'Th·ª±c hi·ªán ki·ªÉm tra s·ª©c kh·ªèe cho t·∫•t c·∫£ v∆∞·ªùn ngay l·∫≠p t·ª©c'
    })
    @ApiResponse({ status: 200, description: 'Ki·ªÉm tra th·ªß c√¥ng ho√†n th√†nh' })
    async runManualHealthCheck(): Promise<any> {
      try {
        this.logger.log('üîÑ B·∫Øt ƒë·∫ßu ki·ªÉm tra th·ªß c√¥ng t·ª´ admin...');
        
        const summary = await this.schedulerService.runManualHealthCheckForAllGardens();
        
        return {
          success: true,
          message: 'Ki·ªÉm tra th·ªß c√¥ng ho√†n th√†nh',
          data: summary,
          timestamp: new Date().toISOString()
        };
      } catch (error) {
        this.logger.error('‚ùå L·ªói ki·ªÉm tra th·ªß c√¥ng:', error.stack);
        return {
          success: false,
          message: 'L·ªói khi th·ª±c hi·ªán ki·ªÉm tra th·ªß c√¥ng',
          error: error.message,
          timestamp: new Date().toISOString()
        };
      }
    }
  }
import { Injectable, Logger } from '@nestjs/common';
import { 
  AlertType, 
  AlertStatus, 
  Severity, 
  SensorType,
  ActivityType,
  WeatherMain 
} from '@prisma/client';
import { PrismaService } from 'src/prisma/prisma.service';

interface GardenHealthReport {
  gardenId: number;
  overallHealth: 'EXCELLENT' | 'GOOD' | 'WARNING' | 'CRITICAL';
  score: number; // 0-100
  issues: HealthIssue[];
  recommendations: string[];
  alerts: AlertData[];
}

interface HealthIssue {
  type: 'SENSOR' | 'WEATHER' | 'PLANT' | 'MAINTENANCE';
  severity: Severity;
  message: string;
  recommendation: string;
}

interface AlertData {
  type: AlertType;
  message: string;
  suggestion: string;
  severity: Severity;
}

@Injectable()
export class HealthMonitorService {
  private readonly logger = new Logger(HealthMonitorService.name);

  constructor(private prisma: PrismaService) {}

  async checkGardenHealth(gardenId: number, userId: number): Promise<GardenHealthReport> {
    try {
      // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ v∆∞·ªùn
      const garden = await this.getGardenDetails(gardenId);
      if (!garden) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y v∆∞·ªùn v·ªõi ID: ${gardenId}`);
      }

      const report: GardenHealthReport = {
        gardenId,
        overallHealth: 'GOOD',
        score: 100,
        issues: [],
        recommendations: [],
        alerts: []
      };

      // Ki·ªÉm tra c√°c y·∫øu t·ªë s·ª©c kh·ªèe v∆∞·ªùn
      await this.checkSensorHealth(garden, report);
      await this.checkWeatherConditions(garden, report);
      await this.checkPlantConditions(garden, report);
      await this.checkMaintenanceNeeds(garden, report);
      await this.checkWateringSchedule(garden, report);

      // T√≠nh to√°n ƒëi·ªÉm t·ªïng th·ªÉ v√† ƒë√°nh gi√°
      this.calculateOverallHealth(report);

      // T·∫°o c√°c alert c·∫ßn thi·∫øt
      await this.createAlertsIfNeeded(garden, report, userId);

      this.logger.log(`ƒê√£ ki·ªÉm tra s·ª©c kh·ªèe v∆∞·ªùn ${garden.name} - ƒêi·ªÉm: ${report.score}/100`);
      
      return report;
    } catch (error) {
      this.logger.error(`L·ªói khi ki·ªÉm tra s·ª©c kh·ªèe v∆∞·ªùn ${gardenId}:`, error);
      throw error;
    }
  }

  private async getGardenDetails(gardenId: number) {
    return await this.prisma.garden.findUnique({
      where: { id: gardenId },
      include: {
        sensors: {
          include: {
            sensorData: {
              take: 10,
              orderBy: { timestamp: 'desc' }
            }
          }
        },
        weatherData: {
          take: 1,
          orderBy: { observedAt: 'desc' }
        },
        dailyForecast: {
          take: 3,
          orderBy: { forecastFor: 'asc' },
          where: {
            forecastFor: {
              gte: new Date()
            }
          }
        },
        activities: {
          take: 10,
          orderBy: { timestamp: 'desc' }
        },
        wateringSchedule: {
          where: {
            scheduledAt: {
              gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 ng√†y qua
            }
          },
          orderBy: { scheduledAt: 'desc' }
        },
        photos: {
          take: 5,
          orderBy: { createdAt: 'desc' }
        }
      }
    });
  }

  private async checkSensorHealth(garden: any, report: GardenHealthReport) {
    const now = new Date();
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    
    for (const sensor of garden.sensors) {
      const latestData = sensor.sensorData[0];
      
      // Ki·ªÉm tra sensor c√≥ ho·∫°t ƒë·ªông kh√¥ng
      if (!latestData || latestData.timestamp < oneHourAgo) {
        const issue: HealthIssue = {
          type: 'SENSOR',
          severity: 'HIGH',
          message: `C·∫£m bi·∫øn ${this.getSensorTypeName(sensor.type)} ƒë√£ ng·ª´ng g·ª≠i d·ªØ li·ªáu t·ª´ ${latestData ? this.formatTimeAgo(latestData.timestamp) : 'r·∫•t l√¢u'}.`,
          recommendation: 'Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† pin c·ªßa c·∫£m bi·∫øn. C√≥ th·ªÉ c·∫ßn thay pin ho·∫∑c kh·ªüi ƒë·ªông l·∫°i thi·∫øt b·ªã.'
        };
        report.issues.push(issue);
        report.score -= 15;

        report.alerts.push({
          type: AlertType.SENSOR_ERROR,
          message: `‚ö†Ô∏è C·∫£m bi·∫øn ${this.getSensorTypeName(sensor.type)} kh√¥ng ph·∫£n h·ªìi`,
          suggestion: issue.recommendation,
          severity: 'HIGH'
        });
        continue;
      }

      // Ki·ªÉm tra gi√° tr·ªã sensor c√≥ b·∫•t th∆∞·ªùng kh√¥ng
      await this.checkSensorValues(sensor, latestData, report);
    }
  }

  private async checkSensorValues(sensor: any, latestData: any, report: GardenHealthReport) {
    const value = latestData.value;
    
    switch (sensor.type) {
      case SensorType.SOIL_MOISTURE:
        if (value < 30) {
          report.issues.push({
            type: 'PLANT',
            severity: 'MEDIUM',
            message: `ƒê·ªô ·∫©m ƒë·∫•t th·∫•p (${value.toFixed(1)}%). C√¢y c√≥ th·ªÉ ƒëang thi·∫øu n∆∞·ªõc.`,
            recommendation: 'T∆∞·ªõi n∆∞·ªõc ngay l·∫≠p t·ª©c v√† ki·ªÉm tra l·ªãch t∆∞·ªõi. Xem x√©t tƒÉng t·∫ßn su·∫•t t∆∞·ªõi trong th·ªùi ti·∫øt n√≥ng.'
          });
          report.score -= 10;
          
          report.alerts.push({
            type: AlertType.PLANT_CONDITION,
            message: `üå± ƒê·∫•t kh√¥ - ƒê·ªô ·∫©m ch·ªâ c√≤n ${value.toFixed(1)}%`,
            suggestion: 'T∆∞·ªõi n∆∞·ªõc ngay ƒë·ªÉ c√¢y kh√¥ng b·ªã h√©o. Ki·ªÉm tra h·ªá th·ªëng t∆∞·ªõi t·ª± ƒë·ªông n·∫øu c√≥.',
            severity: 'MEDIUM'
          });
        } else if (value > 80) {
          report.issues.push({
            type: 'PLANT',
            severity: 'MEDIUM',
            message: `ƒê·ªô ·∫©m ƒë·∫•t cao (${value.toFixed(1)}%). C√≥ th·ªÉ t∆∞·ªõi qu√° nhi·ªÅu n∆∞·ªõc.`,
            recommendation: 'Gi·∫£m l∆∞·ª£ng n∆∞·ªõc t∆∞·ªõi v√† ki·ªÉm tra h·ªá th·ªëng tho√°t n∆∞·ªõc. ƒê·∫•t qu√° ·∫©m c√≥ th·ªÉ g√¢y th·ªëi r·ªÖ.'
          });
          report.score -= 8;
          
          report.alerts.push({
            type: AlertType.PLANT_CONDITION,
            message: `üíß ƒê·∫•t qu√° ·∫©m - ƒê·ªô ·∫©m ${value.toFixed(1)}%`,
            suggestion: 'T·∫°m d·ª´ng t∆∞·ªõi n∆∞·ªõc v√† c·∫£i thi·ªán tho√°t n∆∞·ªõc. Theo d√µi d·∫•u hi·ªáu th·ªëi r·ªÖ.',
            severity: 'MEDIUM'
          });
        }
        break;

      case SensorType.TEMPERATURE:
        if (value > 35) {
          report.issues.push({
            type: 'WEATHER',
            severity: 'MEDIUM',
            message: `Nhi·ªát ƒë·ªô cao (${value.toFixed(1)}¬∞C). C√¢y c√≥ th·ªÉ b·ªã stress nhi·ªát.`,
            recommendation: 'TƒÉng t∆∞·ªõi n∆∞·ªõc, che b√≥ng m√°t v√† tho√°ng kh√≠. Tr√°nh t∆∞·ªõi v√†o gi·ªØa tr∆∞a.'
          });
          report.score -= 8;
        } else if (value < 15) {
          report.issues.push({
            type: 'WEATHER',
            severity: 'MEDIUM',
            message: `Nhi·ªát ƒë·ªô th·∫•p (${value.toFixed(1)}¬∞C). C√¢y c√≥ th·ªÉ b·ªã stress l·∫°nh.`,
            recommendation: 'Che ch·∫Øn gi√≥, gi·ªØ ·∫•m cho c√¢y. Gi·∫£m t∆∞·ªõi n∆∞·ªõc trong th·ªùi ti·∫øt l·∫°nh.'
          });
          report.score -= 8;
        }
        break;

      case SensorType.HUMIDITY:
        if (value < 40) {
          report.issues.push({
            type: 'WEATHER',
            severity: 'LOW',
            message: `ƒê·ªô ·∫©m kh√¥ng kh√≠ th·∫•p (${value.toFixed(1)}%). C√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª± ph√°t tri·ªÉn.`,
            recommendation: 'X·ªãt s∆∞∆°ng nh·∫π xung quanh c√¢y ho·∫∑c ƒë·∫∑t ch·∫≠u n∆∞·ªõc g·∫ßn ƒë·ªÉ tƒÉng ƒë·ªô ·∫©m.'
          });
          report.score -= 5;
        }
        break;

      case SensorType.LIGHT:
        if (value < 1000) {
          report.issues.push({
            type: 'PLANT',
            severity: 'LOW',
            message: `√Ånh s√°ng y·∫øu (${value.toFixed(0)} lux). C√¢y c√≥ th·ªÉ kh√¥ng ƒë·ªß √°nh s√°ng ƒë·ªÉ quang h·ª£p.`,
            recommendation: 'Di chuy·ªÉn c√¢y ƒë·∫øn n∆°i c√≥ nhi·ªÅu √°nh s√°ng h∆°n ho·∫∑c s·ª≠ d·ª•ng ƒë√®n LED tr·ªìng c√¢y.'
          });
          report.score -= 6;
        }
        break;
    }
  }

  private async checkWeatherConditions(garden: any, report: GardenHealthReport) {
    const currentWeather = garden.weatherData[0];
    const forecasts = garden.dailyForecast;

    if (currentWeather) {
      // Ki·ªÉm tra th·ªùi ti·∫øt hi·ªán t·∫°i
      if (currentWeather.weatherMain === WeatherMain.RAIN && currentWeather.rain1h > 10) {
        report.issues.push({
          type: 'WEATHER',
          severity: 'LOW',
          message: `ƒêang m∆∞a to (${currentWeather.rain1h}mm/h). C√¢y c√≥ th·ªÉ b·ªã ng·∫≠p √∫ng.`,
          recommendation: 'Ki·ªÉm tra h·ªá th·ªëng tho√°t n∆∞·ªõc v√† t·∫°m d·ª´ng t∆∞·ªõi n∆∞·ªõc t·ª± ƒë·ªông n·∫øu c√≥.'
        });
        report.score -= 3;
      }

      if (currentWeather.windSpeed > 10) {
        report.issues.push({
          type: 'WEATHER',
          severity: 'MEDIUM',
          message: `Gi√≥ m·∫°nh (${currentWeather.windSpeed.toFixed(1)} m/s). C√¢y c√≥ th·ªÉ b·ªã g√£y c√†nh.`,
          recommendation: 'Gia c∆∞·ªùng c·ªôt ch·ªëng v√† che ch·∫Øn cho c√¢y. Ki·ªÉm tra sau khi gi√≥ t·∫°nh.'
        });
        report.score -= 7;
      }
    }

    // Ki·ªÉm tra d·ª± b√°o th·ªùi ti·∫øt
    if (forecasts.length > 0) {
      const tomorrow = forecasts[0];
      if (tomorrow.tempMax > 38) {
        report.alerts.push({
          type: AlertType.WEATHER,
          message: `üå°Ô∏è Ng√†y mai s·∫Ω r·∫•t n√≥ng (${tomorrow.tempMax.toFixed(1)}¬∞C)`,
          suggestion: 'Chu·∫©n b·ªã t∆∞·ªõi n∆∞·ªõc nhi·ªÅu h∆°n v√† che n·∫Øng cho c√¢y t·ª´ s√°ng s·ªõm.',
          severity: 'MEDIUM'
        });
      }

      if (tomorrow.rain > 20) {
        report.alerts.push({
          type: AlertType.WEATHER,
          message: `üåßÔ∏è Ng√†y mai c√≥ m∆∞a to (${tomorrow.rain.toFixed(1)}mm)`,
          suggestion: 'Ki·ªÉm tra h·ªá th·ªëng tho√°t n∆∞·ªõc v√† t·∫°m d·ª´ng t∆∞·ªõi n∆∞·ªõc t·ª± ƒë·ªông.',
          severity: 'LOW'
        });
      }
    }
  }

  private async checkPlantConditions(garden: any, report: GardenHealthReport) {
    if (!garden.plantName || !garden.plantGrowStage) {
      report.recommendations.push('üí° C·∫≠p nh·∫≠t th√¥ng tin lo·∫°i c√¢y v√† giai ƒëo·∫°n ph√°t tri·ªÉn ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c l·ªùi khuy√™n chƒÉm s√≥c t·ªët h∆°n.');
      return;
    }

    // Ki·ªÉm tra th·ªùi gian tr·ªìng
    if (garden.plantStartDate) {
      const daysSincePlanting = Math.floor((Date.now() - garden.plantStartDate.getTime()) / (1000 * 60 * 60 * 24));
      
      if (garden.plantDuration && daysSincePlanting > garden.plantDuration) {
        report.alerts.push({
          type: AlertType.PLANT_CONDITION,
          message: `üåø C√¢y ƒë√£ tr∆∞·ªüng th√†nh sau ${daysSincePlanting} ng√†y`,
          suggestion: 'ƒê√£ ƒë·∫øn l√∫c thu ho·∫°ch ho·∫∑c chu·∫©n b·ªã chu k·ª≥ tr·ªìng m·ªõi.',
          severity: 'LOW'
        });
      }
    }

    // Ki·ªÉm tra ho·∫°t ƒë·ªông chƒÉm s√≥c g·∫ßn ƒë√¢y
    const recentActivities = garden.activities.slice(0, 5);
    const lastWatering = recentActivities.find(a => a.activityType === ActivityType.WATERING);
    
    if (!lastWatering || this.daysSince(lastWatering.timestamp) > 3) {
      report.issues.push({
        type: 'MAINTENANCE',
        severity: 'MEDIUM',
        message: `Ch∆∞a t∆∞·ªõi n∆∞·ªõc t·ª´ ${lastWatering ? this.formatTimeAgo(lastWatering.timestamp) : 'r·∫•t l√¢u'}.`,
        recommendation: 'Ki·ªÉm tra ƒë·ªô ·∫©m ƒë·∫•t v√† t∆∞·ªõi n∆∞·ªõc n·∫øu c·∫ßn thi·∫øt. ƒê·∫∑t nh·∫Øc nh·ªü t∆∞·ªõi n∆∞·ªõc ƒë·ªãnh k·ª≥.'
      });
      report.score -= 12;
    }
  }

  private async checkMaintenanceNeeds(garden: any, report: GardenHealthReport) {
    const recentActivities = garden.activities.slice(0, 10);
    const now = new Date();

    // Ki·ªÉm tra b√≥n ph√¢n
    const lastFertilizing = recentActivities.find(a => a.activityType === ActivityType.FERTILIZING);
    if (!lastFertilizing || this.daysSince(lastFertilizing.timestamp) > 30) {
      report.recommendations.push(`üåø ƒê√£ ${lastFertilizing ? this.daysSince(lastFertilizing.timestamp) : 'r·∫•t nhi·ªÅu'} ng√†y ch∆∞a b√≥n ph√¢n. C√¢n nh·∫Øc b√≥n ph√¢n ƒë·ªÉ c√¢y ph√°t tri·ªÉn t·ªët h∆°n.`);
    }

    // Ki·ªÉm tra t·ªâa c√†nh
    const lastPruning = recentActivities.find(a => a.activityType === ActivityType.PRUNING);
    if (!lastPruning || this.daysSince(lastPruning.timestamp) > 45) {
      report.recommendations.push(`‚úÇÔ∏è C√¢n nh·∫Øc t·ªâa c√†nh ƒë·ªÉ c√¢y ph√°t tri·ªÉn ƒë·ªÅu v√† tho√°ng kh√≠.`);
    }

    // Ki·ªÉm tra ki·ªÉm so√°t s√¢u b·ªánh
    const lastPestControl = recentActivities.find(a => a.activityType === ActivityType.PEST_CONTROL);
    if (!lastPestControl || this.daysSince(lastPestControl.timestamp) > 60) {
      report.recommendations.push(`üêõ Th∆∞·ªùng xuy√™n ki·ªÉm tra s√¢u b·ªánh v√† phun thu·ªëc ph√≤ng tr·ª´ n·∫øu c·∫ßn.`);
    }
  }

  private async checkWateringSchedule(garden: any, report: GardenHealthReport) {
    const upcomingWatering = garden.wateringSchedule.filter(w => 
      w.status === 'PENDING' && w.scheduledAt > new Date()
    );

    const overdueWatering = garden.wateringSchedule.filter(w => 
      w.status === 'PENDING' && w.scheduledAt < new Date()
    );

    if (overdueWatering.length > 0) {
      report.issues.push({
        type: 'MAINTENANCE',
        severity: 'MEDIUM',
        message: `C√≥ ${overdueWatering.length} l·ªãch t∆∞·ªõi ƒë√£ qu√° h·∫°n.`,
        recommendation: 'T∆∞·ªõi n∆∞·ªõc ngay l·∫≠p t·ª©c v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch t∆∞·ªõi.'
      });
      report.score -= 10;

      report.alerts.push({
        type: AlertType.ACTIVITY,
        message: `‚è∞ Qu√™n t∆∞·ªõi n∆∞·ªõc - ${overdueWatering.length} l·ªãch t∆∞·ªõi qu√° h·∫°n`,
        suggestion: 'T∆∞·ªõi n∆∞·ªõc ngay v√† ƒë·∫∑t nh·∫Øc nh·ªü ƒë·ªÉ kh√¥ng qu√™n l·∫ßn sau.',
        severity: 'MEDIUM'
      });
    }

    if (upcomingWatering.length > 0) {
      const nextWatering = upcomingWatering[0];
      const hoursUntil = Math.ceil((nextWatering.scheduledAt.getTime() - Date.now()) / (1000 * 60 * 60));
      
      if (hoursUntil <= 2) {
        report.alerts.push({
          type: AlertType.MAINTENANCE,
          message: `üíß S·∫Øp ƒë·∫øn gi·ªù t∆∞·ªõi n∆∞·ªõc (${hoursUntil}h n·ªØa)`,
          suggestion: 'Chu·∫©n b·ªã d·ª•ng c·ª• t∆∞·ªõi v√† ki·ªÉm tra l∆∞·ª£ng n∆∞·ªõc c·∫ßn thi·∫øt.',
          severity: 'LOW'
        });
      }
    }
  }

  private calculateOverallHealth(report: GardenHealthReport) {
    // ƒê·∫£m b·∫£o ƒëi·ªÉm kh√¥ng √¢m
    report.score = Math.max(0, report.score);

    // X√°c ƒë·ªãnh m·ª©c ƒë·ªô s·ª©c kh·ªèe t·ªïng th·ªÉ
    if (report.score >= 90) {
      report.overallHealth = 'EXCELLENT';
    } else if (report.score >= 70) {
      report.overallHealth = 'GOOD';
    } else if (report.score >= 50) {
      report.overallHealth = 'WARNING';
    } else {
      report.overallHealth = 'CRITICAL';
    }

    // Th√™m l·ªùi khuy√™n t·ªïng qu√°t
    switch (report.overallHealth) {
      case 'EXCELLENT':
        report.recommendations.push('üéâ V∆∞·ªùn c·ªßa b·∫°n ƒëang ph√°t tri·ªÉn r·∫•t t·ªët! Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô chƒÉm s√≥c hi·ªán t·∫°i.');
        break;
      case 'GOOD':
        report.recommendations.push('üëç V∆∞·ªùn ƒëang trong t√¨nh tr·∫°ng t·ªët. Ch√∫ √Ω m·ªôt s·ªë ƒëi·ªÉm nh·ªè ƒë·ªÉ ƒë·∫°t k·∫øt qu·∫£ t·ªët h∆°n.');
        break;
      case 'WARNING':
        report.recommendations.push('‚ö†Ô∏è V∆∞·ªùn c·∫ßn ƒë∆∞·ª£c chƒÉm s√≥c th√™m. H√£y x·ª≠ l√Ω c√°c v·∫•n ƒë·ªÅ ƒë∆∞·ª£c ch·ªâ ra ƒë·ªÉ c√¢y ph√°t tri·ªÉn t·ªët h∆°n.');
        break;
      case 'CRITICAL':
        report.recommendations.push('üö® V∆∞·ªùn ƒëang g·∫∑p nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng. C·∫ßn h√†nh ƒë·ªông ngay l·∫≠p t·ª©c ƒë·ªÉ c·ª©u c√¢y.');
        break;
    }
  }

  private async createAlertsIfNeeded(garden: any, report: GardenHealthReport, userId: number) {
    for (const alertData of report.alerts) {
      // Ki·ªÉm tra xem alert t∆∞∆°ng t·ª± ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingAlert = await this.prisma.alert.findFirst({
        where: {
          gardenId: garden.id,
          userId: userId,
          type: alertData.type,
          message: alertData.message,
          status: { in: ['PENDING', 'IN_PROGRESS'] },
          createdAt: {
            gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Trong 24h qua
          }
        }
      });

      if (!existingAlert) {
        await this.prisma.alert.create({
          data: {
            gardenId: garden.id,
            userId: userId,
            type: alertData.type,
            message: alertData.message,
            suggestion: alertData.suggestion,
            severity: alertData.severity,
            status: AlertStatus.PENDING
          }
        });
      }
    }
  }

  // Utility methods
  private getSensorTypeName(type: SensorType): string {
    const names = {
      [SensorType.HUMIDITY]: 'ƒë·ªô ·∫©m kh√¥ng kh√≠',
      [SensorType.TEMPERATURE]: 'nhi·ªát ƒë·ªô',
      [SensorType.LIGHT]: '√°nh s√°ng',
      [SensorType.WATER_LEVEL]: 'm·ª±c n∆∞·ªõc',
      [SensorType.RAINFALL]: 'l∆∞·ª£ng m∆∞a',
      [SensorType.SOIL_MOISTURE]: 'ƒë·ªô ·∫©m ƒë·∫•t',
      [SensorType.SOIL_PH]: 'ƒë·ªô pH ƒë·∫•t'
    };
    return names[type] || type;
  }

  private formatTimeAgo(date: Date): string {
    const hours = Math.floor((Date.now() - date.getTime()) / (1000 * 60 * 60));
    if (hours < 1) return 'v√†i ph√∫t tr∆∞·ªõc';
    if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`;
    const days = Math.floor(hours / 24);
    return `${days} ng√†y tr∆∞·ªõc`;
  }

  private daysSince(date: Date): number {
    return Math.floor((Date.now() - date.getTime()) / (1000 * 60 * 60 * 24));
  }

  // Public method ƒë·ªÉ l·∫•y b√°o c√°o v·ªõi format th√¢n thi·ªán
  async getGardenHealthReportForUser(gardenId: number, userId: number): Promise<string> {
    const report = await this.checkGardenHealth(gardenId, userId);
    
    const garden = await this.prisma.garden.findUnique({
      where: { id: gardenId },
      select: { name: true, plantName: true }
    });

    let message = `üìä **B√ÅO C√ÅO T√åNH TR·∫†NG V∆Ø·ªúN "${garden?.name}"**\n\n`;
    
    // Hi·ªÉn th·ªã ƒëi·ªÉm t·ªïng th·ªÉ
    const healthEmoji = {
      'EXCELLENT': 'üåü',
      'GOOD': 'üëç',
      'WARNING': '‚ö†Ô∏è',
      'CRITICAL': 'üö®'
    };

    message += `${healthEmoji[report.overallHealth]} **T√¨nh tr·∫°ng t·ªïng th·ªÉ**: ${this.getHealthStatusText(report.overallHealth)}\n`;
    message += `üìà **ƒêi·ªÉm s·ª©c kh·ªèe**: ${report.score}/100\n\n`;

    // Hi·ªÉn th·ªã c√°c v·∫•n ƒë·ªÅ
    if (report.issues.length > 0) {
      message += `üîç **C√ÅC V·∫§N ƒê·ªÄ C·∫¶N CH√ö √ù:**\n`;
      report.issues.forEach((issue, index) => {
        const severityEmoji = { 'LOW': 'üü°', 'MEDIUM': 'üü†', 'HIGH': 'üî¥', 'CRITICAL': 'üö®' };
        message += `${index + 1}. ${severityEmoji[issue.severity]} ${issue.message}\n`;
        message += `   üí° *${issue.recommendation}*\n\n`;
      });
    }

    // Hi·ªÉn th·ªã l·ªùi khuy√™n
    if (report.recommendations.length > 0) {
      message += `üí° **L·ªúI KHUY√äN CHƒÇM S√ìC:**\n`;
      report.recommendations.forEach((rec, index) => {
        message += `${index + 1}. ${rec}\n`;
      });
      message += `\n`;
    }

    // Hi·ªÉn th·ªã alert kh·∫©n c·∫•p
    const urgentAlerts = report.alerts.filter(a => a.severity === 'HIGH' || a.severity === 'CRITICAL');
    if (urgentAlerts.length > 0) {
      message += `üö® **C·∫¶N X·ª¨ L√ù NGAY:**\n`;
      urgentAlerts.forEach(alert => {
        message += `‚Ä¢ ${alert.message}\n`;
        message += `  ${alert.suggestion}\n`;
      });
    }

    message += `\nüìÖ *C·∫≠p nh·∫≠t l√∫c: ${new Date().toLocaleString('vi-VN')}*`;
    
    return message;
  }

  private getHealthStatusText(health: string): string {
    const statusTexts = {
      'EXCELLENT': 'Xu·∫•t s·∫Øc',
      'GOOD': 'T·ªët',
      'WARNING': 'C·∫ßn ch√∫ √Ω',
      'CRITICAL': 'Nghi√™m tr·ªçng'
    };
    return statusTexts[health] || health;
  }
}
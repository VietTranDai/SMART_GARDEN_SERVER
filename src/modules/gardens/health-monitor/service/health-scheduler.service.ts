import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { PrismaService } from 'src/prisma/prisma.service';
import { HealthMonitorService } from './health-monitor.service';
import { Severity } from '@prisma/client';

interface ScheduledCheckResult {
  gardenId: number;
  gardenName: string;
  status: 'SUCCESS' | 'ERROR' | 'SKIPPED';
  score?: number;
  alertsCreated?: number;
  error?: string;
  processingTime?: number;
}

interface ScheduledCheckSummary {
  totalGardens: number;
  successfulChecks: number;
  failedChecks: number;
  skippedChecks: number;
  totalAlertsCreated: number;
  averageScore: number;
  processingTimeMs: number;
  timestamp: string;
}

@Injectable()
export class HealthSchedulerService {
  private readonly logger = new Logger(HealthSchedulerService.name);
  private isRunning = false;

  constructor(
    private readonly healthMonitorService: HealthMonitorService,
    private readonly prisma: PrismaService
  ) {}

  // Ch·∫°y ki·ªÉm tra s·ª©c kh·ªèe m·ªói 2 gi·ªù
  @Cron('0 */2 * * *', {
    name: 'garden-health-check-2hours',
    timeZone: 'Asia/Ho_Chi_Minh'
  })
  async performScheduledHealthChecks() {
    if (this.isRunning) {
      this.logger.warn('Ki·ªÉm tra s·ª©c kh·ªèe v∆∞·ªùn ƒëang ch·∫°y, b·ªè qua l·∫ßn n√†y');
      return;
    }

    this.isRunning = true;
    const startTime = Date.now();
    
    this.logger.log('üåø B·∫Øt ƒë·∫ßu ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ cho t·∫•t c·∫£ v∆∞·ªùn (m·ªói 2 gi·ªù)...');

    try {
      const summary = await this.runHealthChecksForAllGardens();
      await this.logScheduledCheckSummary(summary);
      
      this.logger.log(
        `‚úÖ Ho√†n th√†nh ki·ªÉm tra ƒë·ªãnh k·ª≥: ${summary.successfulChecks}/${summary.totalGardens} v∆∞·ªùn th√†nh c√¥ng, ` +
        `${summary.totalAlertsCreated} c·∫£nh b√°o ƒë∆∞·ª£c t·∫°o, th·ªùi gian: ${summary.processingTimeMs}ms`
      );

    } catch (error) {
      this.logger.error('‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra ƒë·ªãnh k·ª≥:', error.stack);
    } finally {
      this.isRunning = false;
    }
  }

  // Ch·∫°y ki·ªÉm tra nhanh m·ªói 30 ph√∫t (ch·ªâ sensor quan tr·ªçng)
  @Cron('*/30 * * * *', {
    name: 'garden-quick-check-30min',
    timeZone: 'Asia/Ho_Chi_Minh'
  })
  async performQuickHealthChecks() {
    this.logger.log('‚ö° B·∫Øt ƒë·∫ßu ki·ªÉm tra nhanh sensor quan tr·ªçng (m·ªói 30 ph√∫t)...');

    try {
      const criticalIssues = await this.checkCriticalSensors();
      
      if (criticalIssues.length > 0) {
        this.logger.warn(`üö® Ph√°t hi·ªán ${criticalIssues.length} v·∫•n ƒë·ªÅ sensor nghi√™m tr·ªçng`);
        await this.handleCriticalSensorIssues(criticalIssues);
      } else {
        this.logger.log('‚úÖ T·∫•t c·∫£ sensor quan tr·ªçng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
      }

    } catch (error) {
      this.logger.error('‚ùå L·ªói trong ki·ªÉm tra nhanh:', error.stack);
    }
  }

  // Ch·∫°y ki·ªÉm tra d·ª± b√°o th·ªùi ti·∫øt m·ªói 6 gi·ªù
  @Cron('0 */6 * * *', {
    name: 'weather-forecast-check-6hours',
    timeZone: 'Asia/Ho_Chi_Minh'
  })
  async checkWeatherForecastAlerts() {
    this.logger.log('üå§Ô∏è Ki·ªÉm tra c·∫£nh b√°o d·ª± b√°o th·ªùi ti·∫øt (m·ªói 6 gi·ªù)...');

    try {
      const weatherAlerts = await this.analyzeWeatherForecasts();
      
      if (weatherAlerts.length > 0) {
        this.logger.log(`üì° T·∫°o ${weatherAlerts.length} c·∫£nh b√°o th·ªùi ti·∫øt cho c√°c v∆∞·ªùn`);
      }

    } catch (error) {
      this.logger.error('‚ùå L·ªói ki·ªÉm tra d·ª± b√°o th·ªùi ti·∫øt:', error.stack);
    }
  }

  // Manual method ƒë·ªÉ ki·ªÉm tra t·∫•t c·∫£ v∆∞·ªùn ngay l·∫≠p t·ª©c
  async runManualHealthCheckForAllGardens(): Promise<ScheduledCheckSummary> {
    this.logger.log('üîÑ B·∫Øt ƒë·∫ßu ki·ªÉm tra s·ª©c kh·ªèe th·ªß c√¥ng cho t·∫•t c·∫£ v∆∞·ªùn...');
    
    return await this.runHealthChecksForAllGardens();
  }

  // Core method ƒë·ªÉ ch·∫°y ki·ªÉm tra cho t·∫•t c·∫£ v∆∞·ªùn
  private async runHealthChecksForAllGardens(): Promise<ScheduledCheckSummary> {
    const startTime = Date.now();
    const results: ScheduledCheckResult[] = [];

    try {
      // L·∫•y t·∫•t c·∫£ v∆∞·ªùn ƒëang ho·∫°t ƒë·ªông
      const activeGardens = await this.prisma.garden.findMany({
        where: { 
          status: 'ACTIVE'
        },
        include: { 
          gardener: {
            include: {
              user: true
            }
          }
        },
        orderBy: { id: 'asc' }
      });

      this.logger.log(`üìä T√¨m th·∫•y ${activeGardens.length} v∆∞·ªùn ƒëang ho·∫°t ƒë·ªông`);

      // X·ª≠ l√Ω t·ª´ng v∆∞·ªùn
      for (const garden of activeGardens) {
        const gardenStartTime = Date.now();
        
        try {
          // Ki·ªÉm tra xem v∆∞·ªùn c√≥ c·∫ßn ki·ªÉm tra kh√¥ng (tr√°nh ki·ªÉm tra qu√° th∆∞·ªùng xuy√™n)
          if (await this.shouldSkipGarden(garden.id)) {
            results.push({
              gardenId: garden.id,
              gardenName: garden.name,
              status: 'SKIPPED'
            });
            continue;
          }

          const healthReport = await this.healthMonitorService.checkGardenHealth(
            garden.id, 
            garden.gardener.userId
          );

          const processingTime = Date.now() - gardenStartTime;

          results.push({
            gardenId: garden.id,
            gardenName: garden.name,
            status: 'SUCCESS',
            score: healthReport.score,
            alertsCreated: healthReport.alerts.length,
            processingTime
          });

          this.logger.debug(
            `‚úÖ V∆∞·ªùn "${garden.name}" (ID: ${garden.id}) - ` +
            `ƒêi·ªÉm: ${healthReport.score}/100, ` +
            `Alerts: ${healthReport.alerts.length}, ` +
            `Th·ªùi gian: ${processingTime}ms`
          );

          // Th√™m delay nh·ªè ƒë·ªÉ tr√°nh qu√° t·∫£i database
          await this.sleep(100);

        } catch (error) {
          const processingTime = Date.now() - gardenStartTime;
          
          results.push({
            gardenId: garden.id,
            gardenName: garden.name,
            status: 'ERROR',
            error: error.message,
            processingTime
          });

          this.logger.error(
            `‚ùå L·ªói ki·ªÉm tra v∆∞·ªùn "${garden.name}" (ID: ${garden.id}): ${error.message}`
          );
        }
      }

      // T·∫°o summary
      const totalProcessingTime = Date.now() - startTime;
      const successfulResults = results.filter(r => r.status === 'SUCCESS');
      
      const summary: ScheduledCheckSummary = {
        totalGardens: activeGardens.length,
        successfulChecks: successfulResults.length,
        failedChecks: results.filter(r => r.status === 'ERROR').length,
        skippedChecks: results.filter(r => r.status === 'SKIPPED').length,
        totalAlertsCreated: successfulResults.reduce((sum, r) => sum + (r.alertsCreated || 0), 0),
        averageScore: successfulResults.length > 0 
          ? Math.round(successfulResults.reduce((sum, r) => sum + (r.score || 0), 0) / successfulResults.length)
          : 0,
        processingTimeMs: totalProcessingTime,
        timestamp: new Date().toISOString()
      };

      return summary;

    } catch (error) {
      this.logger.error('‚ùå L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh ki·ªÉm tra:', error.stack);
      throw error;
    }
  }

  private async checkCriticalSensors() {
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const criticalIssues: any[] = [];

    // Ki·ªÉm tra sensor quan tr·ªçng (ƒë·ªô ·∫©m ƒë·∫•t, nhi·ªát ƒë·ªô)
    const criticalSensors = await this.prisma.sensor.findMany({
      where: {
        type: { in: ['SOIL_MOISTURE', 'TEMPERATURE'] }
      },
      include: {
        garden: { 
          include: { 
            gardener: { include: { user: true } }
          } 
        },
        sensorData: {
          take: 1,
          orderBy: { timestamp: 'desc' }
        }
      }
    });

    for (const sensor of criticalSensors) {
      const latestData = sensor.sensorData[0];
      
      if (!latestData || latestData.timestamp < oneHourAgo) {
        criticalIssues.push({
          sensorId: sensor.id,
          sensorType: sensor.type,
          gardenId: sensor.gardenId,
          gardenName: sensor.garden.name,
          userId: sensor.garden.gardener.userId,
          lastSeen: latestData?.timestamp || null
        });
      }

      // Ki·ªÉm tra gi√° tr·ªã c·ª±c ƒëoan
      if (latestData) {
        if (sensor.type === 'SOIL_MOISTURE' && latestData.value < 20) {
          criticalIssues.push({
            sensorId: sensor.id,
            sensorType: sensor.type,
            gardenId: sensor.gardenId,
            gardenName: sensor.garden.name,
            userId: sensor.garden.gardener.userId,
            issue: 'CRITICALLY_LOW_MOISTURE',
            value: latestData.value
          });
        }

        if (sensor.type === 'TEMPERATURE' && (latestData.value > 42 || latestData.value < 0)) {
          criticalIssues.push({
            sensorId: sensor.id,
            sensorType: sensor.type,
            gardenId: sensor.gardenId,
            gardenName: sensor.garden.name,
            userId: sensor.garden.gardener.userId,
            issue: 'EXTREME_TEMPERATURE',
            value: latestData.value
          });
        }
      }
    }

    return criticalIssues;
  }

  private async handleCriticalSensorIssues(issues: any[]) {
    for (const issue of issues) {
      try {
        // Ki·ªÉm tra xem ƒë√£ c√≥ alert t∆∞∆°ng t·ª± ch∆∞a
        const existingAlert = await this.prisma.alert.findFirst({
          where: {
            gardenId: issue.gardenId,
            userId: issue.userId,
            type: 'SENSOR_ERROR',
            status: { in: ['PENDING', 'IN_PROGRESS'] },
            createdAt: {
              gte: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2 gi·ªù qua
            }
          }
        });

        if (!existingAlert) {
          let message = '';
          let suggestion = '';
          let severity: Severity = 'HIGH';

          if (issue.issue === 'CRITICALLY_LOW_MOISTURE') {
            message = `üö® KH·∫®N C·∫§P: ƒê·ªô ·∫©m ƒë·∫•t c·ª±c th·∫•p ${issue.value.toFixed(1)}% t·∫°i v∆∞·ªùn ${issue.gardenName}`;
            suggestion = 'T∆∞·ªõi n∆∞·ªõc ngay l·∫≠p t·ª©c! C√¢y c√≥ th·ªÉ ch·∫øt trong v√†i gi·ªù t·ªõi n·∫øu kh√¥ng ƒë∆∞·ª£c t∆∞·ªõi n∆∞·ªõc.';
            severity = 'CRITICAL';
          } else if (issue.issue === 'EXTREME_TEMPERATURE') {
            message = `üå°Ô∏è KH·∫®N C·∫§P: Nhi·ªát ƒë·ªô c·ª±c ${issue.value > 35 ? 'cao' : 'th·∫•p'} ${issue.value.toFixed(1)}¬∞C t·∫°i v∆∞·ªùn ${issue.gardenName}`;
            suggestion = issue.value > 35 
              ? 'Che n·∫Øng v√† l√†m m√°t ngay l·∫≠p t·ª©c!'
              : 'Gi·ªØ ·∫•m v√† b·∫£o v·ªá c√¢y kh·ªèi l·∫°nh ngay!';
            severity = 'CRITICAL';
          } else {
            message = `üî¥ C·∫£m bi·∫øn ${issue.sensorType} t·∫°i v∆∞·ªùn ${issue.gardenName} ƒë√£ ng·ª´ng ho·∫°t ƒë·ªông`;
            suggestion = 'Ki·ªÉm tra k·∫øt n·ªëi v√† pin c·∫£m bi·∫øn ngay l·∫≠p t·ª©c';
          }

          await this.prisma.alert.create({
            data: {
              gardenId: issue.gardenId,
              userId: issue.userId,
              type: 'SENSOR_ERROR',
              message,
              suggestion,
              severity,
              status: 'PENDING'
            }
          });

          this.logger.warn(`üö® T·∫°o c·∫£nh b√°o kh·∫©n c·∫•p cho v∆∞·ªùn ${issue.gardenName}: ${message}`);
        }
      } catch (error) {
        this.logger.error(`L·ªói t·∫°o c·∫£nh b√°o kh·∫©n c·∫•p:`, error);
      }
    }
  }

  private async analyzeWeatherForecasts() {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    const weatherForecasts = await this.prisma.dailyForecast.findMany({
      where: {
        forecastFor: {
          gte: tomorrow,
          lt: new Date(tomorrow.getTime() + 24 * 60 * 60 * 1000)
        }
      },
      include: {
        garden: {
          include: {
            gardener: { include: { user: true } }
          }
        }
      }
    });

    const alerts: any[] = [];

    for (const forecast of weatherForecasts) {
      const weatherAlerts: any[] = [];

      // Nhi·ªát ƒë·ªô c·ª±c cao
      if (forecast.tempMax > 40) {
        weatherAlerts.push({
          type: 'WEATHER',
          message: `üå°Ô∏è C·∫£nh b√°o: Ng√†y mai nhi·ªát ƒë·ªô s·∫Ω r·∫•t cao ${forecast.tempMax.toFixed(1)}¬∞C t·∫°i v∆∞·ªùn ${forecast.garden.name}`,
          suggestion: 'Chu·∫©n b·ªã che n·∫Øng v√† t∆∞·ªõi n∆∞·ªõc nhi·ªÅu h∆°n t·ª´ s√°ng s·ªõm. Tr√°nh l√†m v∆∞·ªùn v√†o gi·ªØa tr∆∞a.',
          severity: forecast.tempMax > 42 ? 'HIGH' : 'MEDIUM'
        });
      }

      // M∆∞a to
      if (forecast.rain && forecast.rain > 25) {
        weatherAlerts.push({
          type: 'WEATHER',
          message: `üåßÔ∏è C·∫£nh b√°o: Ng√†y mai c√≥ m∆∞a to ${forecast.rain.toFixed(1)}mm t·∫°i v∆∞·ªùn ${forecast.garden.name}`,
          suggestion: 'Ki·ªÉm tra h·ªá th·ªëng tho√°t n∆∞·ªõc v√† t·∫°m d·ª´ng t∆∞·ªõi n∆∞·ªõc t·ª± ƒë·ªông. Chu·∫©n b·ªã che ch·∫Øn n·∫øu c·∫ßn.',
          severity: forecast.rain > 50 ? 'HIGH' : 'MEDIUM'
        });
      }

      // Gi√≥ m·∫°nh
      if (forecast.windSpeed > 12) {
        weatherAlerts.push({
          type: 'WEATHER',
          message: `üí® C·∫£nh b√°o: Ng√†y mai c√≥ gi√≥ m·∫°nh ${forecast.windSpeed.toFixed(1)} m/s t·∫°i v∆∞·ªùn ${forecast.garden.name}`,
          suggestion: 'Gia c·ªë c√¢y v√† di chuy·ªÉn ch·∫≠u nh·ªè v√†o n∆°i k√≠n gi√≥. Ki·ªÉm tra c·ªôt ch·ªëng.',
          severity: forecast.windSpeed > 15 ? 'HIGH' : 'MEDIUM'
        });
      }

      for (const alert of weatherAlerts) {
        // Ki·ªÉm tra alert t∆∞∆°ng t·ª±
        const existingAlert = await this.prisma.alert.findFirst({
          where: {
            gardenId: forecast.gardenId,
            userId: forecast.garden.gardener.userId,
            type: alert.type,
            status: { in: ['PENDING', 'IN_PROGRESS'] },
            createdAt: {
              gte: new Date(Date.now() - 12 * 60 * 60 * 1000) // 12 gi·ªù qua
            }
          }
        });

        if (!existingAlert) {
          await this.prisma.alert.create({
            data: {
              gardenId: forecast.gardenId,
              userId: forecast.garden.gardener.userId,
              type: alert.type,
              message: alert.message,
              suggestion: alert.suggestion,
              severity: alert.severity,
              status: 'PENDING'
            }
          });

          alerts.push(alert);
        }
      }
    }

    return alerts;
  }

  private async shouldSkipGarden(gardenId: number): Promise<boolean> {
    // B·ªè qua n·∫øu ƒë√£ ki·ªÉm tra trong 1.5 gi·ªù qua
    const recentCheck = await this.prisma.alert.findFirst({
      where: {
        gardenId,
        createdAt: {
          gte: new Date(Date.now() - 1.5 * 60 * 60 * 1000)
        }
      }
    });

    return !!recentCheck;
  }

  private async logScheduledCheckSummary(summary: ScheduledCheckSummary) {
    try {
      // Log v√†o database ho·∫∑c file n·∫øu c·∫ßn
      this.logger.log(
        `üìä T√≥m t·∫Øt ki·ªÉm tra ƒë·ªãnh k·ª≥: ` +
        `${summary.successfulChecks}/${summary.totalGardens} th√†nh c√¥ng, ` +
        `${summary.failedChecks} l·ªói, ` +
        `${summary.skippedChecks} b·ªè qua, ` +
        `${summary.totalAlertsCreated} c·∫£nh b√°o, ` +
        `ƒëi·ªÉm TB: ${summary.averageScore}/100`
      );
    } catch (error) {
      this.logger.error('L·ªói ghi log summary:', error);
    }
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Public methods ƒë·ªÉ qu·∫£n l√Ω service
  getSchedulerStatus() {
    return {
      isRunning: this.isRunning,
      timezone: 'Asia/Ho_Chi_Minh',
      schedules: {
        'garden-health-check-2hours': 'M·ªói 2 gi·ªù (0 */2 * * *)',
        'garden-quick-check-30min': 'M·ªói 30 ph√∫t (*/30 * * * *)',
        'weather-forecast-check-6hours': 'M·ªói 6 gi·ªù (0 */6 * * *)'
      },
      nextRun: {
        healthCheck: 'Trong 2 gi·ªù t·ªõi',
        quickCheck: 'Trong 30 ph√∫t t·ªõi',
        weatherCheck: 'Trong 6 gi·ªù t·ªõi'
      }
    };
  }
}